
d:/Proyect_final/Particle/irrigation/target/5.2.0/argon/irrigation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005568  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b9588  000b9588  00009588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         00000074  2003e470  000b95ac  0000e470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000030c  2003e4e4  2003e4e4  0001e4e4  2**2
                  ALLOC
  6 .backup       00000004  2003f400  000b9620  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000b9624  000b9624  00019624  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000b962a  000b962a  0001962a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000b964e  000b964e  0001964e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   00199a43  00000000  00000000  00019652  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0001c7dc  00000000  00000000  001b3095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    00047e27  00000000  00000000  001cf871  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00003620  00000000  00000000  00217698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000c8b8  00000000  00000000  0021acb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000453cc  00000000  00000000  00227570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00058e41  00000000  00000000  0026c93c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001524ae  00000000  00000000  002c577d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00009f84  00000000  00000000  00417c2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <__aeabi_drsub>:
   b4020:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b4024:	e002      	b.n	b402c <__adddf3>
   b4026:	bf00      	nop

000b4028 <__aeabi_dsub>:
   b4028:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b402c <__adddf3>:
   b402c:	b530      	push	{r4, r5, lr}
   b402e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b4032:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b4036:	ea94 0f05 	teq	r4, r5
   b403a:	bf08      	it	eq
   b403c:	ea90 0f02 	teqeq	r0, r2
   b4040:	bf1f      	itttt	ne
   b4042:	ea54 0c00 	orrsne.w	ip, r4, r0
   b4046:	ea55 0c02 	orrsne.w	ip, r5, r2
   b404a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b404e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4052:	f000 80e2 	beq.w	b421a <__adddf3+0x1ee>
   b4056:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b405a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b405e:	bfb8      	it	lt
   b4060:	426d      	neglt	r5, r5
   b4062:	dd0c      	ble.n	b407e <__adddf3+0x52>
   b4064:	442c      	add	r4, r5
   b4066:	ea80 0202 	eor.w	r2, r0, r2
   b406a:	ea81 0303 	eor.w	r3, r1, r3
   b406e:	ea82 0000 	eor.w	r0, r2, r0
   b4072:	ea83 0101 	eor.w	r1, r3, r1
   b4076:	ea80 0202 	eor.w	r2, r0, r2
   b407a:	ea81 0303 	eor.w	r3, r1, r3
   b407e:	2d36      	cmp	r5, #54	; 0x36
   b4080:	bf88      	it	hi
   b4082:	bd30      	pophi	{r4, r5, pc}
   b4084:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b4088:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b408c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b4090:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b4094:	d002      	beq.n	b409c <__adddf3+0x70>
   b4096:	4240      	negs	r0, r0
   b4098:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b409c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b40a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b40a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b40a8:	d002      	beq.n	b40b0 <__adddf3+0x84>
   b40aa:	4252      	negs	r2, r2
   b40ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b40b0:	ea94 0f05 	teq	r4, r5
   b40b4:	f000 80a7 	beq.w	b4206 <__adddf3+0x1da>
   b40b8:	f1a4 0401 	sub.w	r4, r4, #1
   b40bc:	f1d5 0e20 	rsbs	lr, r5, #32
   b40c0:	db0d      	blt.n	b40de <__adddf3+0xb2>
   b40c2:	fa02 fc0e 	lsl.w	ip, r2, lr
   b40c6:	fa22 f205 	lsr.w	r2, r2, r5
   b40ca:	1880      	adds	r0, r0, r2
   b40cc:	f141 0100 	adc.w	r1, r1, #0
   b40d0:	fa03 f20e 	lsl.w	r2, r3, lr
   b40d4:	1880      	adds	r0, r0, r2
   b40d6:	fa43 f305 	asr.w	r3, r3, r5
   b40da:	4159      	adcs	r1, r3
   b40dc:	e00e      	b.n	b40fc <__adddf3+0xd0>
   b40de:	f1a5 0520 	sub.w	r5, r5, #32
   b40e2:	f10e 0e20 	add.w	lr, lr, #32
   b40e6:	2a01      	cmp	r2, #1
   b40e8:	fa03 fc0e 	lsl.w	ip, r3, lr
   b40ec:	bf28      	it	cs
   b40ee:	f04c 0c02 	orrcs.w	ip, ip, #2
   b40f2:	fa43 f305 	asr.w	r3, r3, r5
   b40f6:	18c0      	adds	r0, r0, r3
   b40f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b40fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4100:	d507      	bpl.n	b4112 <__adddf3+0xe6>
   b4102:	f04f 0e00 	mov.w	lr, #0
   b4106:	f1dc 0c00 	rsbs	ip, ip, #0
   b410a:	eb7e 0000 	sbcs.w	r0, lr, r0
   b410e:	eb6e 0101 	sbc.w	r1, lr, r1
   b4112:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b4116:	d31b      	bcc.n	b4150 <__adddf3+0x124>
   b4118:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b411c:	d30c      	bcc.n	b4138 <__adddf3+0x10c>
   b411e:	0849      	lsrs	r1, r1, #1
   b4120:	ea5f 0030 	movs.w	r0, r0, rrx
   b4124:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b4128:	f104 0401 	add.w	r4, r4, #1
   b412c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b4130:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b4134:	f080 809a 	bcs.w	b426c <__adddf3+0x240>
   b4138:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b413c:	bf08      	it	eq
   b413e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4142:	f150 0000 	adcs.w	r0, r0, #0
   b4146:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b414a:	ea41 0105 	orr.w	r1, r1, r5
   b414e:	bd30      	pop	{r4, r5, pc}
   b4150:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b4154:	4140      	adcs	r0, r0
   b4156:	eb41 0101 	adc.w	r1, r1, r1
   b415a:	3c01      	subs	r4, #1
   b415c:	bf28      	it	cs
   b415e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b4162:	d2e9      	bcs.n	b4138 <__adddf3+0x10c>
   b4164:	f091 0f00 	teq	r1, #0
   b4168:	bf04      	itt	eq
   b416a:	4601      	moveq	r1, r0
   b416c:	2000      	moveq	r0, #0
   b416e:	fab1 f381 	clz	r3, r1
   b4172:	bf08      	it	eq
   b4174:	3320      	addeq	r3, #32
   b4176:	f1a3 030b 	sub.w	r3, r3, #11
   b417a:	f1b3 0220 	subs.w	r2, r3, #32
   b417e:	da0c      	bge.n	b419a <__adddf3+0x16e>
   b4180:	320c      	adds	r2, #12
   b4182:	dd08      	ble.n	b4196 <__adddf3+0x16a>
   b4184:	f102 0c14 	add.w	ip, r2, #20
   b4188:	f1c2 020c 	rsb	r2, r2, #12
   b418c:	fa01 f00c 	lsl.w	r0, r1, ip
   b4190:	fa21 f102 	lsr.w	r1, r1, r2
   b4194:	e00c      	b.n	b41b0 <__adddf3+0x184>
   b4196:	f102 0214 	add.w	r2, r2, #20
   b419a:	bfd8      	it	le
   b419c:	f1c2 0c20 	rsble	ip, r2, #32
   b41a0:	fa01 f102 	lsl.w	r1, r1, r2
   b41a4:	fa20 fc0c 	lsr.w	ip, r0, ip
   b41a8:	bfdc      	itt	le
   b41aa:	ea41 010c 	orrle.w	r1, r1, ip
   b41ae:	4090      	lslle	r0, r2
   b41b0:	1ae4      	subs	r4, r4, r3
   b41b2:	bfa2      	ittt	ge
   b41b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b41b8:	4329      	orrge	r1, r5
   b41ba:	bd30      	popge	{r4, r5, pc}
   b41bc:	ea6f 0404 	mvn.w	r4, r4
   b41c0:	3c1f      	subs	r4, #31
   b41c2:	da1c      	bge.n	b41fe <__adddf3+0x1d2>
   b41c4:	340c      	adds	r4, #12
   b41c6:	dc0e      	bgt.n	b41e6 <__adddf3+0x1ba>
   b41c8:	f104 0414 	add.w	r4, r4, #20
   b41cc:	f1c4 0220 	rsb	r2, r4, #32
   b41d0:	fa20 f004 	lsr.w	r0, r0, r4
   b41d4:	fa01 f302 	lsl.w	r3, r1, r2
   b41d8:	ea40 0003 	orr.w	r0, r0, r3
   b41dc:	fa21 f304 	lsr.w	r3, r1, r4
   b41e0:	ea45 0103 	orr.w	r1, r5, r3
   b41e4:	bd30      	pop	{r4, r5, pc}
   b41e6:	f1c4 040c 	rsb	r4, r4, #12
   b41ea:	f1c4 0220 	rsb	r2, r4, #32
   b41ee:	fa20 f002 	lsr.w	r0, r0, r2
   b41f2:	fa01 f304 	lsl.w	r3, r1, r4
   b41f6:	ea40 0003 	orr.w	r0, r0, r3
   b41fa:	4629      	mov	r1, r5
   b41fc:	bd30      	pop	{r4, r5, pc}
   b41fe:	fa21 f004 	lsr.w	r0, r1, r4
   b4202:	4629      	mov	r1, r5
   b4204:	bd30      	pop	{r4, r5, pc}
   b4206:	f094 0f00 	teq	r4, #0
   b420a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b420e:	bf06      	itte	eq
   b4210:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b4214:	3401      	addeq	r4, #1
   b4216:	3d01      	subne	r5, #1
   b4218:	e74e      	b.n	b40b8 <__adddf3+0x8c>
   b421a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b421e:	bf18      	it	ne
   b4220:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4224:	d029      	beq.n	b427a <__adddf3+0x24e>
   b4226:	ea94 0f05 	teq	r4, r5
   b422a:	bf08      	it	eq
   b422c:	ea90 0f02 	teqeq	r0, r2
   b4230:	d005      	beq.n	b423e <__adddf3+0x212>
   b4232:	ea54 0c00 	orrs.w	ip, r4, r0
   b4236:	bf04      	itt	eq
   b4238:	4619      	moveq	r1, r3
   b423a:	4610      	moveq	r0, r2
   b423c:	bd30      	pop	{r4, r5, pc}
   b423e:	ea91 0f03 	teq	r1, r3
   b4242:	bf1e      	ittt	ne
   b4244:	2100      	movne	r1, #0
   b4246:	2000      	movne	r0, #0
   b4248:	bd30      	popne	{r4, r5, pc}
   b424a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b424e:	d105      	bne.n	b425c <__adddf3+0x230>
   b4250:	0040      	lsls	r0, r0, #1
   b4252:	4149      	adcs	r1, r1
   b4254:	bf28      	it	cs
   b4256:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b425a:	bd30      	pop	{r4, r5, pc}
   b425c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b4260:	bf3c      	itt	cc
   b4262:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b4266:	bd30      	popcc	{r4, r5, pc}
   b4268:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b426c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b4270:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b4274:	f04f 0000 	mov.w	r0, #0
   b4278:	bd30      	pop	{r4, r5, pc}
   b427a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b427e:	bf1a      	itte	ne
   b4280:	4619      	movne	r1, r3
   b4282:	4610      	movne	r0, r2
   b4284:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b4288:	bf1c      	itt	ne
   b428a:	460b      	movne	r3, r1
   b428c:	4602      	movne	r2, r0
   b428e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4292:	bf06      	itte	eq
   b4294:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b4298:	ea91 0f03 	teqeq	r1, r3
   b429c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b42a0:	bd30      	pop	{r4, r5, pc}
   b42a2:	bf00      	nop

000b42a4 <__aeabi_ui2d>:
   b42a4:	f090 0f00 	teq	r0, #0
   b42a8:	bf04      	itt	eq
   b42aa:	2100      	moveq	r1, #0
   b42ac:	4770      	bxeq	lr
   b42ae:	b530      	push	{r4, r5, lr}
   b42b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42b8:	f04f 0500 	mov.w	r5, #0
   b42bc:	f04f 0100 	mov.w	r1, #0
   b42c0:	e750      	b.n	b4164 <__adddf3+0x138>
   b42c2:	bf00      	nop

000b42c4 <__aeabi_i2d>:
   b42c4:	f090 0f00 	teq	r0, #0
   b42c8:	bf04      	itt	eq
   b42ca:	2100      	moveq	r1, #0
   b42cc:	4770      	bxeq	lr
   b42ce:	b530      	push	{r4, r5, lr}
   b42d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b42dc:	bf48      	it	mi
   b42de:	4240      	negmi	r0, r0
   b42e0:	f04f 0100 	mov.w	r1, #0
   b42e4:	e73e      	b.n	b4164 <__adddf3+0x138>
   b42e6:	bf00      	nop

000b42e8 <__aeabi_f2d>:
   b42e8:	0042      	lsls	r2, r0, #1
   b42ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b42ee:	ea4f 0131 	mov.w	r1, r1, rrx
   b42f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b42f6:	bf1f      	itttt	ne
   b42f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b42fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b4300:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b4304:	4770      	bxne	lr
   b4306:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b430a:	bf08      	it	eq
   b430c:	4770      	bxeq	lr
   b430e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b4312:	bf04      	itt	eq
   b4314:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b4318:	4770      	bxeq	lr
   b431a:	b530      	push	{r4, r5, lr}
   b431c:	f44f 7460 	mov.w	r4, #896	; 0x380
   b4320:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4324:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b4328:	e71c      	b.n	b4164 <__adddf3+0x138>
   b432a:	bf00      	nop

000b432c <__aeabi_ul2d>:
   b432c:	ea50 0201 	orrs.w	r2, r0, r1
   b4330:	bf08      	it	eq
   b4332:	4770      	bxeq	lr
   b4334:	b530      	push	{r4, r5, lr}
   b4336:	f04f 0500 	mov.w	r5, #0
   b433a:	e00a      	b.n	b4352 <__aeabi_l2d+0x16>

000b433c <__aeabi_l2d>:
   b433c:	ea50 0201 	orrs.w	r2, r0, r1
   b4340:	bf08      	it	eq
   b4342:	4770      	bxeq	lr
   b4344:	b530      	push	{r4, r5, lr}
   b4346:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b434a:	d502      	bpl.n	b4352 <__aeabi_l2d+0x16>
   b434c:	4240      	negs	r0, r0
   b434e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4352:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b4356:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b435a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b435e:	f43f aed8 	beq.w	b4112 <__adddf3+0xe6>
   b4362:	f04f 0203 	mov.w	r2, #3
   b4366:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b436a:	bf18      	it	ne
   b436c:	3203      	addne	r2, #3
   b436e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b4372:	bf18      	it	ne
   b4374:	3203      	addne	r2, #3
   b4376:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b437a:	f1c2 0320 	rsb	r3, r2, #32
   b437e:	fa00 fc03 	lsl.w	ip, r0, r3
   b4382:	fa20 f002 	lsr.w	r0, r0, r2
   b4386:	fa01 fe03 	lsl.w	lr, r1, r3
   b438a:	ea40 000e 	orr.w	r0, r0, lr
   b438e:	fa21 f102 	lsr.w	r1, r1, r2
   b4392:	4414      	add	r4, r2
   b4394:	e6bd      	b.n	b4112 <__adddf3+0xe6>
   b4396:	bf00      	nop

000b4398 <__aeabi_dmul>:
   b4398:	b570      	push	{r4, r5, r6, lr}
   b439a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b439e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b43a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b43a6:	bf1d      	ittte	ne
   b43a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b43ac:	ea94 0f0c 	teqne	r4, ip
   b43b0:	ea95 0f0c 	teqne	r5, ip
   b43b4:	f000 f8de 	bleq	b4574 <__aeabi_dmul+0x1dc>
   b43b8:	442c      	add	r4, r5
   b43ba:	ea81 0603 	eor.w	r6, r1, r3
   b43be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b43c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b43c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b43ca:	bf18      	it	ne
   b43cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b43d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b43d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b43d8:	d038      	beq.n	b444c <__aeabi_dmul+0xb4>
   b43da:	fba0 ce02 	umull	ip, lr, r0, r2
   b43de:	f04f 0500 	mov.w	r5, #0
   b43e2:	fbe1 e502 	umlal	lr, r5, r1, r2
   b43e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b43ea:	fbe0 e503 	umlal	lr, r5, r0, r3
   b43ee:	f04f 0600 	mov.w	r6, #0
   b43f2:	fbe1 5603 	umlal	r5, r6, r1, r3
   b43f6:	f09c 0f00 	teq	ip, #0
   b43fa:	bf18      	it	ne
   b43fc:	f04e 0e01 	orrne.w	lr, lr, #1
   b4400:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b4404:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b4408:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b440c:	d204      	bcs.n	b4418 <__aeabi_dmul+0x80>
   b440e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b4412:	416d      	adcs	r5, r5
   b4414:	eb46 0606 	adc.w	r6, r6, r6
   b4418:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b441c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b4420:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b4424:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b4428:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b442c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b4430:	bf88      	it	hi
   b4432:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4436:	d81e      	bhi.n	b4476 <__aeabi_dmul+0xde>
   b4438:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b443c:	bf08      	it	eq
   b443e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b4442:	f150 0000 	adcs.w	r0, r0, #0
   b4446:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b444a:	bd70      	pop	{r4, r5, r6, pc}
   b444c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b4450:	ea46 0101 	orr.w	r1, r6, r1
   b4454:	ea40 0002 	orr.w	r0, r0, r2
   b4458:	ea81 0103 	eor.w	r1, r1, r3
   b445c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b4460:	bfc2      	ittt	gt
   b4462:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4466:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b446a:	bd70      	popgt	{r4, r5, r6, pc}
   b446c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b4470:	f04f 0e00 	mov.w	lr, #0
   b4474:	3c01      	subs	r4, #1
   b4476:	f300 80ab 	bgt.w	b45d0 <__aeabi_dmul+0x238>
   b447a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b447e:	bfde      	ittt	le
   b4480:	2000      	movle	r0, #0
   b4482:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b4486:	bd70      	pople	{r4, r5, r6, pc}
   b4488:	f1c4 0400 	rsb	r4, r4, #0
   b448c:	3c20      	subs	r4, #32
   b448e:	da35      	bge.n	b44fc <__aeabi_dmul+0x164>
   b4490:	340c      	adds	r4, #12
   b4492:	dc1b      	bgt.n	b44cc <__aeabi_dmul+0x134>
   b4494:	f104 0414 	add.w	r4, r4, #20
   b4498:	f1c4 0520 	rsb	r5, r4, #32
   b449c:	fa00 f305 	lsl.w	r3, r0, r5
   b44a0:	fa20 f004 	lsr.w	r0, r0, r4
   b44a4:	fa01 f205 	lsl.w	r2, r1, r5
   b44a8:	ea40 0002 	orr.w	r0, r0, r2
   b44ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b44b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b44b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44b8:	fa21 f604 	lsr.w	r6, r1, r4
   b44bc:	eb42 0106 	adc.w	r1, r2, r6
   b44c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44c4:	bf08      	it	eq
   b44c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44ca:	bd70      	pop	{r4, r5, r6, pc}
   b44cc:	f1c4 040c 	rsb	r4, r4, #12
   b44d0:	f1c4 0520 	rsb	r5, r4, #32
   b44d4:	fa00 f304 	lsl.w	r3, r0, r4
   b44d8:	fa20 f005 	lsr.w	r0, r0, r5
   b44dc:	fa01 f204 	lsl.w	r2, r1, r4
   b44e0:	ea40 0002 	orr.w	r0, r0, r2
   b44e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b44e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44ec:	f141 0100 	adc.w	r1, r1, #0
   b44f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44f4:	bf08      	it	eq
   b44f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44fa:	bd70      	pop	{r4, r5, r6, pc}
   b44fc:	f1c4 0520 	rsb	r5, r4, #32
   b4500:	fa00 f205 	lsl.w	r2, r0, r5
   b4504:	ea4e 0e02 	orr.w	lr, lr, r2
   b4508:	fa20 f304 	lsr.w	r3, r0, r4
   b450c:	fa01 f205 	lsl.w	r2, r1, r5
   b4510:	ea43 0302 	orr.w	r3, r3, r2
   b4514:	fa21 f004 	lsr.w	r0, r1, r4
   b4518:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b451c:	fa21 f204 	lsr.w	r2, r1, r4
   b4520:	ea20 0002 	bic.w	r0, r0, r2
   b4524:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b4528:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b452c:	bf08      	it	eq
   b452e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b4532:	bd70      	pop	{r4, r5, r6, pc}
   b4534:	f094 0f00 	teq	r4, #0
   b4538:	d10f      	bne.n	b455a <__aeabi_dmul+0x1c2>
   b453a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b453e:	0040      	lsls	r0, r0, #1
   b4540:	eb41 0101 	adc.w	r1, r1, r1
   b4544:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4548:	bf08      	it	eq
   b454a:	3c01      	subeq	r4, #1
   b454c:	d0f7      	beq.n	b453e <__aeabi_dmul+0x1a6>
   b454e:	ea41 0106 	orr.w	r1, r1, r6
   b4552:	f095 0f00 	teq	r5, #0
   b4556:	bf18      	it	ne
   b4558:	4770      	bxne	lr
   b455a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b455e:	0052      	lsls	r2, r2, #1
   b4560:	eb43 0303 	adc.w	r3, r3, r3
   b4564:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b4568:	bf08      	it	eq
   b456a:	3d01      	subeq	r5, #1
   b456c:	d0f7      	beq.n	b455e <__aeabi_dmul+0x1c6>
   b456e:	ea43 0306 	orr.w	r3, r3, r6
   b4572:	4770      	bx	lr
   b4574:	ea94 0f0c 	teq	r4, ip
   b4578:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b457c:	bf18      	it	ne
   b457e:	ea95 0f0c 	teqne	r5, ip
   b4582:	d00c      	beq.n	b459e <__aeabi_dmul+0x206>
   b4584:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b4588:	bf18      	it	ne
   b458a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b458e:	d1d1      	bne.n	b4534 <__aeabi_dmul+0x19c>
   b4590:	ea81 0103 	eor.w	r1, r1, r3
   b4594:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b4598:	f04f 0000 	mov.w	r0, #0
   b459c:	bd70      	pop	{r4, r5, r6, pc}
   b459e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b45a2:	bf06      	itte	eq
   b45a4:	4610      	moveq	r0, r2
   b45a6:	4619      	moveq	r1, r3
   b45a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b45ac:	d019      	beq.n	b45e2 <__aeabi_dmul+0x24a>
   b45ae:	ea94 0f0c 	teq	r4, ip
   b45b2:	d102      	bne.n	b45ba <__aeabi_dmul+0x222>
   b45b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b45b8:	d113      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45ba:	ea95 0f0c 	teq	r5, ip
   b45be:	d105      	bne.n	b45cc <__aeabi_dmul+0x234>
   b45c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b45c4:	bf1c      	itt	ne
   b45c6:	4610      	movne	r0, r2
   b45c8:	4619      	movne	r1, r3
   b45ca:	d10a      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45cc:	ea81 0103 	eor.w	r1, r1, r3
   b45d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b45d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b45dc:	f04f 0000 	mov.w	r0, #0
   b45e0:	bd70      	pop	{r4, r5, r6, pc}
   b45e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b45ea:	bd70      	pop	{r4, r5, r6, pc}

000b45ec <__aeabi_ddiv>:
   b45ec:	b570      	push	{r4, r5, r6, lr}
   b45ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b45f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b45f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b45fa:	bf1d      	ittte	ne
   b45fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b4600:	ea94 0f0c 	teqne	r4, ip
   b4604:	ea95 0f0c 	teqne	r5, ip
   b4608:	f000 f8a7 	bleq	b475a <__aeabi_ddiv+0x16e>
   b460c:	eba4 0405 	sub.w	r4, r4, r5
   b4610:	ea81 0e03 	eor.w	lr, r1, r3
   b4614:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4618:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b461c:	f000 8088 	beq.w	b4730 <__aeabi_ddiv+0x144>
   b4620:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b4624:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b4628:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b462c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b4630:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b4634:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b4638:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b463c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b4640:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b4644:	429d      	cmp	r5, r3
   b4646:	bf08      	it	eq
   b4648:	4296      	cmpeq	r6, r2
   b464a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b464e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b4652:	d202      	bcs.n	b465a <__aeabi_ddiv+0x6e>
   b4654:	085b      	lsrs	r3, r3, #1
   b4656:	ea4f 0232 	mov.w	r2, r2, rrx
   b465a:	1ab6      	subs	r6, r6, r2
   b465c:	eb65 0503 	sbc.w	r5, r5, r3
   b4660:	085b      	lsrs	r3, r3, #1
   b4662:	ea4f 0232 	mov.w	r2, r2, rrx
   b4666:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b466a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b466e:	ebb6 0e02 	subs.w	lr, r6, r2
   b4672:	eb75 0e03 	sbcs.w	lr, r5, r3
   b4676:	bf22      	ittt	cs
   b4678:	1ab6      	subcs	r6, r6, r2
   b467a:	4675      	movcs	r5, lr
   b467c:	ea40 000c 	orrcs.w	r0, r0, ip
   b4680:	085b      	lsrs	r3, r3, #1
   b4682:	ea4f 0232 	mov.w	r2, r2, rrx
   b4686:	ebb6 0e02 	subs.w	lr, r6, r2
   b468a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b468e:	bf22      	ittt	cs
   b4690:	1ab6      	subcs	r6, r6, r2
   b4692:	4675      	movcs	r5, lr
   b4694:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b4698:	085b      	lsrs	r3, r3, #1
   b469a:	ea4f 0232 	mov.w	r2, r2, rrx
   b469e:	ebb6 0e02 	subs.w	lr, r6, r2
   b46a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46a6:	bf22      	ittt	cs
   b46a8:	1ab6      	subcs	r6, r6, r2
   b46aa:	4675      	movcs	r5, lr
   b46ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b46b0:	085b      	lsrs	r3, r3, #1
   b46b2:	ea4f 0232 	mov.w	r2, r2, rrx
   b46b6:	ebb6 0e02 	subs.w	lr, r6, r2
   b46ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46be:	bf22      	ittt	cs
   b46c0:	1ab6      	subcs	r6, r6, r2
   b46c2:	4675      	movcs	r5, lr
   b46c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b46c8:	ea55 0e06 	orrs.w	lr, r5, r6
   b46cc:	d018      	beq.n	b4700 <__aeabi_ddiv+0x114>
   b46ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b46d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b46d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b46da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b46de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b46e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b46e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b46ea:	d1c0      	bne.n	b466e <__aeabi_ddiv+0x82>
   b46ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b46f0:	d10b      	bne.n	b470a <__aeabi_ddiv+0x11e>
   b46f2:	ea41 0100 	orr.w	r1, r1, r0
   b46f6:	f04f 0000 	mov.w	r0, #0
   b46fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b46fe:	e7b6      	b.n	b466e <__aeabi_ddiv+0x82>
   b4700:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4704:	bf04      	itt	eq
   b4706:	4301      	orreq	r1, r0
   b4708:	2000      	moveq	r0, #0
   b470a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b470e:	bf88      	it	hi
   b4710:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4714:	f63f aeaf 	bhi.w	b4476 <__aeabi_dmul+0xde>
   b4718:	ebb5 0c03 	subs.w	ip, r5, r3
   b471c:	bf04      	itt	eq
   b471e:	ebb6 0c02 	subseq.w	ip, r6, r2
   b4722:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4726:	f150 0000 	adcs.w	r0, r0, #0
   b472a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b472e:	bd70      	pop	{r4, r5, r6, pc}
   b4730:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b4734:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b4738:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b473c:	bfc2      	ittt	gt
   b473e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4742:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b4746:	bd70      	popgt	{r4, r5, r6, pc}
   b4748:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b474c:	f04f 0e00 	mov.w	lr, #0
   b4750:	3c01      	subs	r4, #1
   b4752:	e690      	b.n	b4476 <__aeabi_dmul+0xde>
   b4754:	ea45 0e06 	orr.w	lr, r5, r6
   b4758:	e68d      	b.n	b4476 <__aeabi_dmul+0xde>
   b475a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b475e:	ea94 0f0c 	teq	r4, ip
   b4762:	bf08      	it	eq
   b4764:	ea95 0f0c 	teqeq	r5, ip
   b4768:	f43f af3b 	beq.w	b45e2 <__aeabi_dmul+0x24a>
   b476c:	ea94 0f0c 	teq	r4, ip
   b4770:	d10a      	bne.n	b4788 <__aeabi_ddiv+0x19c>
   b4772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4776:	f47f af34 	bne.w	b45e2 <__aeabi_dmul+0x24a>
   b477a:	ea95 0f0c 	teq	r5, ip
   b477e:	f47f af25 	bne.w	b45cc <__aeabi_dmul+0x234>
   b4782:	4610      	mov	r0, r2
   b4784:	4619      	mov	r1, r3
   b4786:	e72c      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b4788:	ea95 0f0c 	teq	r5, ip
   b478c:	d106      	bne.n	b479c <__aeabi_ddiv+0x1b0>
   b478e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4792:	f43f aefd 	beq.w	b4590 <__aeabi_dmul+0x1f8>
   b4796:	4610      	mov	r0, r2
   b4798:	4619      	mov	r1, r3
   b479a:	e722      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b479c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b47a0:	bf18      	it	ne
   b47a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b47a6:	f47f aec5 	bne.w	b4534 <__aeabi_dmul+0x19c>
   b47aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b47ae:	f47f af0d 	bne.w	b45cc <__aeabi_dmul+0x234>
   b47b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b47b6:	f47f aeeb 	bne.w	b4590 <__aeabi_dmul+0x1f8>
   b47ba:	e712      	b.n	b45e2 <__aeabi_dmul+0x24a>

000b47bc <__gedf2>:
   b47bc:	f04f 3cff 	mov.w	ip, #4294967295
   b47c0:	e006      	b.n	b47d0 <__cmpdf2+0x4>
   b47c2:	bf00      	nop

000b47c4 <__ledf2>:
   b47c4:	f04f 0c01 	mov.w	ip, #1
   b47c8:	e002      	b.n	b47d0 <__cmpdf2+0x4>
   b47ca:	bf00      	nop

000b47cc <__cmpdf2>:
   b47cc:	f04f 0c01 	mov.w	ip, #1
   b47d0:	f84d cd04 	str.w	ip, [sp, #-4]!
   b47d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b47d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b47dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b47e0:	bf18      	it	ne
   b47e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b47e6:	d01b      	beq.n	b4820 <__cmpdf2+0x54>
   b47e8:	b001      	add	sp, #4
   b47ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b47ee:	bf0c      	ite	eq
   b47f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b47f4:	ea91 0f03 	teqne	r1, r3
   b47f8:	bf02      	ittt	eq
   b47fa:	ea90 0f02 	teqeq	r0, r2
   b47fe:	2000      	moveq	r0, #0
   b4800:	4770      	bxeq	lr
   b4802:	f110 0f00 	cmn.w	r0, #0
   b4806:	ea91 0f03 	teq	r1, r3
   b480a:	bf58      	it	pl
   b480c:	4299      	cmppl	r1, r3
   b480e:	bf08      	it	eq
   b4810:	4290      	cmpeq	r0, r2
   b4812:	bf2c      	ite	cs
   b4814:	17d8      	asrcs	r0, r3, #31
   b4816:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b481a:	f040 0001 	orr.w	r0, r0, #1
   b481e:	4770      	bx	lr
   b4820:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b4824:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4828:	d102      	bne.n	b4830 <__cmpdf2+0x64>
   b482a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b482e:	d107      	bne.n	b4840 <__cmpdf2+0x74>
   b4830:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b4834:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4838:	d1d6      	bne.n	b47e8 <__cmpdf2+0x1c>
   b483a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b483e:	d0d3      	beq.n	b47e8 <__cmpdf2+0x1c>
   b4840:	f85d 0b04 	ldr.w	r0, [sp], #4
   b4844:	4770      	bx	lr
   b4846:	bf00      	nop

000b4848 <__aeabi_cdrcmple>:
   b4848:	4684      	mov	ip, r0
   b484a:	4610      	mov	r0, r2
   b484c:	4662      	mov	r2, ip
   b484e:	468c      	mov	ip, r1
   b4850:	4619      	mov	r1, r3
   b4852:	4663      	mov	r3, ip
   b4854:	e000      	b.n	b4858 <__aeabi_cdcmpeq>
   b4856:	bf00      	nop

000b4858 <__aeabi_cdcmpeq>:
   b4858:	b501      	push	{r0, lr}
   b485a:	f7ff ffb7 	bl	b47cc <__cmpdf2>
   b485e:	2800      	cmp	r0, #0
   b4860:	bf48      	it	mi
   b4862:	f110 0f00 	cmnmi.w	r0, #0
   b4866:	bd01      	pop	{r0, pc}

000b4868 <__aeabi_dcmpeq>:
   b4868:	f84d ed08 	str.w	lr, [sp, #-8]!
   b486c:	f7ff fff4 	bl	b4858 <__aeabi_cdcmpeq>
   b4870:	bf0c      	ite	eq
   b4872:	2001      	moveq	r0, #1
   b4874:	2000      	movne	r0, #0
   b4876:	f85d fb08 	ldr.w	pc, [sp], #8
   b487a:	bf00      	nop

000b487c <__aeabi_dcmplt>:
   b487c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4880:	f7ff ffea 	bl	b4858 <__aeabi_cdcmpeq>
   b4884:	bf34      	ite	cc
   b4886:	2001      	movcc	r0, #1
   b4888:	2000      	movcs	r0, #0
   b488a:	f85d fb08 	ldr.w	pc, [sp], #8
   b488e:	bf00      	nop

000b4890 <__aeabi_dcmple>:
   b4890:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4894:	f7ff ffe0 	bl	b4858 <__aeabi_cdcmpeq>
   b4898:	bf94      	ite	ls
   b489a:	2001      	movls	r0, #1
   b489c:	2000      	movhi	r0, #0
   b489e:	f85d fb08 	ldr.w	pc, [sp], #8
   b48a2:	bf00      	nop

000b48a4 <__aeabi_dcmpge>:
   b48a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48a8:	f7ff ffce 	bl	b4848 <__aeabi_cdrcmple>
   b48ac:	bf94      	ite	ls
   b48ae:	2001      	movls	r0, #1
   b48b0:	2000      	movhi	r0, #0
   b48b2:	f85d fb08 	ldr.w	pc, [sp], #8
   b48b6:	bf00      	nop

000b48b8 <__aeabi_dcmpgt>:
   b48b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48bc:	f7ff ffc4 	bl	b4848 <__aeabi_cdrcmple>
   b48c0:	bf34      	ite	cc
   b48c2:	2001      	movcc	r0, #1
   b48c4:	2000      	movcs	r0, #0
   b48c6:	f85d fb08 	ldr.w	pc, [sp], #8
   b48ca:	bf00      	nop

000b48cc <__aeabi_dcmpun>:
   b48cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b48d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b48d4:	d102      	bne.n	b48dc <__aeabi_dcmpun+0x10>
   b48d6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b48da:	d10a      	bne.n	b48f2 <__aeabi_dcmpun+0x26>
   b48dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b48e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b48e4:	d102      	bne.n	b48ec <__aeabi_dcmpun+0x20>
   b48e6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b48ea:	d102      	bne.n	b48f2 <__aeabi_dcmpun+0x26>
   b48ec:	f04f 0000 	mov.w	r0, #0
   b48f0:	4770      	bx	lr
   b48f2:	f04f 0001 	mov.w	r0, #1
   b48f6:	4770      	bx	lr

000b48f8 <__aeabi_d2f>:
   b48f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b48fc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b4900:	bf24      	itt	cs
   b4902:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b4906:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b490a:	d90d      	bls.n	b4928 <__aeabi_d2f+0x30>
   b490c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b4910:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b4914:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b4918:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b491c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b4920:	bf08      	it	eq
   b4922:	f020 0001 	biceq.w	r0, r0, #1
   b4926:	4770      	bx	lr
   b4928:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b492c:	d121      	bne.n	b4972 <__aeabi_d2f+0x7a>
   b492e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b4932:	bfbc      	itt	lt
   b4934:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b4938:	4770      	bxlt	lr
   b493a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b493e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b4942:	f1c2 0218 	rsb	r2, r2, #24
   b4946:	f1c2 0c20 	rsb	ip, r2, #32
   b494a:	fa10 f30c 	lsls.w	r3, r0, ip
   b494e:	fa20 f002 	lsr.w	r0, r0, r2
   b4952:	bf18      	it	ne
   b4954:	f040 0001 	orrne.w	r0, r0, #1
   b4958:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b495c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b4960:	fa03 fc0c 	lsl.w	ip, r3, ip
   b4964:	ea40 000c 	orr.w	r0, r0, ip
   b4968:	fa23 f302 	lsr.w	r3, r3, r2
   b496c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b4970:	e7cc      	b.n	b490c <__aeabi_d2f+0x14>
   b4972:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b4976:	d107      	bne.n	b4988 <__aeabi_d2f+0x90>
   b4978:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b497c:	bf1e      	ittt	ne
   b497e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b4982:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b4986:	4770      	bxne	lr
   b4988:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b498c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b4990:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b4994:	4770      	bx	lr
   b4996:	bf00      	nop

000b4998 <strcmp>:
   b4998:	f810 2b01 	ldrb.w	r2, [r0], #1
   b499c:	f811 3b01 	ldrb.w	r3, [r1], #1
   b49a0:	2a01      	cmp	r2, #1
   b49a2:	bf28      	it	cs
   b49a4:	429a      	cmpcs	r2, r3
   b49a6:	d0f7      	beq.n	b4998 <strcmp>
   b49a8:	1ad0      	subs	r0, r2, r3
   b49aa:	4770      	bx	lr

000b49ac <strlen>:
   b49ac:	4603      	mov	r3, r0
   b49ae:	f813 2b01 	ldrb.w	r2, [r3], #1
   b49b2:	2a00      	cmp	r2, #0
   b49b4:	d1fb      	bne.n	b49ae <strlen+0x2>
   b49b6:	1a18      	subs	r0, r3, r0
   b49b8:	3801      	subs	r0, #1
   b49ba:	4770      	bx	lr

000b49bc <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b49bc:	4809      	ldr	r0, [pc, #36]	; (b49e4 <module_user_pre_init+0x28>)
   b49be:	490a      	ldr	r1, [pc, #40]	; (b49e8 <module_user_pre_init+0x2c>)
   b49c0:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b49c2:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b49c4:	d005      	beq.n	b49d2 <module_user_pre_init+0x16>
   b49c6:	4a09      	ldr	r2, [pc, #36]	; (b49ec <module_user_pre_init+0x30>)
   b49c8:	4282      	cmp	r2, r0
   b49ca:	d002      	beq.n	b49d2 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b49cc:	1a12      	subs	r2, r2, r0
   b49ce:	f004 f96b 	bl	b8ca8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b49d2:	4807      	ldr	r0, [pc, #28]	; (b49f0 <module_user_pre_init+0x34>)
   b49d4:	4a07      	ldr	r2, [pc, #28]	; (b49f4 <module_user_pre_init+0x38>)
   b49d6:	2100      	movs	r1, #0
   b49d8:	1a12      	subs	r2, r2, r0
   b49da:	f004 f973 	bl	b8cc4 <memset>
    return &link_global_data_start;
}
   b49de:	4801      	ldr	r0, [pc, #4]	; (b49e4 <module_user_pre_init+0x28>)
   b49e0:	bd08      	pop	{r3, pc}
   b49e2:	bf00      	nop
   b49e4:	2003e470 	.word	0x2003e470
   b49e8:	000b95ac 	.word	0x000b95ac
   b49ec:	2003e4e4 	.word	0x2003e4e4
   b49f0:	2003e4e4 	.word	0x2003e4e4
   b49f4:	2003e7f0 	.word	0x2003e7f0

000b49f8 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b49f8:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b49fa:	4e07      	ldr	r6, [pc, #28]	; (b4a18 <module_user_init+0x20>)
   b49fc:	4c07      	ldr	r4, [pc, #28]	; (b4a1c <module_user_init+0x24>)
    module_user_init_hook();
   b49fe:	f001 fd13 	bl	b6428 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4a02:	1ba4      	subs	r4, r4, r6
   b4a04:	08a4      	lsrs	r4, r4, #2
   b4a06:	2500      	movs	r5, #0
   b4a08:	42ac      	cmp	r4, r5
   b4a0a:	d100      	bne.n	b4a0e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4a0c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4a0e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4a12:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4a14:	3501      	adds	r5, #1
   b4a16:	e7f7      	b.n	b4a08 <module_user_init+0x10>
   b4a18:	000b9550 	.word	0x000b9550
   b4a1c:	000b9588 	.word	0x000b9588

000b4a20 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4a20:	f000 b82e 	b.w	b4a80 <setup>

000b4a24 <module_user_loop>:
}

void module_user_loop() {
   b4a24:	b508      	push	{r3, lr}
    loop();
   b4a26:	f000 f85d 	bl	b4ae4 <loop>
    _post_loop();
}
   b4a2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4a2e:	f001 bcb3 	b.w	b6398 <_post_loop>

000b4a32 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4a32:	f000 bf91 	b.w	b5958 <malloc>

000b4a36 <_Znaj>:
   b4a36:	f000 bf8f 	b.w	b5958 <malloc>

000b4a3a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4a3a:	f000 bf95 	b.w	b5968 <free>

000b4a3e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b4a3e:	7800      	ldrb	r0, [r0, #0]
   b4a40:	fab0 f080 	clz	r0, r0
   b4a44:	0940      	lsrs	r0, r0, #5
   b4a46:	4770      	bx	lr

000b4a48 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b4a48:	2301      	movs	r3, #1
   b4a4a:	7003      	strb	r3, [r0, #0]
   b4a4c:	4770      	bx	lr
	...

000b4a50 <_Z12update_wTime6String>:
  digitalWrite(RELAYPIN, LOW);
  delay(wTime);
  digitalWrite(RELAYPIN, HIGH);
}

int update_wTime(String extra){
   b4a50:	b508      	push	{r3, lr}
  wTime = atoi(extra);
   b4a52:	6800      	ldr	r0, [r0, #0]
   b4a54:	f004 f918 	bl	b8c88 <atoi>
   b4a58:	4b01      	ldr	r3, [pc, #4]	; (b4a60 <_Z12update_wTime6String+0x10>)
   b4a5a:	6018      	str	r0, [r3, #0]
  return 200;
   b4a5c:	20c8      	movs	r0, #200	; 0xc8
   b4a5e:	bd08      	pop	{r3, pc}
   b4a60:	2003e470 	.word	0x2003e470

000b4a64 <_ZN5spark10JSONWriter4nameEPKc>:
// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
}

inline spark::JSONWriter& spark::JSONWriter::name(const char *name) {
   b4a64:	b513      	push	{r0, r1, r4, lr}
   b4a66:	4604      	mov	r4, r0
    return this->name(name, strlen(name));
   b4a68:	4608      	mov	r0, r1
   b4a6a:	9101      	str	r1, [sp, #4]
   b4a6c:	f7ff ff9e 	bl	b49ac <strlen>
   b4a70:	9901      	ldr	r1, [sp, #4]
   b4a72:	4602      	mov	r2, r0
   b4a74:	4620      	mov	r0, r4
}
   b4a76:	b002      	add	sp, #8
   b4a78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return this->name(name, strlen(name));
   b4a7c:	f002 be40 	b.w	b7700 <_ZN5spark10JSONWriter4nameEPKcj>

000b4a80 <setup>:
void setup() {
   b4a80:	b513      	push	{r0, r1, r4, lr}
  dht_1.begin();
   b4a82:	4812      	ldr	r0, [pc, #72]	; (b4acc <setup+0x4c>)
   b4a84:	f000 fa6c 	bl	b4f60 <_ZN3DHT5beginEv>
  dht_2.begin();
   b4a88:	4811      	ldr	r0, [pc, #68]	; (b4ad0 <setup+0x50>)
   b4a8a:	f000 fa69 	bl	b4f60 <_ZN3DHT5beginEv>
    int publishVitals(system_tick_t period_s = particle::NOW);
    inline int publishVitals(std::chrono::seconds s) { return publishVitals(s.count()); }

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   b4a8e:	2400      	movs	r4, #0
  pinMode(HYGRO_D5, INPUT_PULLDOWN);
   b4a90:	2103      	movs	r1, #3
   b4a92:	2006      	movs	r0, #6
   b4a94:	f002 fe92 	bl	b77bc <pinMode>
   b4a98:	4622      	mov	r2, r4
   b4a9a:	2301      	movs	r3, #1
   b4a9c:	e9cd 4400 	strd	r4, r4, [sp]
   b4aa0:	490c      	ldr	r1, [pc, #48]	; (b4ad4 <setup+0x54>)
   b4aa2:	480d      	ldr	r0, [pc, #52]	; (b4ad8 <setup+0x58>)
   b4aa4:	f000 ff48 	bl	b5938 <spark_subscribe>
  pinMode(RELAYPIN, OUTPUT);
   b4aa8:	2101      	movs	r1, #1
   b4aaa:	2005      	movs	r0, #5
   b4aac:	f002 fe86 	bl	b77bc <pinMode>
  digitalWrite(RELAYPIN, HIGH);
   b4ab0:	2101      	movs	r1, #1
   b4ab2:	2005      	movs	r0, #5
   b4ab4:	f002 fe93 	bl	b77de <digitalWrite>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   b4ab8:	4908      	ldr	r1, [pc, #32]	; (b4adc <setup+0x5c>)
   b4aba:	4809      	ldr	r0, [pc, #36]	; (b4ae0 <setup+0x60>)
   b4abc:	4623      	mov	r3, r4
   b4abe:	2202      	movs	r2, #2
}
   b4ac0:	b002      	add	sp, #8
   b4ac2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b4ac6:	f000 bf0f 	b.w	b58e8 <spark_variable>
   b4aca:	bf00      	nop
   b4acc:	2003e4e8 	.word	0x2003e4e8
   b4ad0:	2003e4fc 	.word	0x2003e4fc
   b4ad4:	000b4b91 	.word	0x000b4b91
   b4ad8:	000b8f64 	.word	0x000b8f64
   b4adc:	2003e470 	.word	0x2003e470
   b4ae0:	000b8fd3 	.word	0x000b8fd3

000b4ae4 <loop>:
  delay(3000);
   b4ae4:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b4ae8:	f001 bc2a 	b.w	b6340 <delay>

000b4aec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b4aec:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b4aee:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b4af0:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b4af2:	b17c      	cbz	r4, b4b14 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b4af4:	6863      	ldr	r3, [r4, #4]
   b4af6:	3b01      	subs	r3, #1
   b4af8:	6063      	str	r3, [r4, #4]
   b4afa:	b95b      	cbnz	r3, b4b14 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b4afc:	6823      	ldr	r3, [r4, #0]
   b4afe:	4620      	mov	r0, r4
   b4b00:	689b      	ldr	r3, [r3, #8]
   b4b02:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4b04:	68a3      	ldr	r3, [r4, #8]
   b4b06:	3b01      	subs	r3, #1
   b4b08:	60a3      	str	r3, [r4, #8]
   b4b0a:	b91b      	cbnz	r3, b4b14 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b4b0c:	6823      	ldr	r3, [r4, #0]
   b4b0e:	4620      	mov	r0, r4
   b4b10:	68db      	ldr	r3, [r3, #12]
   b4b12:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b4b14:	4628      	mov	r0, r5
   b4b16:	bd38      	pop	{r3, r4, r5, pc}

000b4b18 <_Z14start_wateringv>:
void start_watering(){
   b4b18:	b500      	push	{lr}
   b4b1a:	b08b      	sub	sp, #44	; 0x2c
    inline static SleepResult sleep(const hal_pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count());
    }

    static String deviceID(void) {
        return spark_deviceID();
   b4b1c:	a806      	add	r0, sp, #24
   b4b1e:	f000 fefb 	bl	b5918 <spark_deviceID>
  int deviceId = Particle.deviceID().toInt();
   b4b22:	a806      	add	r0, sp, #24
   b4b24:	f001 fb90 	bl	b6248 <_ZNK6String5toIntEv>
   b4b28:	9003      	str	r0, [sp, #12]
   b4b2a:	a806      	add	r0, sp, #24
   b4b2c:	f001 faee 	bl	b610c <_ZN6StringD1Ev>
  Particle.publish("Device", String(deviceId));
   b4b30:	9903      	ldr	r1, [sp, #12]
   b4b32:	220a      	movs	r2, #10
   b4b34:	a806      	add	r0, sp, #24
   b4b36:	f001 fb74 	bl	b6222 <_ZN6StringC1Eih>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b4b3a:	4b0f      	ldr	r3, [pc, #60]	; (b4b78 <_Z14start_wateringv+0x60>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4b3c:	9a06      	ldr	r2, [sp, #24]
   b4b3e:	781b      	ldrb	r3, [r3, #0]
   b4b40:	490e      	ldr	r1, [pc, #56]	; (b4b7c <_Z14start_wateringv+0x64>)
   b4b42:	f88d 3000 	strb.w	r3, [sp]
   b4b46:	a804      	add	r0, sp, #16
   b4b48:	233c      	movs	r3, #60	; 0x3c
   b4b4a:	f001 fdf1 	bl	b6730 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b4b4e:	a805      	add	r0, sp, #20
   b4b50:	f7ff ffcc 	bl	b4aec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4b54:	a806      	add	r0, sp, #24
   b4b56:	f001 fad9 	bl	b610c <_ZN6StringD1Ev>
  digitalWrite(RELAYPIN, LOW);
   b4b5a:	2100      	movs	r1, #0
   b4b5c:	2005      	movs	r0, #5
   b4b5e:	f002 fe3e 	bl	b77de <digitalWrite>
  delay(wTime);
   b4b62:	4b07      	ldr	r3, [pc, #28]	; (b4b80 <_Z14start_wateringv+0x68>)
   b4b64:	6818      	ldr	r0, [r3, #0]
   b4b66:	f001 fbeb 	bl	b6340 <delay>
  digitalWrite(RELAYPIN, HIGH);
   b4b6a:	2101      	movs	r1, #1
   b4b6c:	2005      	movs	r0, #5
}
   b4b6e:	b00b      	add	sp, #44	; 0x2c
   b4b70:	f85d eb04 	ldr.w	lr, [sp], #4
  digitalWrite(RELAYPIN, HIGH);
   b4b74:	f002 be33 	b.w	b77de <digitalWrite>
   b4b78:	2003e4e4 	.word	0x2003e4e4
   b4b7c:	000b8f70 	.word	0x000b8f70
   b4b80:	2003e470 	.word	0x2003e470

000b4b84 <_Z5alive6String>:
int alive(String extra) {
   b4b84:	b508      	push	{r3, lr}
  start_watering();
   b4b86:	f7ff ffc7 	bl	b4b18 <_Z14start_wateringv>
}
   b4b8a:	20c8      	movs	r0, #200	; 0xc8
   b4b8c:	bd08      	pop	{r3, pc}
	...

000b4b90 <_Z11upload_dataPKcS0_>:
void upload_data(const char *event, const char *data) {
   b4b90:	b570      	push	{r4, r5, r6, lr}
   b4b92:	f5ad 7d2a 	sub.w	sp, sp, #680	; 0x2a8
  memset(buf, 0, sizeof(buf));
   b4b96:	ad0e      	add	r5, sp, #56	; 0x38
   b4b98:	f240 226e 	movw	r2, #622	; 0x26e
   b4b9c:	2100      	movs	r1, #0
   b4b9e:	4628      	mov	r0, r5
   b4ba0:	f004 f890 	bl	b8cc4 <memset>

// spark::JSONBufferWriter
inline spark::JSONBufferWriter::JSONBufferWriter(char *buf, size_t size) :
        buf_(buf),
        bufSize_(size),
        n_(0) {
   b4ba4:	4b7d      	ldr	r3, [pc, #500]	; (b4d9c <_Z11upload_dataPKcS0_+0x20c>)
   b4ba6:	9309      	str	r3, [sp, #36]	; 0x24
        state_(BEGIN) {
   b4ba8:	2400      	movs	r4, #0
        n_(0) {
   b4baa:	f240 236d 	movw	r3, #621	; 0x26d
  writer.beginObject();
   b4bae:	a809      	add	r0, sp, #36	; 0x24
   b4bb0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
        state_(BEGIN) {
   b4bb4:	f88d 4028 	strb.w	r4, [sp, #40]	; 0x28
        n_(0) {
   b4bb8:	950b      	str	r5, [sp, #44]	; 0x2c
   b4bba:	f002 fd10 	bl	b75de <_ZN5spark10JSONWriter11beginObjectEv>
    writer.name("device").value(DEVICE);
   b4bbe:	4978      	ldr	r1, [pc, #480]	; (b4da0 <_Z11upload_dataPKcS0_+0x210>)
        float aux = dht_1.getTempCelcius();
   b4bc0:	4e78      	ldr	r6, [pc, #480]	; (b4da4 <_Z11upload_dataPKcS0_+0x214>)
    writer.name("device").value(DEVICE);
   b4bc2:	a809      	add	r0, sp, #36	; 0x24
   b4bc4:	f7ff ff4e 	bl	b4a64 <_ZN5spark10JSONWriter4nameEPKc>
    return value(val, strlen(val));
   b4bc8:	2207      	movs	r2, #7
   b4bca:	4977      	ldr	r1, [pc, #476]	; (b4da8 <_Z11upload_dataPKcS0_+0x218>)
   b4bcc:	f002 fda8 	bl	b7720 <_ZN5spark10JSONWriter5valueEPKcj>
    writer.name("temp_01").beginArray();  
   b4bd0:	4976      	ldr	r1, [pc, #472]	; (b4dac <_Z11upload_dataPKcS0_+0x21c>)
   b4bd2:	a809      	add	r0, sp, #36	; 0x24
   b4bd4:	f7ff ff46 	bl	b4a64 <_ZN5spark10JSONWriter4nameEPKc>
   b4bd8:	f002 fcf5 	bl	b75c6 <_ZN5spark10JSONWriter10beginArrayEv>
        float aux = dht_1.getTempCelcius();
   b4bdc:	4630      	mov	r0, r6
   b4bde:	f000 fbad 	bl	b533c <_ZN3DHT14getTempCelciusEv>
        if(!isnan(aux)){
   b4be2:	eeb4 0a40 	vcmp.f32	s0, s0
   b4be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4bea:	f180 80b9 	bvs.w	b4d60 <_Z11upload_dataPKcS0_+0x1d0>
          writer.value(aux);
   b4bee:	ee10 0a10 	vmov	r0, s0
   b4bf2:	f7ff fb79 	bl	b42e8 <__aeabi_f2d>
   b4bf6:	ec41 0b10 	vmov	d0, r0, r1
   b4bfa:	a809      	add	r0, sp, #36	; 0x24
   b4bfc:	f002 fd0e 	bl	b761c <_ZN5spark10JSONWriter5valueEd>
      for(int i=0; i<10; i++){
   b4c00:	3401      	adds	r4, #1
   b4c02:	2c0a      	cmp	r4, #10
   b4c04:	d1ea      	bne.n	b4bdc <_Z11upload_dataPKcS0_+0x4c>
    writer.endArray();
   b4c06:	a809      	add	r0, sp, #36	; 0x24
   b4c08:	f002 fcbe 	bl	b7588 <_ZN5spark10JSONWriter8endArrayEv>
    writer.name("temp_02").beginArray();
   b4c0c:	4968      	ldr	r1, [pc, #416]	; (b4db0 <_Z11upload_dataPKcS0_+0x220>)
        float aux = dht_2.getTempCelcius();
   b4c0e:	4e69      	ldr	r6, [pc, #420]	; (b4db4 <_Z11upload_dataPKcS0_+0x224>)
    writer.name("temp_02").beginArray();
   b4c10:	a809      	add	r0, sp, #36	; 0x24
   b4c12:	f7ff ff27 	bl	b4a64 <_ZN5spark10JSONWriter4nameEPKc>
   b4c16:	f002 fcd6 	bl	b75c6 <_ZN5spark10JSONWriter10beginArrayEv>
      for(int i=0; i<10; i++){
   b4c1a:	2400      	movs	r4, #0
        float aux = dht_2.getTempCelcius();
   b4c1c:	4630      	mov	r0, r6
   b4c1e:	f000 fb8d 	bl	b533c <_ZN3DHT14getTempCelciusEv>
        if(!isnan(aux)){
   b4c22:	eeb4 0a40 	vcmp.f32	s0, s0
   b4c26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4c2a:	f180 809f 	bvs.w	b4d6c <_Z11upload_dataPKcS0_+0x1dc>
          writer.value(aux);
   b4c2e:	ee10 0a10 	vmov	r0, s0
   b4c32:	f7ff fb59 	bl	b42e8 <__aeabi_f2d>
   b4c36:	ec41 0b10 	vmov	d0, r0, r1
   b4c3a:	a809      	add	r0, sp, #36	; 0x24
   b4c3c:	f002 fcee 	bl	b761c <_ZN5spark10JSONWriter5valueEd>
      for(int i=0; i<10; i++){
   b4c40:	3401      	adds	r4, #1
   b4c42:	2c0a      	cmp	r4, #10
   b4c44:	d1ea      	bne.n	b4c1c <_Z11upload_dataPKcS0_+0x8c>
    writer.endArray();
   b4c46:	a809      	add	r0, sp, #36	; 0x24
   b4c48:	f002 fc9e 	bl	b7588 <_ZN5spark10JSONWriter8endArrayEv>
    writer.name("hum_01").beginArray();     
   b4c4c:	495a      	ldr	r1, [pc, #360]	; (b4db8 <_Z11upload_dataPKcS0_+0x228>)
        float aux = dht_1.getHumidity();
   b4c4e:	4e55      	ldr	r6, [pc, #340]	; (b4da4 <_Z11upload_dataPKcS0_+0x214>)
    writer.name("hum_01").beginArray();     
   b4c50:	a809      	add	r0, sp, #36	; 0x24
   b4c52:	f7ff ff07 	bl	b4a64 <_ZN5spark10JSONWriter4nameEPKc>
   b4c56:	f002 fcb6 	bl	b75c6 <_ZN5spark10JSONWriter10beginArrayEv>
      for(int i=0; i<10; i++){
   b4c5a:	2400      	movs	r4, #0
        float aux = dht_1.getHumidity();
   b4c5c:	4630      	mov	r0, r6
   b4c5e:	f000 fb9b 	bl	b5398 <_ZN3DHT11getHumidityEv>
        if(!isnan(aux)){
   b4c62:	eeb4 0a40 	vcmp.f32	s0, s0
   b4c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4c6a:	f180 8085 	bvs.w	b4d78 <_Z11upload_dataPKcS0_+0x1e8>
          writer.value(aux);
   b4c6e:	ee10 0a10 	vmov	r0, s0
   b4c72:	f7ff fb39 	bl	b42e8 <__aeabi_f2d>
   b4c76:	ec41 0b10 	vmov	d0, r0, r1
   b4c7a:	a809      	add	r0, sp, #36	; 0x24
   b4c7c:	f002 fcce 	bl	b761c <_ZN5spark10JSONWriter5valueEd>
      for(int i=0; i<10; i++){
   b4c80:	3401      	adds	r4, #1
   b4c82:	2c0a      	cmp	r4, #10
   b4c84:	d1ea      	bne.n	b4c5c <_Z11upload_dataPKcS0_+0xcc>
    writer.endArray();
   b4c86:	a809      	add	r0, sp, #36	; 0x24
   b4c88:	f002 fc7e 	bl	b7588 <_ZN5spark10JSONWriter8endArrayEv>
    writer.name("hum_02").beginArray();
   b4c8c:	494b      	ldr	r1, [pc, #300]	; (b4dbc <_Z11upload_dataPKcS0_+0x22c>)
        float aux = dht_2.getHumidity();
   b4c8e:	4e49      	ldr	r6, [pc, #292]	; (b4db4 <_Z11upload_dataPKcS0_+0x224>)
    writer.name("hum_02").beginArray();
   b4c90:	a809      	add	r0, sp, #36	; 0x24
   b4c92:	f7ff fee7 	bl	b4a64 <_ZN5spark10JSONWriter4nameEPKc>
   b4c96:	f002 fc96 	bl	b75c6 <_ZN5spark10JSONWriter10beginArrayEv>
      for(int i=0; i<10; i++){
   b4c9a:	2400      	movs	r4, #0
        float aux = dht_2.getHumidity();
   b4c9c:	4630      	mov	r0, r6
   b4c9e:	f000 fb7b 	bl	b5398 <_ZN3DHT11getHumidityEv>
        if(!isnan(aux)){
   b4ca2:	eeb4 0a40 	vcmp.f32	s0, s0
   b4ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4caa:	d66b      	bvs.n	b4d84 <_Z11upload_dataPKcS0_+0x1f4>
          writer.value(aux);
   b4cac:	ee10 0a10 	vmov	r0, s0
   b4cb0:	f7ff fb1a 	bl	b42e8 <__aeabi_f2d>
   b4cb4:	ec41 0b10 	vmov	d0, r0, r1
   b4cb8:	a809      	add	r0, sp, #36	; 0x24
   b4cba:	f002 fcaf 	bl	b761c <_ZN5spark10JSONWriter5valueEd>
      for(int i=0; i<10; i++){
   b4cbe:	3401      	adds	r4, #1
   b4cc0:	2c0a      	cmp	r4, #10
   b4cc2:	d1eb      	bne.n	b4c9c <_Z11upload_dataPKcS0_+0x10c>
    writer.endArray();
   b4cc4:	a809      	add	r0, sp, #36	; 0x24
   b4cc6:	f002 fc5f 	bl	b7588 <_ZN5spark10JSONWriter8endArrayEv>
    writer.name("hygro_01").beginArray();
   b4cca:	493d      	ldr	r1, [pc, #244]	; (b4dc0 <_Z11upload_dataPKcS0_+0x230>)
   b4ccc:	a809      	add	r0, sp, #36	; 0x24
   b4cce:	f7ff fec9 	bl	b4a64 <_ZN5spark10JSONWriter4nameEPKc>
   b4cd2:	f002 fc78 	bl	b75c6 <_ZN5spark10JSONWriter10beginArrayEv>
        int aux = analogRead(HYGRO_A1);
   b4cd6:	200f      	movs	r0, #15
   b4cd8:	f002 fd9a 	bl	b7810 <analogRead>
   b4cdc:	4601      	mov	r1, r0
          writer.value(aux);
   b4cde:	a809      	add	r0, sp, #36	; 0x24
   b4ce0:	f002 fc8a 	bl	b75f8 <_ZN5spark10JSONWriter5valueEi>
      for(int i=0; i<10; i++){
   b4ce4:	3c01      	subs	r4, #1
   b4ce6:	d1f6      	bne.n	b4cd6 <_Z11upload_dataPKcS0_+0x146>
    writer.endArray();
   b4ce8:	a809      	add	r0, sp, #36	; 0x24
   b4cea:	f002 fc4d 	bl	b7588 <_ZN5spark10JSONWriter8endArrayEv>
    writer.name("lux_01").beginArray();
   b4cee:	4935      	ldr	r1, [pc, #212]	; (b4dc4 <_Z11upload_dataPKcS0_+0x234>)
        float aux = lux_1.getLux(true);
   b4cf0:	4e35      	ldr	r6, [pc, #212]	; (b4dc8 <_Z11upload_dataPKcS0_+0x238>)
    writer.name("lux_01").beginArray();
   b4cf2:	a809      	add	r0, sp, #36	; 0x24
   b4cf4:	f7ff feb6 	bl	b4a64 <_ZN5spark10JSONWriter4nameEPKc>
   b4cf8:	f002 fc65 	bl	b75c6 <_ZN5spark10JSONWriter10beginArrayEv>
        float aux = lux_1.getLux(true);
   b4cfc:	2101      	movs	r1, #1
   b4cfe:	4630      	mov	r0, r6
   b4d00:	f000 f8ca 	bl	b4e98 <_ZN10GA1A12S2026getLuxEb>
        if(!isnan(aux)){
   b4d04:	eeb4 0a40 	vcmp.f32	s0, s0
   b4d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4d0c:	d640      	bvs.n	b4d90 <_Z11upload_dataPKcS0_+0x200>
          writer.value(aux);
   b4d0e:	ee10 0a10 	vmov	r0, s0
   b4d12:	f7ff fae9 	bl	b42e8 <__aeabi_f2d>
   b4d16:	ec41 0b10 	vmov	d0, r0, r1
   b4d1a:	a809      	add	r0, sp, #36	; 0x24
   b4d1c:	f002 fc7e 	bl	b761c <_ZN5spark10JSONWriter5valueEd>
      for(int i=0; i<10; i++){
   b4d20:	3401      	adds	r4, #1
   b4d22:	2c0a      	cmp	r4, #10
   b4d24:	d1ea      	bne.n	b4cfc <_Z11upload_dataPKcS0_+0x16c>
    writer.endArray();
   b4d26:	a809      	add	r0, sp, #36	; 0x24
   b4d28:	f002 fc2e 	bl	b7588 <_ZN5spark10JSONWriter8endArrayEv>
  writer.endObject();
   b4d2c:	a809      	add	r0, sp, #36	; 0x24
   b4d2e:	f002 fc34 	bl	b759a <_ZN5spark10JSONWriter9endObjectEv>
  Particle.publish("irrigation-system", String(buf));
   b4d32:	4629      	mov	r1, r5
   b4d34:	a805      	add	r0, sp, #20
   b4d36:	f001 fa34 	bl	b61a2 <_ZN6StringC1EPK19__FlashStringHelper>
   b4d3a:	4b24      	ldr	r3, [pc, #144]	; (b4dcc <_Z11upload_dataPKcS0_+0x23c>)
   b4d3c:	9a05      	ldr	r2, [sp, #20]
   b4d3e:	781b      	ldrb	r3, [r3, #0]
   b4d40:	4923      	ldr	r1, [pc, #140]	; (b4dd0 <_Z11upload_dataPKcS0_+0x240>)
   b4d42:	f88d 3000 	strb.w	r3, [sp]
   b4d46:	a803      	add	r0, sp, #12
   b4d48:	233c      	movs	r3, #60	; 0x3c
   b4d4a:	f001 fcf1 	bl	b6730 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b4d4e:	a804      	add	r0, sp, #16
   b4d50:	f7ff fecc 	bl	b4aec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4d54:	a805      	add	r0, sp, #20
   b4d56:	f001 f9d9 	bl	b610c <_ZN6StringD1Ev>
}
   b4d5a:	f50d 7d2a 	add.w	sp, sp, #680	; 0x2a8
   b4d5e:	bd70      	pop	{r4, r5, r6, pc}
          delay(1000);
   b4d60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
          i--;
   b4d64:	3c01      	subs	r4, #1
          delay(1000);
   b4d66:	f001 faeb 	bl	b6340 <delay>
   b4d6a:	e749      	b.n	b4c00 <_Z11upload_dataPKcS0_+0x70>
          delay(1000);
   b4d6c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
          i--;
   b4d70:	3c01      	subs	r4, #1
          delay(1000);
   b4d72:	f001 fae5 	bl	b6340 <delay>
   b4d76:	e763      	b.n	b4c40 <_Z11upload_dataPKcS0_+0xb0>
          delay(1000);
   b4d78:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
          i--;
   b4d7c:	3c01      	subs	r4, #1
          delay(1000);
   b4d7e:	f001 fadf 	bl	b6340 <delay>
   b4d82:	e77d      	b.n	b4c80 <_Z11upload_dataPKcS0_+0xf0>
          delay(1000);
   b4d84:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
          i--;
   b4d88:	3c01      	subs	r4, #1
          delay(1000);
   b4d8a:	f001 fad9 	bl	b6340 <delay>
   b4d8e:	e796      	b.n	b4cbe <_Z11upload_dataPKcS0_+0x12e>
          delay(1000);
   b4d90:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
          i--;
   b4d94:	3c01      	subs	r4, #1
          delay(1000);
   b4d96:	f001 fad3 	bl	b6340 <delay>
   b4d9a:	e7c1      	b.n	b4d20 <_Z11upload_dataPKcS0_+0x190>
   b4d9c:	000b9298 	.word	0x000b9298
   b4da0:	000b8f77 	.word	0x000b8f77
   b4da4:	2003e4e8 	.word	0x2003e4e8
   b4da8:	000b8f7e 	.word	0x000b8f7e
   b4dac:	000b8f86 	.word	0x000b8f86
   b4db0:	000b8f8e 	.word	0x000b8f8e
   b4db4:	2003e4fc 	.word	0x2003e4fc
   b4db8:	000b8f96 	.word	0x000b8f96
   b4dbc:	000b8f9d 	.word	0x000b8f9d
   b4dc0:	000b8fa4 	.word	0x000b8fa4
   b4dc4:	000b8fad 	.word	0x000b8fad
   b4dc8:	2003e510 	.word	0x2003e510
   b4dcc:	2003e4e4 	.word	0x2003e4e4
   b4dd0:	000b8fb4 	.word	0x000b8fb4

000b4dd4 <_GLOBAL__sub_I_dht_1>:
        val_(val) {
   b4dd4:	4b11      	ldr	r3, [pc, #68]	; (b4e1c <_GLOBAL__sub_I_dht_1+0x48>)
DHT dht_1(DHT_8PIN, DHT_TYPE22);
   b4dd6:	4812      	ldr	r0, [pc, #72]	; (b4e20 <_GLOBAL__sub_I_dht_1+0x4c>)
   b4dd8:	2200      	movs	r2, #0
   b4dda:	b510      	push	{r4, lr}
DHT dht_1(DHT_8PIN, DHT_TYPE22);
   b4ddc:	2108      	movs	r1, #8
   b4dde:	701a      	strb	r2, [r3, #0]
   b4de0:	2306      	movs	r3, #6
   b4de2:	2216      	movs	r2, #22
   b4de4:	f000 f8b5 	bl	b4f52 <_ZN3DHTC1Ehhh>
        return register_function(call_raw_user_function, (void*)func, funcKey);
   b4de8:	4c0e      	ldr	r4, [pc, #56]	; (b4e24 <_GLOBAL__sub_I_dht_1+0x50>)
DHT dht_2(DHT_7PIN, DHT_TYPE11);
   b4dea:	480f      	ldr	r0, [pc, #60]	; (b4e28 <_GLOBAL__sub_I_dht_1+0x54>)
   b4dec:	2306      	movs	r3, #6
   b4dee:	220b      	movs	r2, #11
   b4df0:	2107      	movs	r1, #7
   b4df2:	f000 f8ae 	bl	b4f52 <_ZN3DHTC1Ehhh>
GA1A12S202 lux_1(GAA5);
   b4df6:	210e      	movs	r1, #14
   b4df8:	480c      	ldr	r0, [pc, #48]	; (b4e2c <_GLOBAL__sub_I_dht_1+0x58>)
   b4dfa:	f000 f825 	bl	b4e48 <_ZN10GA1A12S202C1Ei>
   b4dfe:	4a0c      	ldr	r2, [pc, #48]	; (b4e30 <_GLOBAL__sub_I_dht_1+0x5c>)
   b4e00:	490c      	ldr	r1, [pc, #48]	; (b4e34 <_GLOBAL__sub_I_dht_1+0x60>)
   b4e02:	4620      	mov	r0, r4
   b4e04:	f001 fb9d 	bl	b6542 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
bool success_alive = Particle.function("alive", alive);
   b4e08:	4b0b      	ldr	r3, [pc, #44]	; (b4e38 <_GLOBAL__sub_I_dht_1+0x64>)
   b4e0a:	4a0c      	ldr	r2, [pc, #48]	; (b4e3c <_GLOBAL__sub_I_dht_1+0x68>)
   b4e0c:	7018      	strb	r0, [r3, #0]
   b4e0e:	490c      	ldr	r1, [pc, #48]	; (b4e40 <_GLOBAL__sub_I_dht_1+0x6c>)
   b4e10:	4620      	mov	r0, r4
   b4e12:	f001 fb96 	bl	b6542 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
bool success_update_wTime = Particle.function("update_wTime", update_wTime);
   b4e16:	4b0b      	ldr	r3, [pc, #44]	; (b4e44 <_GLOBAL__sub_I_dht_1+0x70>)
   b4e18:	7018      	strb	r0, [r3, #0]
   b4e1a:	bd10      	pop	{r4, pc}
   b4e1c:	2003e4e4 	.word	0x2003e4e4
   b4e20:	2003e4e8 	.word	0x2003e4e8
   b4e24:	000b6517 	.word	0x000b6517
   b4e28:	2003e4fc 	.word	0x2003e4fc
   b4e2c:	2003e510 	.word	0x2003e510
   b4e30:	000b8fc6 	.word	0x000b8fc6
   b4e34:	000b4b85 	.word	0x000b4b85
   b4e38:	2003e51c 	.word	0x2003e51c
   b4e3c:	000b8fcc 	.word	0x000b8fcc
   b4e40:	000b4a51 	.word	0x000b4a51
   b4e44:	2003e51d 	.word	0x2003e51d

000b4e48 <_ZN10GA1A12S202C1Ei>:
#include "GA1A12S202.h"

GA1A12S202::GA1A12S202(int pin) {
   b4e48:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
   b4e4c:	6042      	str	r2, [r0, #4]
   b4e4e:	4a02      	ldr	r2, [pc, #8]	; (b4e58 <_ZN10GA1A12S202C1Ei+0x10>)
   b4e50:	6082      	str	r2, [r0, #8]
    _pin = pin;
   b4e52:	6001      	str	r1, [r0, #0]
}
   b4e54:	4770      	bx	lr
   b4e56:	bf00      	nop
   b4e58:	40a00000 	.word	0x40a00000

000b4e5c <_ZN10GA1A12S2026getRawEb>:
int GA1A12S202::getRaw() {
    return getRaw(false);
}


int GA1A12S202::getRaw(bool smooth=false) {
   b4e5c:	b570      	push	{r4, r5, r6, lr}
   b4e5e:	4605      	mov	r5, r0
   b4e60:	460c      	mov	r4, r1
    delay(1);
   b4e62:	2001      	movs	r0, #1
   b4e64:	f001 fa6c 	bl	b6340 <delay>
    
    if(smooth==true) {
   b4e68:	b174      	cbz	r4, b4e88 <_ZN10GA1A12S2026getRawEb+0x2c>
   b4e6a:	2664      	movs	r6, #100	; 0x64
        int total = 0;
   b4e6c:	2400      	movs	r4, #0
        
        for(int i=0; i<100; i++) {
            total += analogRead(_pin);
   b4e6e:	8828      	ldrh	r0, [r5, #0]
   b4e70:	f002 fcce 	bl	b7810 <analogRead>
   b4e74:	4404      	add	r4, r0
            delay(1);
   b4e76:	2001      	movs	r0, #1
   b4e78:	f001 fa62 	bl	b6340 <delay>
        for(int i=0; i<100; i++) {
   b4e7c:	3e01      	subs	r6, #1
   b4e7e:	d1f6      	bne.n	b4e6e <_ZN10GA1A12S2026getRawEb+0x12>
        }
        
        return(total/100);
   b4e80:	2064      	movs	r0, #100	; 0x64
   b4e82:	fb94 f0f0 	sdiv	r0, r4, r0
    } else
        return analogRead(_pin);
}
   b4e86:	bd70      	pop	{r4, r5, r6, pc}
        return analogRead(_pin);
   b4e88:	8828      	ldrh	r0, [r5, #0]
}
   b4e8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return analogRead(_pin);
   b4e8e:	f002 bcbf 	b.w	b7810 <analogRead>
   b4e92:	0000      	movs	r0, r0
   b4e94:	0000      	movs	r0, r0
	...

000b4e98 <_ZN10GA1A12S2026getLuxEb>:
float GA1A12S202::getLux() {
    return getLux(false);
}


float GA1A12S202::getLux(bool smooth=false) {
   b4e98:	b510      	push	{r4, lr}
   b4e9a:	4604      	mov	r4, r0
    int raw = getRaw(smooth);
   b4e9c:	f7ff ffde 	bl	b4e5c <_ZN10GA1A12S2026getRawEb>
    float logLux = raw * _logRange / _rawRange;
   b4ea0:	ee07 0a90 	vmov	s15, r0
   b4ea4:	ed94 7a02 	vldr	s14, [r4, #8]
   b4ea8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b4eac:	ee67 7a87 	vmul.f32	s15, s15, s14
   b4eb0:	ed94 7a01 	vldr	s14, [r4, #4]
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   b4eb4:	eec7 7a87 	vdiv.f32	s15, s15, s14
   b4eb8:	ee17 0a90 	vmov	r0, s15
   b4ebc:	f7ff fa14 	bl	b42e8 <__aeabi_f2d>
   b4ec0:	ed9f 0b07 	vldr	d0, [pc, #28]	; b4ee0 <_ZN10GA1A12S2026getLuxEb+0x48>
   b4ec4:	ec41 0b11 	vmov	d1, r0, r1
   b4ec8:	f002 fe52 	bl	b7b70 <pow>
   b4ecc:	ec51 0b10 	vmov	r0, r1, d0
    
    return pow(10, logLux);
   b4ed0:	f7ff fd12 	bl	b48f8 <__aeabi_d2f>
}
   b4ed4:	ee00 0a10 	vmov	s0, r0
   b4ed8:	bd10      	pop	{r4, pc}
   b4eda:	bf00      	nop
   b4edc:	f3af 8000 	nop.w
   b4ee0:	00000000 	.word	0x00000000
   b4ee4:	40240000 	.word	0x40240000

000b4ee8 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   b4ee8:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   b4eea:	6803      	ldr	r3, [r0, #0]
   b4eec:	2b2f      	cmp	r3, #47	; 0x2f
{
   b4eee:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   b4ef0:	d904      	bls.n	b4efc <nrf_gpio_pin_port_decode+0x14>
   b4ef2:	4a07      	ldr	r2, [pc, #28]	; (b4f10 <nrf_gpio_pin_port_decode+0x28>)
   b4ef4:	4907      	ldr	r1, [pc, #28]	; (b4f14 <nrf_gpio_pin_port_decode+0x2c>)
   b4ef6:	200a      	movs	r0, #10
   b4ef8:	f000 fc52 	bl	b57a0 <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   b4efc:	6823      	ldr	r3, [r4, #0]
   b4efe:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   b4f00:	bf83      	ittte	hi
   b4f02:	f003 031f 	andhi.w	r3, r3, #31
        return NRF_P1;
   b4f06:	4804      	ldrhi	r0, [pc, #16]	; (b4f18 <nrf_gpio_pin_port_decode+0x30>)
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   b4f08:	6023      	strhi	r3, [r4, #0]
        return NRF_P0;
   b4f0a:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    }
#endif
}
   b4f0e:	bd10      	pop	{r4, pc}
   b4f10:	000b5531 	.word	0x000b5531
   b4f14:	000b8fd9 	.word	0x000b8fd9
   b4f18:	50000300 	.word	0x50000300

000b4f1c <nrf_gpio_pin_set>:
    }
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
   b4f1c:	b507      	push	{r0, r1, r2, lr}
   b4f1e:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   b4f20:	a801      	add	r0, sp, #4
   b4f22:	f7ff ffe1 	bl	b4ee8 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   b4f26:	9a01      	ldr	r2, [sp, #4]
   b4f28:	2301      	movs	r3, #1
   b4f2a:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   b4f2c:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
   b4f30:	b003      	add	sp, #12
   b4f32:	f85d fb04 	ldr.w	pc, [sp], #4

000b4f36 <nrf_gpio_pin_read>:
{
   b4f36:	b507      	push	{r0, r1, r2, lr}
   b4f38:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   b4f3a:	a801      	add	r0, sp, #4
   b4f3c:	f7ff ffd4 	bl	b4ee8 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   b4f40:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   b4f42:	f8d0 0510 	ldr.w	r0, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   b4f46:	40d8      	lsrs	r0, r3
}
   b4f48:	f000 0001 	and.w	r0, r0, #1
   b4f4c:	b003      	add	sp, #12
   b4f4e:	f85d fb04 	ldr.w	pc, [sp], #4

000b4f52 <_ZN3DHTC1Ehhh>:
 * modified for Spark Core by RussGrue
 * */

#include "Adafruit_DHT.h"

DHT::DHT(uint8_t pin, uint8_t type, uint8_t count) {
   b4f52:	b510      	push	{r4, lr}
	_pin = pin;
	_type = type;
	_count = count;
   b4f54:	7203      	strb	r3, [r0, #8]
	firstreading = true;
   b4f56:	2301      	movs	r3, #1
	_pin = pin;
   b4f58:	7181      	strb	r1, [r0, #6]
	_type = type;
   b4f5a:	71c2      	strb	r2, [r0, #7]
	firstreading = true;
   b4f5c:	7403      	strb	r3, [r0, #16]
}
   b4f5e:	bd10      	pop	{r4, pc}

000b4f60 <_ZN3DHT5beginEv>:

void DHT::begin(void) {
   b4f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4f64:	4604      	mov	r4, r0
#ifdef	__cplusplus
extern "C" {
#endif

__attribute__((always_inline)) inline const hal_pin_info_t* fastPinGetPinmap() {
    static const hal_pin_info_t* pinMap = hal_pin_map();
   b4f66:	4f1c      	ldr	r7, [pc, #112]	; (b4fd8 <_ZN3DHT5beginEv+0x78>)
// set up the pins!
	pinMode(_pin, INPUT);
   b4f68:	7980      	ldrb	r0, [r0, #6]
   b4f6a:	4e1c      	ldr	r6, [pc, #112]	; (b4fdc <_ZN3DHT5beginEv+0x7c>)
   b4f6c:	2100      	movs	r1, #0
   b4f6e:	f002 fc25 	bl	b77bc <pinMode>
	pinSetFast(_pin);
   b4f72:	79a5      	ldrb	r5, [r4, #6]
   b4f74:	783b      	ldrb	r3, [r7, #0]
   b4f76:	f3bf 8f5b 	dmb	ish
   b4f7a:	f013 0f01 	tst.w	r3, #1
   b4f7e:	d109      	bne.n	b4f94 <_ZN3DHT5beginEv+0x34>
   b4f80:	4638      	mov	r0, r7
   b4f82:	f7ff fd5c 	bl	b4a3e <__cxa_guard_acquire>
   b4f86:	b128      	cbz	r0, b4f94 <_ZN3DHT5beginEv+0x34>
   b4f88:	f000 fa82 	bl	b5490 <hal_pin_map>
   b4f8c:	6030      	str	r0, [r6, #0]
   b4f8e:	4638      	mov	r0, r7
   b4f90:	f7ff fd5a 	bl	b4a48 <__cxa_guard_release>
inline void pinResetFast(hal_pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(hal_pin_t _pin) __attribute__((always_inline));

inline void pinSetFast(hal_pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b4f94:	6833      	ldr	r3, [r6, #0]
   b4f96:	012d      	lsls	r5, r5, #4
   b4f98:	f813 8005 	ldrb.w	r8, [r3, r5]
    static const hal_pin_info_t* pinMap = hal_pin_map();
   b4f9c:	783b      	ldrb	r3, [r7, #0]
   b4f9e:	f3bf 8f5b 	dmb	ish
   b4fa2:	07db      	lsls	r3, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b4fa4:	ea4f 1848 	mov.w	r8, r8, lsl #5
    static const hal_pin_info_t* pinMap = hal_pin_map();
   b4fa8:	d409      	bmi.n	b4fbe <_ZN3DHT5beginEv+0x5e>
   b4faa:	480b      	ldr	r0, [pc, #44]	; (b4fd8 <_ZN3DHT5beginEv+0x78>)
   b4fac:	f7ff fd47 	bl	b4a3e <__cxa_guard_acquire>
   b4fb0:	b128      	cbz	r0, b4fbe <_ZN3DHT5beginEv+0x5e>
   b4fb2:	f000 fa6d 	bl	b5490 <hal_pin_map>
   b4fb6:	6030      	str	r0, [r6, #0]
   b4fb8:	4807      	ldr	r0, [pc, #28]	; (b4fd8 <_ZN3DHT5beginEv+0x78>)
   b4fba:	f7ff fd45 	bl	b4a48 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b4fbe:	6833      	ldr	r3, [r6, #0]
   b4fc0:	441d      	add	r5, r3
   b4fc2:	7868      	ldrb	r0, [r5, #1]
   b4fc4:	f000 001f 	and.w	r0, r0, #31
    nrf_gpio_pin_set(nrf_pin);
   b4fc8:	ea40 0008 	orr.w	r0, r0, r8
   b4fcc:	f7ff ffa6 	bl	b4f1c <nrf_gpio_pin_set>
	_lastreadtime = 0;
   b4fd0:	2300      	movs	r3, #0
   b4fd2:	60e3      	str	r3, [r4, #12]
}
   b4fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4fd8:	2003e520 	.word	0x2003e520
   b4fdc:	2003e524 	.word	0x2003e524

000b4fe0 <_ZN3DHT4readEv>:
	double tC = (a * (float) tempCelcius) / (b + (float) tempCelcius) + log( (float) percentHumidity / 100);
	double Td = (b * tC) / (a - tC);
	return Td;
}

boolean DHT::read(void) {
   b4fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4fe4:	4604      	mov	r4, r0
   b4fe6:	b085      	sub	sp, #20

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4fe8:	f000 faaa 	bl	b5540 <HAL_Timer_Get_Milli_Seconds>
	unsigned long currenttime;

// Check if sensor was read less than two seconds ago and return early
// to use last reading.
	currenttime = millis();
	if (currenttime < _lastreadtime) {
   b4fec:	68e3      	ldr	r3, [r4, #12]
   b4fee:	4283      	cmp	r3, r0
// ie there was a rollover
		_lastreadtime = 0;
   b4ff0:	bf84      	itt	hi
   b4ff2:	2300      	movhi	r3, #0
   b4ff4:	60e3      	strhi	r3, [r4, #12]
	}
	if (!firstreading && ((currenttime - _lastreadtime) < 2000)) {
   b4ff6:	7c23      	ldrb	r3, [r4, #16]
   b4ff8:	b92b      	cbnz	r3, b5006 <_ZN3DHT4readEv+0x26>
   b4ffa:	68e3      	ldr	r3, [r4, #12]
   b4ffc:	1ac0      	subs	r0, r0, r3
   b4ffe:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   b5002:	f0c0 8160 	bcc.w	b52c6 <_ZN3DHT4readEv+0x2e6>
		return true; // return last correct measurement
//		delay(2000 - (currenttime - _lastreadtime));
	}
	firstreading = false;
   b5006:	2500      	movs	r5, #0
   b5008:	7425      	strb	r5, [r4, #16]
   b500a:	f000 fa99 	bl	b5540 <HAL_Timer_Get_Milli_Seconds>
    static const hal_pin_info_t* pinMap = hal_pin_map();
   b500e:	4eb0      	ldr	r6, [pc, #704]	; (b52d0 <_ZN3DHT4readEv+0x2f0>)
	Serial.print("Currtime: "); Serial.print(currenttime);
	Serial.print(" Lasttime: "); Serial.print(_lastreadtime);
*/
	_lastreadtime = millis();

	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
   b5010:	6025      	str	r5, [r4, #0]
   b5012:	7125      	strb	r5, [r4, #4]
	_lastreadtime = millis();
   b5014:	60e0      	str	r0, [r4, #12]
  
// pull the pin high and wait 250 milliseconds
	pinSetFast(_pin);
   b5016:	79a7      	ldrb	r7, [r4, #6]
   b5018:	7833      	ldrb	r3, [r6, #0]
   b501a:	4dae      	ldr	r5, [pc, #696]	; (b52d4 <_ZN3DHT4readEv+0x2f4>)
   b501c:	f3bf 8f5b 	dmb	ish
   b5020:	f013 0f01 	tst.w	r3, #1
   b5024:	d109      	bne.n	b503a <_ZN3DHT4readEv+0x5a>
   b5026:	4630      	mov	r0, r6
   b5028:	f7ff fd09 	bl	b4a3e <__cxa_guard_acquire>
   b502c:	b128      	cbz	r0, b503a <_ZN3DHT4readEv+0x5a>
   b502e:	f000 fa2f 	bl	b5490 <hal_pin_map>
   b5032:	6028      	str	r0, [r5, #0]
   b5034:	4630      	mov	r0, r6
   b5036:	f7ff fd07 	bl	b4a48 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b503a:	682b      	ldr	r3, [r5, #0]
   b503c:	013f      	lsls	r7, r7, #4
   b503e:	f813 8007 	ldrb.w	r8, [r3, r7]
    static const hal_pin_info_t* pinMap = hal_pin_map();
   b5042:	7833      	ldrb	r3, [r6, #0]
   b5044:	f3bf 8f5b 	dmb	ish
   b5048:	07d9      	lsls	r1, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b504a:	ea4f 1848 	mov.w	r8, r8, lsl #5
    static const hal_pin_info_t* pinMap = hal_pin_map();
   b504e:	d409      	bmi.n	b5064 <_ZN3DHT4readEv+0x84>
   b5050:	489f      	ldr	r0, [pc, #636]	; (b52d0 <_ZN3DHT4readEv+0x2f0>)
   b5052:	f7ff fcf4 	bl	b4a3e <__cxa_guard_acquire>
   b5056:	b128      	cbz	r0, b5064 <_ZN3DHT4readEv+0x84>
   b5058:	f000 fa1a 	bl	b5490 <hal_pin_map>
   b505c:	6028      	str	r0, [r5, #0]
   b505e:	489c      	ldr	r0, [pc, #624]	; (b52d0 <_ZN3DHT4readEv+0x2f0>)
   b5060:	f7ff fcf2 	bl	b4a48 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b5064:	682b      	ldr	r3, [r5, #0]
   b5066:	443b      	add	r3, r7
   b5068:	7858      	ldrb	r0, [r3, #1]
   b506a:	f000 001f 	and.w	r0, r0, #31
    nrf_gpio_pin_set(nrf_pin);
   b506e:	ea40 0008 	orr.w	r0, r0, r8
   b5072:	f7ff ff53 	bl	b4f1c <nrf_gpio_pin_set>
	delay(250);
   b5076:	20fa      	movs	r0, #250	; 0xfa
   b5078:	f001 f962 	bl	b6340 <delay>

// now pull it low for ~20 milliseconds
	pinMode(_pin, OUTPUT);
   b507c:	79a0      	ldrb	r0, [r4, #6]
   b507e:	2101      	movs	r1, #1
   b5080:	f002 fb9c 	bl	b77bc <pinMode>
	pinResetFast(_pin);
   b5084:	79a7      	ldrb	r7, [r4, #6]
    static const hal_pin_info_t* pinMap = hal_pin_map();
   b5086:	7833      	ldrb	r3, [r6, #0]
   b5088:	f3bf 8f5b 	dmb	ish
   b508c:	07da      	lsls	r2, r3, #31
   b508e:	d409      	bmi.n	b50a4 <_ZN3DHT4readEv+0xc4>
   b5090:	488f      	ldr	r0, [pc, #572]	; (b52d0 <_ZN3DHT4readEv+0x2f0>)
   b5092:	f7ff fcd4 	bl	b4a3e <__cxa_guard_acquire>
   b5096:	b128      	cbz	r0, b50a4 <_ZN3DHT4readEv+0xc4>
   b5098:	f000 f9fa 	bl	b5490 <hal_pin_map>
   b509c:	6028      	str	r0, [r5, #0]
   b509e:	488c      	ldr	r0, [pc, #560]	; (b52d0 <_ZN3DHT4readEv+0x2f0>)
   b50a0:	f7ff fcd2 	bl	b4a48 <__cxa_guard_release>
}

inline void pinResetFast(hal_pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b50a4:	682b      	ldr	r3, [r5, #0]
   b50a6:	013f      	lsls	r7, r7, #4
   b50a8:	5ddb      	ldrb	r3, [r3, r7]
   b50aa:	ea4f 1843 	mov.w	r8, r3, lsl #5
    static const hal_pin_info_t* pinMap = hal_pin_map();
   b50ae:	7833      	ldrb	r3, [r6, #0]
   b50b0:	f3bf 8f5b 	dmb	ish
   b50b4:	07db      	lsls	r3, r3, #31
   b50b6:	d409      	bmi.n	b50cc <_ZN3DHT4readEv+0xec>
   b50b8:	4885      	ldr	r0, [pc, #532]	; (b52d0 <_ZN3DHT4readEv+0x2f0>)
   b50ba:	f7ff fcc0 	bl	b4a3e <__cxa_guard_acquire>
   b50be:	b128      	cbz	r0, b50cc <_ZN3DHT4readEv+0xec>
   b50c0:	f000 f9e6 	bl	b5490 <hal_pin_map>
   b50c4:	6028      	str	r0, [r5, #0]
   b50c6:	4882      	ldr	r0, [pc, #520]	; (b52d0 <_ZN3DHT4readEv+0x2f0>)
   b50c8:	f7ff fcbe 	bl	b4a48 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b50cc:	682b      	ldr	r3, [r5, #0]
   b50ce:	443b      	add	r3, r7
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   b50d0:	a803      	add	r0, sp, #12
   b50d2:	785b      	ldrb	r3, [r3, #1]
   b50d4:	f003 031f 	and.w	r3, r3, #31
   b50d8:	ea43 0308 	orr.w	r3, r3, r8
   b50dc:	9303      	str	r3, [sp, #12]
   b50de:	f7ff ff03 	bl	b4ee8 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   b50e2:	9a03      	ldr	r2, [sp, #12]
   b50e4:	2301      	movs	r3, #1
   b50e6:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   b50e8:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
	delay(20);
   b50ec:	2014      	movs	r0, #20
   b50ee:	f001 f927 	bl	b6340 <delay>
	noInterrupts();
   b50f2:	f001 fd97 	bl	b6c24 <_Z12noInterruptsv>
	pinSetFast(_pin);
   b50f6:	79a7      	ldrb	r7, [r4, #6]
    static const hal_pin_info_t* pinMap = hal_pin_map();
   b50f8:	7833      	ldrb	r3, [r6, #0]
   b50fa:	f3bf 8f5b 	dmb	ish
   b50fe:	07d8      	lsls	r0, r3, #31
   b5100:	d409      	bmi.n	b5116 <_ZN3DHT4readEv+0x136>
   b5102:	4873      	ldr	r0, [pc, #460]	; (b52d0 <_ZN3DHT4readEv+0x2f0>)
   b5104:	f7ff fc9b 	bl	b4a3e <__cxa_guard_acquire>
   b5108:	b128      	cbz	r0, b5116 <_ZN3DHT4readEv+0x136>
   b510a:	f000 f9c1 	bl	b5490 <hal_pin_map>
   b510e:	6028      	str	r0, [r5, #0]
   b5110:	486f      	ldr	r0, [pc, #444]	; (b52d0 <_ZN3DHT4readEv+0x2f0>)
   b5112:	f7ff fc99 	bl	b4a48 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b5116:	682b      	ldr	r3, [r5, #0]
   b5118:	013f      	lsls	r7, r7, #4
   b511a:	f813 8007 	ldrb.w	r8, [r3, r7]
    static const hal_pin_info_t* pinMap = hal_pin_map();
   b511e:	7833      	ldrb	r3, [r6, #0]
   b5120:	f3bf 8f5b 	dmb	ish
   b5124:	07d9      	lsls	r1, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b5126:	ea4f 1848 	mov.w	r8, r8, lsl #5
    static const hal_pin_info_t* pinMap = hal_pin_map();
   b512a:	d409      	bmi.n	b5140 <_ZN3DHT4readEv+0x160>
   b512c:	4868      	ldr	r0, [pc, #416]	; (b52d0 <_ZN3DHT4readEv+0x2f0>)
   b512e:	f7ff fc86 	bl	b4a3e <__cxa_guard_acquire>
   b5132:	b128      	cbz	r0, b5140 <_ZN3DHT4readEv+0x160>
   b5134:	f000 f9ac 	bl	b5490 <hal_pin_map>
   b5138:	6028      	str	r0, [r5, #0]
   b513a:	4865      	ldr	r0, [pc, #404]	; (b52d0 <_ZN3DHT4readEv+0x2f0>)
   b513c:	f7ff fc84 	bl	b4a48 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b5140:	682b      	ldr	r3, [r5, #0]
   b5142:	443b      	add	r3, r7
	delayMicroseconds(40);
	pinMode(_pin, INPUT);

// read in timings
	for ( i=0; i< MAXTIMINGS; i++) {
   b5144:	2700      	movs	r7, #0
   b5146:	7858      	ldrb	r0, [r3, #1]
   b5148:	f000 001f 	and.w	r0, r0, #31
    nrf_gpio_pin_set(nrf_pin);
   b514c:	ea40 0008 	orr.w	r0, r0, r8
   b5150:	f7ff fee4 	bl	b4f1c <nrf_gpio_pin_set>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b5154:	2028      	movs	r0, #40	; 0x28
   b5156:	f000 f9eb 	bl	b5530 <HAL_Delay_Microseconds>
	pinMode(_pin, INPUT);
   b515a:	79a0      	ldrb	r0, [r4, #6]
    static const hal_pin_info_t* pinMap = hal_pin_map();
   b515c:	f8df 8170 	ldr.w	r8, [pc, #368]	; b52d0 <_ZN3DHT4readEv+0x2f0>
   b5160:	2100      	movs	r1, #0
   b5162:	f002 fb2b 	bl	b77bc <pinMode>
	uint8_t laststate = HIGH;
   b5166:	2301      	movs	r3, #1
	uint8_t j = 0, i;
   b5168:	46ba      	mov	sl, r7
	uint8_t laststate = HIGH;
   b516a:	9300      	str	r3, [sp, #0]
		counter = 0;
   b516c:	f04f 0900 	mov.w	r9, #0
		while (pinReadFast(_pin) == laststate) {
   b5170:	f894 b006 	ldrb.w	fp, [r4, #6]
   b5174:	7833      	ldrb	r3, [r6, #0]
   b5176:	f3bf 8f5b 	dmb	ish
   b517a:	07da      	lsls	r2, r3, #31
   b517c:	d409      	bmi.n	b5192 <_ZN3DHT4readEv+0x1b2>
   b517e:	4640      	mov	r0, r8
   b5180:	f7ff fc5d 	bl	b4a3e <__cxa_guard_acquire>
   b5184:	b128      	cbz	r0, b5192 <_ZN3DHT4readEv+0x1b2>
   b5186:	f000 f983 	bl	b5490 <hal_pin_map>
   b518a:	6028      	str	r0, [r5, #0]
   b518c:	4640      	mov	r0, r8
   b518e:	f7ff fc5b 	bl	b4a48 <__cxa_guard_release>
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(hal_pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b5192:	682b      	ldr	r3, [r5, #0]
   b5194:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
   b5198:	f813 300b 	ldrb.w	r3, [r3, fp]
   b519c:	015b      	lsls	r3, r3, #5
   b519e:	9301      	str	r3, [sp, #4]
    static const hal_pin_info_t* pinMap = hal_pin_map();
   b51a0:	7833      	ldrb	r3, [r6, #0]
   b51a2:	f3bf 8f5b 	dmb	ish
   b51a6:	07db      	lsls	r3, r3, #31
   b51a8:	d409      	bmi.n	b51be <_ZN3DHT4readEv+0x1de>
   b51aa:	4640      	mov	r0, r8
   b51ac:	f7ff fc47 	bl	b4a3e <__cxa_guard_acquire>
   b51b0:	b128      	cbz	r0, b51be <_ZN3DHT4readEv+0x1de>
   b51b2:	f000 f96d 	bl	b5490 <hal_pin_map>
   b51b6:	6028      	str	r0, [r5, #0]
   b51b8:	4640      	mov	r0, r8
   b51ba:	f7ff fc45 	bl	b4a48 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b51be:	682b      	ldr	r3, [r5, #0]
   b51c0:	445b      	add	r3, fp
   b51c2:	f893 b001 	ldrb.w	fp, [r3, #1]
   b51c6:	9b01      	ldr	r3, [sp, #4]
   b51c8:	f00b 0b1f 	and.w	fp, fp, #31
   b51cc:	ea4b 0b03 	orr.w	fp, fp, r3
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz.
    (void)nrf_gpio_pin_read(nrf_pin);
   b51d0:	4658      	mov	r0, fp
   b51d2:	f7ff feb0 	bl	b4f36 <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   b51d6:	4658      	mov	r0, fp
   b51d8:	f7ff fead 	bl	b4f36 <nrf_gpio_pin_read>
   b51dc:	9b00      	ldr	r3, [sp, #0]
   b51de:	4283      	cmp	r3, r0
   b51e0:	d109      	bne.n	b51f6 <_ZN3DHT4readEv+0x216>
			counter++;
   b51e2:	f109 0901 	add.w	r9, r9, #1
   b51e6:	fa5f f989 	uxtb.w	r9, r9
   b51ea:	2001      	movs	r0, #1
   b51ec:	f000 f9a0 	bl	b5530 <HAL_Delay_Microseconds>
			delayMicroseconds(1);
			if (counter == 255) {
   b51f0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   b51f4:	d1bc      	bne.n	b5170 <_ZN3DHT4readEv+0x190>
				break;
			}
		}
		laststate = pinReadFast(_pin);
   b51f6:	f894 b006 	ldrb.w	fp, [r4, #6]
    static const hal_pin_info_t* pinMap = hal_pin_map();
   b51fa:	7833      	ldrb	r3, [r6, #0]
   b51fc:	f3bf 8f5b 	dmb	ish
   b5200:	07d8      	lsls	r0, r3, #31
   b5202:	d409      	bmi.n	b5218 <_ZN3DHT4readEv+0x238>
   b5204:	4640      	mov	r0, r8
   b5206:	f7ff fc1a 	bl	b4a3e <__cxa_guard_acquire>
   b520a:	b128      	cbz	r0, b5218 <_ZN3DHT4readEv+0x238>
   b520c:	f000 f940 	bl	b5490 <hal_pin_map>
   b5210:	6028      	str	r0, [r5, #0]
   b5212:	4640      	mov	r0, r8
   b5214:	f7ff fc18 	bl	b4a48 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b5218:	682b      	ldr	r3, [r5, #0]
   b521a:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
   b521e:	f813 300b 	ldrb.w	r3, [r3, fp]
   b5222:	015b      	lsls	r3, r3, #5
   b5224:	9300      	str	r3, [sp, #0]
    static const hal_pin_info_t* pinMap = hal_pin_map();
   b5226:	7833      	ldrb	r3, [r6, #0]
   b5228:	f3bf 8f5b 	dmb	ish
   b522c:	07d9      	lsls	r1, r3, #31
   b522e:	d409      	bmi.n	b5244 <_ZN3DHT4readEv+0x264>
   b5230:	4640      	mov	r0, r8
   b5232:	f7ff fc04 	bl	b4a3e <__cxa_guard_acquire>
   b5236:	b128      	cbz	r0, b5244 <_ZN3DHT4readEv+0x264>
   b5238:	f000 f92a 	bl	b5490 <hal_pin_map>
   b523c:	6028      	str	r0, [r5, #0]
   b523e:	4640      	mov	r0, r8
   b5240:	f7ff fc02 	bl	b4a48 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b5244:	682b      	ldr	r3, [r5, #0]
   b5246:	445b      	add	r3, fp
   b5248:	f893 b001 	ldrb.w	fp, [r3, #1]
   b524c:	9b00      	ldr	r3, [sp, #0]
   b524e:	f00b 0b1f 	and.w	fp, fp, #31
   b5252:	ea4b 0b03 	orr.w	fp, fp, r3
    (void)nrf_gpio_pin_read(nrf_pin);
   b5256:	4658      	mov	r0, fp
   b5258:	f7ff fe6d 	bl	b4f36 <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   b525c:	4658      	mov	r0, fp
   b525e:	f7ff fe6a 	bl	b4f36 <nrf_gpio_pin_read>

		if (counter == 255) break;
   b5262:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
		laststate = pinReadFast(_pin);
   b5266:	b2c3      	uxtb	r3, r0
   b5268:	9300      	str	r3, [sp, #0]
		if (counter == 255) break;
   b526a:	d018      	beq.n	b529e <_ZN3DHT4readEv+0x2be>

// ignore first 3 transitions
		if ((i >= 4) && (i%2 == 0)) {
   b526c:	2f03      	cmp	r7, #3
   b526e:	d911      	bls.n	b5294 <_ZN3DHT4readEv+0x2b4>
   b5270:	07fa      	lsls	r2, r7, #31
   b5272:	d40f      	bmi.n	b5294 <_ZN3DHT4readEv+0x2b4>
// shove each bit into the storage bytes
			data[j/8] <<= 1;
   b5274:	ea4f 02da 	mov.w	r2, sl, lsr #3
			if (counter > _count)
				data[j/8] |= 1;
			j++;
   b5278:	f10a 0a01 	add.w	sl, sl, #1
			data[j/8] <<= 1;
   b527c:	5ca3      	ldrb	r3, [r4, r2]
   b527e:	005b      	lsls	r3, r3, #1
   b5280:	b2db      	uxtb	r3, r3
   b5282:	54a3      	strb	r3, [r4, r2]
			if (counter > _count)
   b5284:	7a21      	ldrb	r1, [r4, #8]
   b5286:	4549      	cmp	r1, r9
				data[j/8] |= 1;
   b5288:	bf3c      	itt	cc
   b528a:	f043 0301 	orrcc.w	r3, r3, #1
   b528e:	54a3      	strbcc	r3, [r4, r2]
			j++;
   b5290:	fa5f fa8a 	uxtb.w	sl, sl
	for ( i=0; i< MAXTIMINGS; i++) {
   b5294:	3701      	adds	r7, #1
   b5296:	b2ff      	uxtb	r7, r7
   b5298:	2f55      	cmp	r7, #85	; 0x55
   b529a:	f47f af67 	bne.w	b516c <_ZN3DHT4readEv+0x18c>
		}
	}

	interrupts();
   b529e:	f001 fcc3 	bl	b6c28 <_Z10interruptsv>
	Serial.print(data[4], HEX); Serial.print(" =? ");
	Serial.println(data[0] + data[1] + data[2] + data[3], HEX);
*/

// check we read 40 bits and that the checksum matches
	if ((j >= 40) && 
   b52a2:	f1ba 0f27 	cmp.w	sl, #39	; 0x27
   b52a6:	d910      	bls.n	b52ca <_ZN3DHT4readEv+0x2ea>
	   (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) ) {
   b52a8:	7863      	ldrb	r3, [r4, #1]
   b52aa:	7820      	ldrb	r0, [r4, #0]
   b52ac:	4418      	add	r0, r3
   b52ae:	78a3      	ldrb	r3, [r4, #2]
   b52b0:	4418      	add	r0, r3
   b52b2:	78e3      	ldrb	r3, [r4, #3]
   b52b4:	4418      	add	r0, r3
   b52b6:	7923      	ldrb	r3, [r4, #4]
   b52b8:	b2c0      	uxtb	r0, r0
	if ((j >= 40) && 
   b52ba:	1ac3      	subs	r3, r0, r3
   b52bc:	4258      	negs	r0, r3
   b52be:	4158      	adcs	r0, r3
		return true;
	}
 
	return false;

}
   b52c0:	b005      	add	sp, #20
   b52c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return true; // return last correct measurement
   b52c6:	2001      	movs	r0, #1
   b52c8:	e7fa      	b.n	b52c0 <_ZN3DHT4readEv+0x2e0>
	return false;
   b52ca:	2000      	movs	r0, #0
   b52cc:	e7f8      	b.n	b52c0 <_ZN3DHT4readEv+0x2e0>
   b52ce:	bf00      	nop
   b52d0:	2003e520 	.word	0x2003e520
   b52d4:	2003e524 	.word	0x2003e524

000b52d8 <_ZN3DHT15readTemperatureEv>:
float DHT::readTemperature() {
   b52d8:	b510      	push	{r4, lr}
   b52da:	4604      	mov	r4, r0
	if (read()) {
   b52dc:	f7ff fe80 	bl	b4fe0 <_ZN3DHT4readEv>
   b52e0:	b320      	cbz	r0, b532c <_ZN3DHT15readTemperatureEv+0x54>
		switch (_type) {
   b52e2:	79e3      	ldrb	r3, [r4, #7]
   b52e4:	2b0b      	cmp	r3, #11
   b52e6:	d01b      	beq.n	b5320 <_ZN3DHT15readTemperatureEv+0x48>
   b52e8:	3b15      	subs	r3, #21
   b52ea:	2b01      	cmp	r3, #1
   b52ec:	d81e      	bhi.n	b532c <_ZN3DHT15readTemperatureEv+0x54>
   b52ee:	78a3      	ldrb	r3, [r4, #2]
				f += data[3];
   b52f0:	eddf 6a10 	vldr	s13, [pc, #64]	; b5334 <_ZN3DHT15readTemperatureEv+0x5c>
				f = data[2] & 0x7F;
   b52f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   b52f8:	ee07 2a10 	vmov	s14, r2
				f += data[3];
   b52fc:	78e2      	ldrb	r2, [r4, #3]
   b52fe:	ee07 2a90 	vmov	s15, r2
				f = data[2] & 0x7F;
   b5302:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
				f += data[3];
   b5306:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				if (data[2] & 0x80)
   b530a:	061b      	lsls	r3, r3, #24
				f += data[3];
   b530c:	eee7 7a26 	vfma.f32	s15, s14, s13
				f /= 10;
   b5310:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
   b5314:	ee87 0a87 	vdiv.f32	s0, s15, s14
				if (data[2] & 0x80)
   b5318:	d507      	bpl.n	b532a <_ZN3DHT15readTemperatureEv+0x52>
					f *= -1;
   b531a:	eeb1 0a40 	vneg.f32	s0, s0
   b531e:	e004      	b.n	b532a <_ZN3DHT15readTemperatureEv+0x52>
				f = data[2];
   b5320:	78a3      	ldrb	r3, [r4, #2]
   b5322:	ee00 3a10 	vmov	s0, r3
   b5326:	eeb8 0a40 	vcvt.f32.u32	s0, s0
}
   b532a:	bd10      	pop	{r4, pc}
		switch (_type) {
   b532c:	ed9f 0a02 	vldr	s0, [pc, #8]	; b5338 <_ZN3DHT15readTemperatureEv+0x60>
   b5330:	e7fb      	b.n	b532a <_ZN3DHT15readTemperatureEv+0x52>
   b5332:	bf00      	nop
   b5334:	43800000 	.word	0x43800000
   b5338:	7fc00000 	.word	0x7fc00000

000b533c <_ZN3DHT14getTempCelciusEv>:
	return readTemperature();
   b533c:	f7ff bfcc 	b.w	b52d8 <_ZN3DHT15readTemperatureEv>

000b5340 <_ZN3DHT12readHumidityEv>:
float DHT::readHumidity(void) {
   b5340:	b510      	push	{r4, lr}
   b5342:	4604      	mov	r4, r0
	if (read()) {
   b5344:	f7ff fe4c 	bl	b4fe0 <_ZN3DHT4readEv>
   b5348:	b1f0      	cbz	r0, b5388 <_ZN3DHT12readHumidityEv+0x48>
		switch (_type) {
   b534a:	79e3      	ldrb	r3, [r4, #7]
   b534c:	2b0b      	cmp	r3, #11
   b534e:	d015      	beq.n	b537c <_ZN3DHT12readHumidityEv+0x3c>
   b5350:	3b15      	subs	r3, #21
   b5352:	2b01      	cmp	r3, #1
   b5354:	d818      	bhi.n	b5388 <_ZN3DHT12readHumidityEv+0x48>
				f = data[0];
   b5356:	7823      	ldrb	r3, [r4, #0]
				f += data[1];
   b5358:	eddf 6a0d 	vldr	s13, [pc, #52]	; b5390 <_ZN3DHT12readHumidityEv+0x50>
				f = data[0];
   b535c:	ee07 3a10 	vmov	s14, r3
				f += data[1];
   b5360:	7863      	ldrb	r3, [r4, #1]
   b5362:	ee07 3a90 	vmov	s15, r3
				f = data[0];
   b5366:	eeb8 7a47 	vcvt.f32.u32	s14, s14
				f += data[1];
   b536a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b536e:	eee7 7a26 	vfma.f32	s15, s14, s13
				f /= 10;
   b5372:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
   b5376:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
   b537a:	bd10      	pop	{r4, pc}
				f = data[0];
   b537c:	7823      	ldrb	r3, [r4, #0]
   b537e:	ee00 3a10 	vmov	s0, r3
   b5382:	eeb8 0a40 	vcvt.f32.u32	s0, s0
				return f;
   b5386:	e7f8      	b.n	b537a <_ZN3DHT12readHumidityEv+0x3a>
		switch (_type) {
   b5388:	ed9f 0a02 	vldr	s0, [pc, #8]	; b5394 <_ZN3DHT12readHumidityEv+0x54>
   b538c:	e7f5      	b.n	b537a <_ZN3DHT12readHumidityEv+0x3a>
   b538e:	bf00      	nop
   b5390:	43800000 	.word	0x43800000
   b5394:	7fc00000 	.word	0x7fc00000

000b5398 <_ZN3DHT11getHumidityEv>:
	return readHumidity();
   b5398:	f7ff bfd2 	b.w	b5340 <_ZN3DHT12readHumidityEv>

000b539c <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_>:
#include <map>

#include "UbiConstants.h"
#include "UbiProtocol.h"

static TCPClient _client_tcp_ubi;
   b539c:	4801      	ldr	r0, [pc, #4]	; (b53a4 <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_+0x8>)
   b539e:	f001 bfad 	b.w	b72fc <_ZN9TCPClientC1Ev>
   b53a2:	bf00      	nop
   b53a4:	2003e528 	.word	0x2003e528

000b53a8 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b53a8:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b53aa:	6984      	ldr	r4, [r0, #24]
   b53ac:	4b0a      	ldr	r3, [pc, #40]	; (b53d8 <_ZN9TCPClientD1Ev+0x30>)
   b53ae:	6003      	str	r3, [r0, #0]
   b53b0:	4605      	mov	r5, r0
   b53b2:	b17c      	cbz	r4, b53d4 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b53b4:	6863      	ldr	r3, [r4, #4]
   b53b6:	3b01      	subs	r3, #1
   b53b8:	6063      	str	r3, [r4, #4]
   b53ba:	b95b      	cbnz	r3, b53d4 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b53bc:	6823      	ldr	r3, [r4, #0]
   b53be:	4620      	mov	r0, r4
   b53c0:	689b      	ldr	r3, [r3, #8]
   b53c2:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b53c4:	68a3      	ldr	r3, [r4, #8]
   b53c6:	3b01      	subs	r3, #1
   b53c8:	60a3      	str	r3, [r4, #8]
   b53ca:	b91b      	cbnz	r3, b53d4 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b53cc:	6823      	ldr	r3, [r4, #0]
   b53ce:	4620      	mov	r0, r4
   b53d0:	68db      	ldr	r3, [r3, #12]
   b53d2:	4798      	blx	r3
   b53d4:	4628      	mov	r0, r5
   b53d6:	bd38      	pop	{r3, r4, r5, pc}
   b53d8:	000b91c8 	.word	0x000b91c8

000b53dc <_ZN9TCPClientD0Ev>:
   b53dc:	b510      	push	{r4, lr}
   b53de:	4604      	mov	r4, r0
   b53e0:	f7ff ffe2 	bl	b53a8 <_ZN9TCPClientD1Ev>
   b53e4:	4620      	mov	r0, r4
   b53e6:	211c      	movs	r1, #28
   b53e8:	f7ff fb27 	bl	b4a3a <_ZdlPvj>
   b53ec:	4620      	mov	r0, r4
   b53ee:	bd10      	pop	{r4, pc}

000b53f0 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol>:
      str_value[k] = temp_arr[j];
      break;
    }
    j++;
  }
}
   b53f0:	b508      	push	{r3, lr}
   b53f2:	4b07      	ldr	r3, [pc, #28]	; (b5410 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x20>)
#define _UbiHttp_H_

#include "UbiConstants.h"
#include "UbiProtocol.h"

static TCPClient _client_http_ubi;
   b53f4:	4807      	ldr	r0, [pc, #28]	; (b5414 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x24>)
   b53f6:	2200      	movs	r2, #0
   b53f8:	701a      	strb	r2, [r3, #0]
   b53fa:	f001 ff7f 	bl	b72fc <_ZN9TCPClientC1Ev>
   b53fe:	4806      	ldr	r0, [pc, #24]	; (b5418 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x28>)
   b5400:	f001 ff7c 	bl	b72fc <_ZN9TCPClientC1Ev>
   b5404:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
#define _UbiUdp_H_

#include "UbiConstants.h"
#include "UbiProtocol.h"

static UDP _client_udp_ubi;
   b5408:	4804      	ldr	r0, [pc, #16]	; (b541c <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x2c>)
   b540a:	f000 bddd 	b.w	b5fc8 <_ZN3UDPC1Ev>
   b540e:	bf00      	nop
   b5410:	2003e5c8 	.word	0x2003e5c8
   b5414:	2003e5ac 	.word	0x2003e5ac
   b5418:	2003e544 	.word	0x2003e544
   b541c:	2003e560 	.word	0x2003e560

000b5420 <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_>:
   b5420:	4801      	ldr	r0, [pc, #4]	; (b5428 <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_+0x8>)
   b5422:	f001 bf6b 	b.w	b72fc <_ZN9TCPClientC1Ev>
   b5426:	bf00      	nop
   b5428:	2003e5cc 	.word	0x2003e5cc

000b542c <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   b542c:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   b542e:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b5430:	4604      	mov	r4, r0
      if (_M_manager)
   b5432:	b113      	cbz	r3, b543a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b5434:	2203      	movs	r2, #3
   b5436:	4601      	mov	r1, r0
   b5438:	4798      	blx	r3
    }
   b543a:	4620      	mov	r0, r4
   b543c:	bd10      	pop	{r4, pc}
	...

000b5440 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol>:
}

UbiProtocol* builderParticle() {
  UbiProtocol* particleInstance = new UbiParticle(_host, NULL, NULL, _token);
  return particleInstance;
}
   b5440:	b508      	push	{r3, lr}
   b5442:	4805      	ldr	r0, [pc, #20]	; (b5458 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x18>)
   b5444:	f001 ff5a 	bl	b72fc <_ZN9TCPClientC1Ev>
   b5448:	4804      	ldr	r0, [pc, #16]	; (b545c <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x1c>)
   b544a:	f001 ff57 	bl	b72fc <_ZN9TCPClientC1Ev>
   b544e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b5452:	4803      	ldr	r0, [pc, #12]	; (b5460 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x20>)
   b5454:	f000 bdb8 	b.w	b5fc8 <_ZN3UDPC1Ev>
   b5458:	2003e650 	.word	0x2003e650
   b545c:	2003e5e8 	.word	0x2003e5e8
   b5460:	2003e604 	.word	0x2003e604

000b5464 <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_>:
   b5464:	4801      	ldr	r0, [pc, #4]	; (b546c <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_+0x8>)
   b5466:	f000 bdaf 	b.w	b5fc8 <_ZN3UDPC1Ev>
   b546a:	bf00      	nop
   b546c:	2003e66c 	.word	0x2003e66c

000b5470 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b5470:	b508      	push	{r3, lr}
   b5472:	4b02      	ldr	r3, [pc, #8]	; (b547c <netdb_freeaddrinfo+0xc>)
   b5474:	681b      	ldr	r3, [r3, #0]
   b5476:	689b      	ldr	r3, [r3, #8]
   b5478:	9301      	str	r3, [sp, #4]
   b547a:	bd08      	pop	{r3, pc}
   b547c:	00030268 	.word	0x00030268

000b5480 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b5480:	b508      	push	{r3, lr}
   b5482:	4b02      	ldr	r3, [pc, #8]	; (b548c <netdb_getaddrinfo+0xc>)
   b5484:	681b      	ldr	r3, [r3, #0]
   b5486:	68db      	ldr	r3, [r3, #12]
   b5488:	9301      	str	r3, [sp, #4]
   b548a:	bd08      	pop	{r3, pc}
   b548c:	00030268 	.word	0x00030268

000b5490 <hal_pin_map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
   b5490:	b508      	push	{r3, lr}
   b5492:	4b02      	ldr	r3, [pc, #8]	; (b549c <hal_pin_map+0xc>)
   b5494:	681b      	ldr	r3, [r3, #0]
   b5496:	681b      	ldr	r3, [r3, #0]
   b5498:	9301      	str	r3, [sp, #4]
   b549a:	bd08      	pop	{r3, pc}
   b549c:	0003022c 	.word	0x0003022c

000b54a0 <hal_pin_validate_function>:
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
   b54a0:	b508      	push	{r3, lr}
   b54a2:	4b02      	ldr	r3, [pc, #8]	; (b54ac <hal_pin_validate_function+0xc>)
   b54a4:	681b      	ldr	r3, [r3, #0]
   b54a6:	685b      	ldr	r3, [r3, #4]
   b54a8:	9301      	str	r3, [sp, #4]
   b54aa:	bd08      	pop	{r3, pc}
   b54ac:	0003022c 	.word	0x0003022c

000b54b0 <hal_gpio_mode>:
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
   b54b0:	b508      	push	{r3, lr}
   b54b2:	4b02      	ldr	r3, [pc, #8]	; (b54bc <hal_gpio_mode+0xc>)
   b54b4:	681b      	ldr	r3, [r3, #0]
   b54b6:	689b      	ldr	r3, [r3, #8]
   b54b8:	9301      	str	r3, [sp, #4]
   b54ba:	bd08      	pop	{r3, pc}
   b54bc:	0003022c 	.word	0x0003022c

000b54c0 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
   b54c0:	b508      	push	{r3, lr}
   b54c2:	4b02      	ldr	r3, [pc, #8]	; (b54cc <hal_gpio_get_mode+0xc>)
   b54c4:	681b      	ldr	r3, [r3, #0]
   b54c6:	68db      	ldr	r3, [r3, #12]
   b54c8:	9301      	str	r3, [sp, #4]
   b54ca:	bd08      	pop	{r3, pc}
   b54cc:	0003022c 	.word	0x0003022c

000b54d0 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
   b54d0:	b508      	push	{r3, lr}
   b54d2:	4b02      	ldr	r3, [pc, #8]	; (b54dc <hal_gpio_write+0xc>)
   b54d4:	681b      	ldr	r3, [r3, #0]
   b54d6:	691b      	ldr	r3, [r3, #16]
   b54d8:	9301      	str	r3, [sp, #4]
   b54da:	bd08      	pop	{r3, pc}
   b54dc:	0003022c 	.word	0x0003022c

000b54e0 <hal_interrupt_enable_all>:
DYNALIB_FN(5, hal_gpio, hal_gpio_read, int32_t(hal_pin_t))
DYNALIB_FN(6, hal_gpio, hal_interrupt_attach, int(uint16_t, hal_interrupt_handler_t, void*, InterruptMode, hal_interrupt_extra_configuration_t*))
DYNALIB_FN(7, hal_gpio, hal_interrupt_detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, hal_interrupt_enable_all, void(void))
   b54e0:	b508      	push	{r3, lr}
   b54e2:	4b02      	ldr	r3, [pc, #8]	; (b54ec <hal_interrupt_enable_all+0xc>)
   b54e4:	681b      	ldr	r3, [r3, #0]
   b54e6:	6a1b      	ldr	r3, [r3, #32]
   b54e8:	9301      	str	r3, [sp, #4]
   b54ea:	bd08      	pop	{r3, pc}
   b54ec:	0003022c 	.word	0x0003022c

000b54f0 <hal_interrupt_disable_all>:
DYNALIB_FN(9, hal_gpio, hal_interrupt_disable_all, void(void))
   b54f0:	b508      	push	{r3, lr}
   b54f2:	4b02      	ldr	r3, [pc, #8]	; (b54fc <hal_interrupt_disable_all+0xc>)
   b54f4:	681b      	ldr	r3, [r3, #0]
   b54f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b54f8:	9301      	str	r3, [sp, #4]
   b54fa:	bd08      	pop	{r3, pc}
   b54fc:	0003022c 	.word	0x0003022c

000b5500 <hal_adc_read>:

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(hal_pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b5500:	b508      	push	{r3, lr}
   b5502:	4b02      	ldr	r3, [pc, #8]	; (b550c <hal_adc_read+0xc>)
   b5504:	681b      	ldr	r3, [r3, #0]
   b5506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5508:	9301      	str	r3, [sp, #4]
   b550a:	bd08      	pop	{r3, pc}
   b550c:	0003022c 	.word	0x0003022c

000b5510 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b5510:	b508      	push	{r3, lr}
   b5512:	4b02      	ldr	r3, [pc, #8]	; (b551c <if_index_to_name+0xc>)
   b5514:	681b      	ldr	r3, [r3, #0]
   b5516:	695b      	ldr	r3, [r3, #20]
   b5518:	9301      	str	r3, [sp, #4]
   b551a:	bd08      	pop	{r3, pc}
   b551c:	0003026c 	.word	0x0003026c

000b5520 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b5520:	b508      	push	{r3, lr}
   b5522:	4b02      	ldr	r3, [pc, #8]	; (b552c <HAL_RNG_GetRandomNumber+0xc>)
   b5524:	681b      	ldr	r3, [r3, #0]
   b5526:	685b      	ldr	r3, [r3, #4]
   b5528:	9301      	str	r3, [sp, #4]
   b552a:	bd08      	pop	{r3, pc}
   b552c:	00030218 	.word	0x00030218

000b5530 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b5530:	b508      	push	{r3, lr}
   b5532:	4b02      	ldr	r3, [pc, #8]	; (b553c <HAL_Delay_Microseconds+0xc>)
   b5534:	681b      	ldr	r3, [r3, #0]
   b5536:	68db      	ldr	r3, [r3, #12]
   b5538:	9301      	str	r3, [sp, #4]
   b553a:	bd08      	pop	{r3, pc}
   b553c:	00030218 	.word	0x00030218

000b5540 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b5540:	b508      	push	{r3, lr}
   b5542:	4b02      	ldr	r3, [pc, #8]	; (b554c <HAL_Timer_Get_Milli_Seconds+0xc>)
   b5544:	681b      	ldr	r3, [r3, #0]
   b5546:	695b      	ldr	r3, [r3, #20]
   b5548:	9301      	str	r3, [sp, #4]
   b554a:	bd08      	pop	{r3, pc}
   b554c:	00030218 	.word	0x00030218

000b5550 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b5550:	b508      	push	{r3, lr}
   b5552:	4b02      	ldr	r3, [pc, #8]	; (b555c <os_mutex_recursive_create+0xc>)
   b5554:	681b      	ldr	r3, [r3, #0]
   b5556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5558:	9301      	str	r3, [sp, #4]
   b555a:	bd08      	pop	{r3, pc}
   b555c:	00030248 	.word	0x00030248

000b5560 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b5560:	b508      	push	{r3, lr}
   b5562:	4b02      	ldr	r3, [pc, #8]	; (b556c <inet_inet_ntop+0xc>)
   b5564:	681b      	ldr	r3, [r3, #0]
   b5566:	695b      	ldr	r3, [r3, #20]
   b5568:	9301      	str	r3, [sp, #4]
   b556a:	bd08      	pop	{r3, pc}
   b556c:	00030264 	.word	0x00030264

000b5570 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b5570:	b508      	push	{r3, lr}
   b5572:	4b02      	ldr	r3, [pc, #8]	; (b557c <inet_htonl+0xc>)
   b5574:	681b      	ldr	r3, [r3, #0]
   b5576:	6a1b      	ldr	r3, [r3, #32]
   b5578:	9301      	str	r3, [sp, #4]
   b557a:	bd08      	pop	{r3, pc}
   b557c:	00030264 	.word	0x00030264

000b5580 <inet_ntohs>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
   b5580:	b508      	push	{r3, lr}
   b5582:	4b02      	ldr	r3, [pc, #8]	; (b558c <inet_ntohs+0xc>)
   b5584:	681b      	ldr	r3, [r3, #0]
   b5586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5588:	9301      	str	r3, [sp, #4]
   b558a:	bd08      	pop	{r3, pc}
   b558c:	00030264 	.word	0x00030264

000b5590 <inet_htons>:
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b5590:	b508      	push	{r3, lr}
   b5592:	4b02      	ldr	r3, [pc, #8]	; (b559c <inet_htons+0xc>)
   b5594:	681b      	ldr	r3, [r3, #0]
   b5596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5598:	9301      	str	r3, [sp, #4]
   b559a:	bd08      	pop	{r3, pc}
   b559c:	00030264 	.word	0x00030264

000b55a0 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b55a0:	b508      	push	{r3, lr}
   b55a2:	4b02      	ldr	r3, [pc, #8]	; (b55ac <hal_usart_write+0xc>)
   b55a4:	681b      	ldr	r3, [r3, #0]
   b55a6:	68db      	ldr	r3, [r3, #12]
   b55a8:	9301      	str	r3, [sp, #4]
   b55aa:	bd08      	pop	{r3, pc}
   b55ac:	0003023c 	.word	0x0003023c

000b55b0 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b55b0:	b508      	push	{r3, lr}
   b55b2:	4b02      	ldr	r3, [pc, #8]	; (b55bc <hal_usart_available+0xc>)
   b55b4:	681b      	ldr	r3, [r3, #0]
   b55b6:	691b      	ldr	r3, [r3, #16]
   b55b8:	9301      	str	r3, [sp, #4]
   b55ba:	bd08      	pop	{r3, pc}
   b55bc:	0003023c 	.word	0x0003023c

000b55c0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b55c0:	b508      	push	{r3, lr}
   b55c2:	4b02      	ldr	r3, [pc, #8]	; (b55cc <hal_usart_read+0xc>)
   b55c4:	681b      	ldr	r3, [r3, #0]
   b55c6:	695b      	ldr	r3, [r3, #20]
   b55c8:	9301      	str	r3, [sp, #4]
   b55ca:	bd08      	pop	{r3, pc}
   b55cc:	0003023c 	.word	0x0003023c

000b55d0 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b55d0:	b508      	push	{r3, lr}
   b55d2:	4b02      	ldr	r3, [pc, #8]	; (b55dc <hal_usart_peek+0xc>)
   b55d4:	681b      	ldr	r3, [r3, #0]
   b55d6:	699b      	ldr	r3, [r3, #24]
   b55d8:	9301      	str	r3, [sp, #4]
   b55da:	bd08      	pop	{r3, pc}
   b55dc:	0003023c 	.word	0x0003023c

000b55e0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b55e0:	b508      	push	{r3, lr}
   b55e2:	4b02      	ldr	r3, [pc, #8]	; (b55ec <hal_usart_flush+0xc>)
   b55e4:	681b      	ldr	r3, [r3, #0]
   b55e6:	69db      	ldr	r3, [r3, #28]
   b55e8:	9301      	str	r3, [sp, #4]
   b55ea:	bd08      	pop	{r3, pc}
   b55ec:	0003023c 	.word	0x0003023c

000b55f0 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b55f0:	b508      	push	{r3, lr}
   b55f2:	4b02      	ldr	r3, [pc, #8]	; (b55fc <hal_usart_is_enabled+0xc>)
   b55f4:	681b      	ldr	r3, [r3, #0]
   b55f6:	6a1b      	ldr	r3, [r3, #32]
   b55f8:	9301      	str	r3, [sp, #4]
   b55fa:	bd08      	pop	{r3, pc}
   b55fc:	0003023c 	.word	0x0003023c

000b5600 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b5600:	b508      	push	{r3, lr}
   b5602:	4b02      	ldr	r3, [pc, #8]	; (b560c <hal_usart_available_data_for_write+0xc>)
   b5604:	681b      	ldr	r3, [r3, #0]
   b5606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5608:	9301      	str	r3, [sp, #4]
   b560a:	bd08      	pop	{r3, pc}
   b560c:	0003023c 	.word	0x0003023c

000b5610 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b5610:	b508      	push	{r3, lr}
   b5612:	4b02      	ldr	r3, [pc, #8]	; (b561c <hal_usart_init_ex+0xc>)
   b5614:	681b      	ldr	r3, [r3, #0]
   b5616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5618:	9301      	str	r3, [sp, #4]
   b561a:	bd08      	pop	{r3, pc}
   b561c:	0003023c 	.word	0x0003023c

000b5620 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b5620:	b508      	push	{r3, lr}
   b5622:	4b02      	ldr	r3, [pc, #8]	; (b562c <hal_i2c_write+0xc>)
   b5624:	681b      	ldr	r3, [r3, #0]
   b5626:	6a1b      	ldr	r3, [r3, #32]
   b5628:	9301      	str	r3, [sp, #4]
   b562a:	bd08      	pop	{r3, pc}
   b562c:	00030228 	.word	0x00030228

000b5630 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b5630:	b508      	push	{r3, lr}
   b5632:	4b02      	ldr	r3, [pc, #8]	; (b563c <hal_i2c_available+0xc>)
   b5634:	681b      	ldr	r3, [r3, #0]
   b5636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5638:	9301      	str	r3, [sp, #4]
   b563a:	bd08      	pop	{r3, pc}
   b563c:	00030228 	.word	0x00030228

000b5640 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b5640:	b508      	push	{r3, lr}
   b5642:	4b02      	ldr	r3, [pc, #8]	; (b564c <hal_i2c_read+0xc>)
   b5644:	681b      	ldr	r3, [r3, #0]
   b5646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5648:	9301      	str	r3, [sp, #4]
   b564a:	bd08      	pop	{r3, pc}
   b564c:	00030228 	.word	0x00030228

000b5650 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b5650:	b508      	push	{r3, lr}
   b5652:	4b02      	ldr	r3, [pc, #8]	; (b565c <hal_i2c_peek+0xc>)
   b5654:	681b      	ldr	r3, [r3, #0]
   b5656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5658:	9301      	str	r3, [sp, #4]
   b565a:	bd08      	pop	{r3, pc}
   b565c:	00030228 	.word	0x00030228

000b5660 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b5660:	b508      	push	{r3, lr}
   b5662:	4b02      	ldr	r3, [pc, #8]	; (b566c <hal_i2c_flush+0xc>)
   b5664:	681b      	ldr	r3, [r3, #0]
   b5666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5668:	9301      	str	r3, [sp, #4]
   b566a:	bd08      	pop	{r3, pc}
   b566c:	00030228 	.word	0x00030228

000b5670 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b5670:	b508      	push	{r3, lr}
   b5672:	4b02      	ldr	r3, [pc, #8]	; (b567c <hal_i2c_is_enabled+0xc>)
   b5674:	681b      	ldr	r3, [r3, #0]
   b5676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5678:	9301      	str	r3, [sp, #4]
   b567a:	bd08      	pop	{r3, pc}
   b567c:	00030228 	.word	0x00030228

000b5680 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b5680:	b508      	push	{r3, lr}
   b5682:	4b02      	ldr	r3, [pc, #8]	; (b568c <hal_i2c_init+0xc>)
   b5684:	681b      	ldr	r3, [r3, #0]
   b5686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5688:	9301      	str	r3, [sp, #4]
   b568a:	bd08      	pop	{r3, pc}
   b568c:	00030228 	.word	0x00030228

000b5690 <sock_bind>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, sock_accept, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
   b5690:	b508      	push	{r3, lr}
   b5692:	4b02      	ldr	r3, [pc, #8]	; (b569c <sock_bind+0xc>)
   b5694:	681b      	ldr	r3, [r3, #0]
   b5696:	685b      	ldr	r3, [r3, #4]
   b5698:	9301      	str	r3, [sp, #4]
   b569a:	bd08      	pop	{r3, pc}
   b569c:	00030238 	.word	0x00030238

000b56a0 <sock_setsockopt>:
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b56a0:	b508      	push	{r3, lr}
   b56a2:	4b02      	ldr	r3, [pc, #8]	; (b56ac <sock_setsockopt+0xc>)
   b56a4:	681b      	ldr	r3, [r3, #0]
   b56a6:	699b      	ldr	r3, [r3, #24]
   b56a8:	9301      	str	r3, [sp, #4]
   b56aa:	bd08      	pop	{r3, pc}
   b56ac:	00030238 	.word	0x00030238

000b56b0 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b56b0:	b508      	push	{r3, lr}
   b56b2:	4b02      	ldr	r3, [pc, #8]	; (b56bc <sock_close+0xc>)
   b56b4:	681b      	ldr	r3, [r3, #0]
   b56b6:	69db      	ldr	r3, [r3, #28]
   b56b8:	9301      	str	r3, [sp, #4]
   b56ba:	bd08      	pop	{r3, pc}
   b56bc:	00030238 	.word	0x00030238

000b56c0 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b56c0:	b508      	push	{r3, lr}
   b56c2:	4b02      	ldr	r3, [pc, #8]	; (b56cc <sock_connect+0xc>)
   b56c4:	681b      	ldr	r3, [r3, #0]
   b56c6:	6a1b      	ldr	r3, [r3, #32]
   b56c8:	9301      	str	r3, [sp, #4]
   b56ca:	bd08      	pop	{r3, pc}
   b56cc:	00030238 	.word	0x00030238

000b56d0 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b56d0:	b508      	push	{r3, lr}
   b56d2:	4b02      	ldr	r3, [pc, #8]	; (b56dc <sock_recv+0xc>)
   b56d4:	681b      	ldr	r3, [r3, #0]
   b56d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b56d8:	9301      	str	r3, [sp, #4]
   b56da:	bd08      	pop	{r3, pc}
   b56dc:	00030238 	.word	0x00030238

000b56e0 <sock_recvfrom>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
   b56e0:	b508      	push	{r3, lr}
   b56e2:	4b02      	ldr	r3, [pc, #8]	; (b56ec <sock_recvfrom+0xc>)
   b56e4:	681b      	ldr	r3, [r3, #0]
   b56e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b56e8:	9301      	str	r3, [sp, #4]
   b56ea:	bd08      	pop	{r3, pc}
   b56ec:	00030238 	.word	0x00030238

000b56f0 <sock_send>:
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b56f0:	b508      	push	{r3, lr}
   b56f2:	4b02      	ldr	r3, [pc, #8]	; (b56fc <sock_send+0xc>)
   b56f4:	681b      	ldr	r3, [r3, #0]
   b56f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b56f8:	9301      	str	r3, [sp, #4]
   b56fa:	bd08      	pop	{r3, pc}
   b56fc:	00030238 	.word	0x00030238

000b5700 <sock_sendto>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
   b5700:	b508      	push	{r3, lr}
   b5702:	4b02      	ldr	r3, [pc, #8]	; (b570c <sock_sendto+0xc>)
   b5704:	681b      	ldr	r3, [r3, #0]
   b5706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5708:	9301      	str	r3, [sp, #4]
   b570a:	bd08      	pop	{r3, pc}
   b570c:	00030238 	.word	0x00030238

000b5710 <sock_socket>:
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b5710:	b508      	push	{r3, lr}
   b5712:	4b02      	ldr	r3, [pc, #8]	; (b571c <sock_socket+0xc>)
   b5714:	681b      	ldr	r3, [r3, #0]
   b5716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b5718:	9301      	str	r3, [sp, #4]
   b571a:	bd08      	pop	{r3, pc}
   b571c:	00030238 	.word	0x00030238

000b5720 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b5720:	b508      	push	{r3, lr}
   b5722:	4b02      	ldr	r3, [pc, #8]	; (b572c <hal_spi_init+0xc>)
   b5724:	681b      	ldr	r3, [r3, #0]
   b5726:	69db      	ldr	r3, [r3, #28]
   b5728:	9301      	str	r3, [sp, #4]
   b572a:	bd08      	pop	{r3, pc}
   b572c:	00030230 	.word	0x00030230

000b5730 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b5730:	b508      	push	{r3, lr}
   b5732:	4b02      	ldr	r3, [pc, #8]	; (b573c <hal_spi_is_enabled+0xc>)
   b5734:	681b      	ldr	r3, [r3, #0]
   b5736:	6a1b      	ldr	r3, [r3, #32]
   b5738:	9301      	str	r3, [sp, #4]
   b573a:	bd08      	pop	{r3, pc}
   b573c:	00030230 	.word	0x00030230

000b5740 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b5740:	b508      	push	{r3, lr}
   b5742:	4b02      	ldr	r3, [pc, #8]	; (b574c <HAL_USB_USART_Init+0xc>)
   b5744:	681b      	ldr	r3, [r3, #0]
   b5746:	681b      	ldr	r3, [r3, #0]
   b5748:	9301      	str	r3, [sp, #4]
   b574a:	bd08      	pop	{r3, pc}
   b574c:	0003024c 	.word	0x0003024c

000b5750 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b5750:	b508      	push	{r3, lr}
   b5752:	4b02      	ldr	r3, [pc, #8]	; (b575c <HAL_USB_USART_Available_Data+0xc>)
   b5754:	681b      	ldr	r3, [r3, #0]
   b5756:	691b      	ldr	r3, [r3, #16]
   b5758:	9301      	str	r3, [sp, #4]
   b575a:	bd08      	pop	{r3, pc}
   b575c:	0003024c 	.word	0x0003024c

000b5760 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b5760:	b508      	push	{r3, lr}
   b5762:	4b02      	ldr	r3, [pc, #8]	; (b576c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b5764:	681b      	ldr	r3, [r3, #0]
   b5766:	695b      	ldr	r3, [r3, #20]
   b5768:	9301      	str	r3, [sp, #4]
   b576a:	bd08      	pop	{r3, pc}
   b576c:	0003024c 	.word	0x0003024c

000b5770 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5770:	b508      	push	{r3, lr}
   b5772:	4b02      	ldr	r3, [pc, #8]	; (b577c <HAL_USB_USART_Receive_Data+0xc>)
   b5774:	681b      	ldr	r3, [r3, #0]
   b5776:	699b      	ldr	r3, [r3, #24]
   b5778:	9301      	str	r3, [sp, #4]
   b577a:	bd08      	pop	{r3, pc}
   b577c:	0003024c 	.word	0x0003024c

000b5780 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5780:	b508      	push	{r3, lr}
   b5782:	4b02      	ldr	r3, [pc, #8]	; (b578c <HAL_USB_USART_Send_Data+0xc>)
   b5784:	681b      	ldr	r3, [r3, #0]
   b5786:	69db      	ldr	r3, [r3, #28]
   b5788:	9301      	str	r3, [sp, #4]
   b578a:	bd08      	pop	{r3, pc}
   b578c:	0003024c 	.word	0x0003024c

000b5790 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b5790:	b508      	push	{r3, lr}
   b5792:	4b02      	ldr	r3, [pc, #8]	; (b579c <HAL_USB_USART_Flush_Data+0xc>)
   b5794:	681b      	ldr	r3, [r3, #0]
   b5796:	6a1b      	ldr	r3, [r3, #32]
   b5798:	9301      	str	r3, [sp, #4]
   b579a:	bd08      	pop	{r3, pc}
   b579c:	0003024c 	.word	0x0003024c

000b57a0 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b57a0:	b508      	push	{r3, lr}
   b57a2:	4b02      	ldr	r3, [pc, #8]	; (b57ac <panic_+0xc>)
   b57a4:	681b      	ldr	r3, [r3, #0]
   b57a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b57a8:	9301      	str	r3, [sp, #4]
   b57aa:	bd08      	pop	{r3, pc}
   b57ac:	00030260 	.word	0x00030260

000b57b0 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b57b0:	b508      	push	{r3, lr}
   b57b2:	4b02      	ldr	r3, [pc, #8]	; (b57bc <log_message+0xc>)
   b57b4:	681b      	ldr	r3, [r3, #0]
   b57b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b57b8:	9301      	str	r3, [sp, #4]
   b57ba:	bd08      	pop	{r3, pc}
   b57bc:	00030260 	.word	0x00030260

000b57c0 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b57c0:	b508      	push	{r3, lr}
   b57c2:	4b02      	ldr	r3, [pc, #8]	; (b57cc <set_system_mode+0xc>)
   b57c4:	681b      	ldr	r3, [r3, #0]
   b57c6:	685b      	ldr	r3, [r3, #4]
   b57c8:	9301      	str	r3, [sp, #4]
   b57ca:	bd08      	pop	{r3, pc}
   b57cc:	00030220 	.word	0x00030220

000b57d0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b57d0:	b508      	push	{r3, lr}
   b57d2:	4b02      	ldr	r3, [pc, #8]	; (b57dc <system_delay_ms+0xc>)
   b57d4:	681b      	ldr	r3, [r3, #0]
   b57d6:	695b      	ldr	r3, [r3, #20]
   b57d8:	9301      	str	r3, [sp, #4]
   b57da:	bd08      	pop	{r3, pc}
   b57dc:	00030220 	.word	0x00030220

000b57e0 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b57e0:	b508      	push	{r3, lr}
   b57e2:	4b02      	ldr	r3, [pc, #8]	; (b57ec <application_thread_current+0xc>)
   b57e4:	681b      	ldr	r3, [r3, #0]
   b57e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b57e8:	9301      	str	r3, [sp, #4]
   b57ea:	bd08      	pop	{r3, pc}
   b57ec:	00030220 	.word	0x00030220

000b57f0 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b57f0:	b508      	push	{r3, lr}
   b57f2:	4b02      	ldr	r3, [pc, #8]	; (b57fc <application_thread_invoke+0xc>)
   b57f4:	681b      	ldr	r3, [r3, #0]
   b57f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b57f8:	9301      	str	r3, [sp, #4]
   b57fa:	bd08      	pop	{r3, pc}
   b57fc:	00030220 	.word	0x00030220

000b5800 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b5800:	b508      	push	{r3, lr}
   b5802:	4b03      	ldr	r3, [pc, #12]	; (b5810 <system_ctrl_set_app_request_handler+0x10>)
   b5804:	681b      	ldr	r3, [r3, #0]
   b5806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b580a:	9301      	str	r3, [sp, #4]
   b580c:	bd08      	pop	{r3, pc}
   b580e:	0000      	.short	0x0000
   b5810:	00030220 	.word	0x00030220

000b5814 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b5814:	b508      	push	{r3, lr}
   b5816:	4b03      	ldr	r3, [pc, #12]	; (b5824 <system_ctrl_set_result+0x10>)
   b5818:	681b      	ldr	r3, [r3, #0]
   b581a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b581e:	9301      	str	r3, [sp, #4]
   b5820:	bd08      	pop	{r3, pc}
   b5822:	0000      	.short	0x0000
   b5824:	00030220 	.word	0x00030220

000b5828 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b5828:	b508      	push	{r3, lr}
   b582a:	4b02      	ldr	r3, [pc, #8]	; (b5834 <network_connect+0xc>)
   b582c:	681b      	ldr	r3, [r3, #0]
   b582e:	685b      	ldr	r3, [r3, #4]
   b5830:	9301      	str	r3, [sp, #4]
   b5832:	bd08      	pop	{r3, pc}
   b5834:	00030240 	.word	0x00030240

000b5838 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b5838:	b508      	push	{r3, lr}
   b583a:	4b02      	ldr	r3, [pc, #8]	; (b5844 <network_connecting+0xc>)
   b583c:	681b      	ldr	r3, [r3, #0]
   b583e:	689b      	ldr	r3, [r3, #8]
   b5840:	9301      	str	r3, [sp, #4]
   b5842:	bd08      	pop	{r3, pc}
   b5844:	00030240 	.word	0x00030240

000b5848 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b5848:	b508      	push	{r3, lr}
   b584a:	4b02      	ldr	r3, [pc, #8]	; (b5854 <network_disconnect+0xc>)
   b584c:	681b      	ldr	r3, [r3, #0]
   b584e:	68db      	ldr	r3, [r3, #12]
   b5850:	9301      	str	r3, [sp, #4]
   b5852:	bd08      	pop	{r3, pc}
   b5854:	00030240 	.word	0x00030240

000b5858 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b5858:	b508      	push	{r3, lr}
   b585a:	4b02      	ldr	r3, [pc, #8]	; (b5864 <network_ready+0xc>)
   b585c:	681b      	ldr	r3, [r3, #0]
   b585e:	691b      	ldr	r3, [r3, #16]
   b5860:	9301      	str	r3, [sp, #4]
   b5862:	bd08      	pop	{r3, pc}
   b5864:	00030240 	.word	0x00030240

000b5868 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b5868:	b508      	push	{r3, lr}
   b586a:	4b02      	ldr	r3, [pc, #8]	; (b5874 <network_on+0xc>)
   b586c:	681b      	ldr	r3, [r3, #0]
   b586e:	695b      	ldr	r3, [r3, #20]
   b5870:	9301      	str	r3, [sp, #4]
   b5872:	bd08      	pop	{r3, pc}
   b5874:	00030240 	.word	0x00030240

000b5878 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b5878:	b508      	push	{r3, lr}
   b587a:	4b02      	ldr	r3, [pc, #8]	; (b5884 <network_off+0xc>)
   b587c:	681b      	ldr	r3, [r3, #0]
   b587e:	699b      	ldr	r3, [r3, #24]
   b5880:	9301      	str	r3, [sp, #4]
   b5882:	bd08      	pop	{r3, pc}
   b5884:	00030240 	.word	0x00030240

000b5888 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b5888:	b508      	push	{r3, lr}
   b588a:	4b02      	ldr	r3, [pc, #8]	; (b5894 <network_listen+0xc>)
   b588c:	681b      	ldr	r3, [r3, #0]
   b588e:	69db      	ldr	r3, [r3, #28]
   b5890:	9301      	str	r3, [sp, #4]
   b5892:	bd08      	pop	{r3, pc}
   b5894:	00030240 	.word	0x00030240

000b5898 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b5898:	b508      	push	{r3, lr}
   b589a:	4b02      	ldr	r3, [pc, #8]	; (b58a4 <network_listening+0xc>)
   b589c:	681b      	ldr	r3, [r3, #0]
   b589e:	6a1b      	ldr	r3, [r3, #32]
   b58a0:	9301      	str	r3, [sp, #4]
   b58a2:	bd08      	pop	{r3, pc}
   b58a4:	00030240 	.word	0x00030240

000b58a8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b58a8:	b508      	push	{r3, lr}
   b58aa:	4b02      	ldr	r3, [pc, #8]	; (b58b4 <network_set_listen_timeout+0xc>)
   b58ac:	681b      	ldr	r3, [r3, #0]
   b58ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b58b0:	9301      	str	r3, [sp, #4]
   b58b2:	bd08      	pop	{r3, pc}
   b58b4:	00030240 	.word	0x00030240

000b58b8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b58b8:	b508      	push	{r3, lr}
   b58ba:	4b02      	ldr	r3, [pc, #8]	; (b58c4 <network_get_listen_timeout+0xc>)
   b58bc:	681b      	ldr	r3, [r3, #0]
   b58be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b58c0:	9301      	str	r3, [sp, #4]
   b58c2:	bd08      	pop	{r3, pc}
   b58c4:	00030240 	.word	0x00030240

000b58c8 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b58c8:	b508      	push	{r3, lr}
   b58ca:	4b02      	ldr	r3, [pc, #8]	; (b58d4 <network_is_on+0xc>)
   b58cc:	681b      	ldr	r3, [r3, #0]
   b58ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b58d0:	9301      	str	r3, [sp, #4]
   b58d2:	bd08      	pop	{r3, pc}
   b58d4:	00030240 	.word	0x00030240

000b58d8 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b58d8:	b508      	push	{r3, lr}
   b58da:	4b02      	ldr	r3, [pc, #8]	; (b58e4 <network_is_off+0xc>)
   b58dc:	681b      	ldr	r3, [r3, #0]
   b58de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b58e0:	9301      	str	r3, [sp, #4]
   b58e2:	bd08      	pop	{r3, pc}
   b58e4:	00030240 	.word	0x00030240

000b58e8 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   b58e8:	b508      	push	{r3, lr}
   b58ea:	4b02      	ldr	r3, [pc, #8]	; (b58f4 <spark_variable+0xc>)
   b58ec:	681b      	ldr	r3, [r3, #0]
   b58ee:	681b      	ldr	r3, [r3, #0]
   b58f0:	9301      	str	r3, [sp, #4]
   b58f2:	bd08      	pop	{r3, pc}
   b58f4:	00030244 	.word	0x00030244

000b58f8 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   b58f8:	b508      	push	{r3, lr}
   b58fa:	4b02      	ldr	r3, [pc, #8]	; (b5904 <spark_function+0xc>)
   b58fc:	681b      	ldr	r3, [r3, #0]
   b58fe:	685b      	ldr	r3, [r3, #4]
   b5900:	9301      	str	r3, [sp, #4]
   b5902:	bd08      	pop	{r3, pc}
   b5904:	00030244 	.word	0x00030244

000b5908 <spark_cloud_flag_connected>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b5908:	b508      	push	{r3, lr}
   b590a:	4b02      	ldr	r3, [pc, #8]	; (b5914 <spark_cloud_flag_connected+0xc>)
   b590c:	681b      	ldr	r3, [r3, #0]
   b590e:	695b      	ldr	r3, [r3, #20]
   b5910:	9301      	str	r3, [sp, #4]
   b5912:	bd08      	pop	{r3, pc}
   b5914:	00030244 	.word	0x00030244

000b5918 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   b5918:	b508      	push	{r3, lr}
   b591a:	4b02      	ldr	r3, [pc, #8]	; (b5924 <spark_deviceID+0xc>)
   b591c:	681b      	ldr	r3, [r3, #0]
   b591e:	69db      	ldr	r3, [r3, #28]
   b5920:	9301      	str	r3, [sp, #4]
   b5922:	bd08      	pop	{r3, pc}
   b5924:	00030244 	.word	0x00030244

000b5928 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b5928:	b508      	push	{r3, lr}
   b592a:	4b02      	ldr	r3, [pc, #8]	; (b5934 <spark_send_event+0xc>)
   b592c:	681b      	ldr	r3, [r3, #0]
   b592e:	6a1b      	ldr	r3, [r3, #32]
   b5930:	9301      	str	r3, [sp, #4]
   b5932:	bd08      	pop	{r3, pc}
   b5934:	00030244 	.word	0x00030244

000b5938 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   b5938:	b508      	push	{r3, lr}
   b593a:	4b02      	ldr	r3, [pc, #8]	; (b5944 <spark_subscribe+0xc>)
   b593c:	681b      	ldr	r3, [r3, #0]
   b593e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5940:	9301      	str	r3, [sp, #4]
   b5942:	bd08      	pop	{r3, pc}
   b5944:	00030244 	.word	0x00030244

000b5948 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b5948:	b508      	push	{r3, lr}
   b594a:	4b02      	ldr	r3, [pc, #8]	; (b5954 <spark_set_random_seed_from_cloud_handler+0xc>)
   b594c:	681b      	ldr	r3, [r3, #0]
   b594e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5950:	9301      	str	r3, [sp, #4]
   b5952:	bd08      	pop	{r3, pc}
   b5954:	00030244 	.word	0x00030244

000b5958 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b5958:	b508      	push	{r3, lr}
   b595a:	4b02      	ldr	r3, [pc, #8]	; (b5964 <malloc+0xc>)
   b595c:	681b      	ldr	r3, [r3, #0]
   b595e:	681b      	ldr	r3, [r3, #0]
   b5960:	9301      	str	r3, [sp, #4]
   b5962:	bd08      	pop	{r3, pc}
   b5964:	0003021c 	.word	0x0003021c

000b5968 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b5968:	b508      	push	{r3, lr}
   b596a:	4b02      	ldr	r3, [pc, #8]	; (b5974 <free+0xc>)
   b596c:	681b      	ldr	r3, [r3, #0]
   b596e:	685b      	ldr	r3, [r3, #4]
   b5970:	9301      	str	r3, [sp, #4]
   b5972:	bd08      	pop	{r3, pc}
   b5974:	0003021c 	.word	0x0003021c

000b5978 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b5978:	b508      	push	{r3, lr}
   b597a:	4b02      	ldr	r3, [pc, #8]	; (b5984 <realloc+0xc>)
   b597c:	681b      	ldr	r3, [r3, #0]
   b597e:	689b      	ldr	r3, [r3, #8]
   b5980:	9301      	str	r3, [sp, #4]
   b5982:	bd08      	pop	{r3, pc}
   b5984:	0003021c 	.word	0x0003021c

000b5988 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b5988:	b508      	push	{r3, lr}
   b598a:	4b02      	ldr	r3, [pc, #8]	; (b5994 <vsnprintf+0xc>)
   b598c:	681b      	ldr	r3, [r3, #0]
   b598e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5990:	9301      	str	r3, [sp, #4]
   b5992:	bd08      	pop	{r3, pc}
   b5994:	0003021c 	.word	0x0003021c

000b5998 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b5998:	b508      	push	{r3, lr}
   b599a:	4b02      	ldr	r3, [pc, #8]	; (b59a4 <abort+0xc>)
   b599c:	681b      	ldr	r3, [r3, #0]
   b599e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b59a0:	9301      	str	r3, [sp, #4]
   b59a2:	bd08      	pop	{r3, pc}
   b59a4:	0003021c 	.word	0x0003021c

000b59a8 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b59a8:	b508      	push	{r3, lr}
   b59aa:	4b02      	ldr	r3, [pc, #8]	; (b59b4 <_malloc_r+0xc>)
   b59ac:	681b      	ldr	r3, [r3, #0]
   b59ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b59b0:	9301      	str	r3, [sp, #4]
   b59b2:	bd08      	pop	{r3, pc}
   b59b4:	0003021c 	.word	0x0003021c

000b59b8 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b59b8:	b508      	push	{r3, lr}
   b59ba:	4b02      	ldr	r3, [pc, #8]	; (b59c4 <__errno+0xc>)
   b59bc:	681b      	ldr	r3, [r3, #0]
   b59be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b59c0:	9301      	str	r3, [sp, #4]
   b59c2:	bd08      	pop	{r3, pc}
   b59c4:	0003021c 	.word	0x0003021c

000b59c8 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b59c8:	b508      	push	{r3, lr}
   b59ca:	4b02      	ldr	r3, [pc, #8]	; (b59d4 <__assert_func+0xc>)
   b59cc:	681b      	ldr	r3, [r3, #0]
   b59ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b59d0:	9301      	str	r3, [sp, #4]
   b59d2:	bd08      	pop	{r3, pc}
   b59d4:	0003021c 	.word	0x0003021c

000b59d8 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b59d8:	b508      	push	{r3, lr}
   b59da:	4b02      	ldr	r3, [pc, #8]	; (b59e4 <newlib_impure_ptr_callback+0xc>)
   b59dc:	681b      	ldr	r3, [r3, #0]
   b59de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b59e0:	9301      	str	r3, [sp, #4]
   b59e2:	bd08      	pop	{r3, pc}
   b59e4:	0003021c 	.word	0x0003021c

000b59e8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b59e8:	2200      	movs	r2, #0
   b59ea:	6840      	ldr	r0, [r0, #4]
   b59ec:	4611      	mov	r1, r2
   b59ee:	f7ff bf53 	b.w	b5898 <network_listening>

000b59f2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b59f2:	2200      	movs	r2, #0
   b59f4:	6840      	ldr	r0, [r0, #4]
   b59f6:	4611      	mov	r1, r2
   b59f8:	f7ff bf5e 	b.w	b58b8 <network_get_listen_timeout>

000b59fc <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b59fc:	6840      	ldr	r0, [r0, #4]
   b59fe:	2200      	movs	r2, #0
   b5a00:	f7ff bf52 	b.w	b58a8 <network_set_listen_timeout>

000b5a04 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5a04:	6840      	ldr	r0, [r0, #4]
   b5a06:	2200      	movs	r2, #0
   b5a08:	f081 0101 	eor.w	r1, r1, #1
   b5a0c:	f7ff bf3c 	b.w	b5888 <network_listen>

000b5a10 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5a10:	2300      	movs	r3, #0
   b5a12:	6840      	ldr	r0, [r0, #4]
   b5a14:	461a      	mov	r2, r3
   b5a16:	4619      	mov	r1, r3
   b5a18:	f7ff bf2e 	b.w	b5878 <network_off>

000b5a1c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5a1c:	2300      	movs	r3, #0
   b5a1e:	6840      	ldr	r0, [r0, #4]
   b5a20:	461a      	mov	r2, r3
   b5a22:	4619      	mov	r1, r3
   b5a24:	f7ff bf20 	b.w	b5868 <network_on>

000b5a28 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b5a28:	2200      	movs	r2, #0
   b5a2a:	6840      	ldr	r0, [r0, #4]
   b5a2c:	4611      	mov	r1, r2
   b5a2e:	f7ff bf13 	b.w	b5858 <network_ready>

000b5a32 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5a32:	2200      	movs	r2, #0
   b5a34:	6840      	ldr	r0, [r0, #4]
   b5a36:	4611      	mov	r1, r2
   b5a38:	f7ff befe 	b.w	b5838 <network_connecting>

000b5a3c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5a3c:	6840      	ldr	r0, [r0, #4]
   b5a3e:	2200      	movs	r2, #0
   b5a40:	2102      	movs	r1, #2
   b5a42:	f7ff bf01 	b.w	b5848 <network_disconnect>

000b5a46 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5a46:	2300      	movs	r3, #0
   b5a48:	6840      	ldr	r0, [r0, #4]
   b5a4a:	461a      	mov	r2, r3
   b5a4c:	f7ff beec 	b.w	b5828 <network_connect>

000b5a50 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b5a50:	4b02      	ldr	r3, [pc, #8]	; (b5a5c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b5a52:	2203      	movs	r2, #3
   b5a54:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b5a56:	4a02      	ldr	r2, [pc, #8]	; (b5a60 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b5a58:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b5a5a:	4770      	bx	lr
   b5a5c:	2003e6b8 	.word	0x2003e6b8
   b5a60:	000b9008 	.word	0x000b9008

000b5a64 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b5a64:	b510      	push	{r4, lr}
   b5a66:	4604      	mov	r4, r0
   b5a68:	4608      	mov	r0, r1
{
    _spi = spi;
   b5a6a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b5a6c:	f7ff fe58 	bl	b5720 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b5a70:	2300      	movs	r3, #0
   b5a72:	6063      	str	r3, [r4, #4]
}
   b5a74:	4620      	mov	r0, r4
   b5a76:	bd10      	pop	{r4, pc}

000b5a78 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b5a78:	4b05      	ldr	r3, [pc, #20]	; (b5a90 <_GLOBAL__sub_I_System+0x18>)
   b5a7a:	2202      	movs	r2, #2
   b5a7c:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b5a7e:	4b05      	ldr	r3, [pc, #20]	; (b5a94 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b5a80:	4a05      	ldr	r2, [pc, #20]	; (b5a98 <_GLOBAL__sub_I_System+0x20>)
   b5a82:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5a84:	2000      	movs	r0, #0
   b5a86:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b5a8a:	f7ff be99 	b.w	b57c0 <set_system_mode>
   b5a8e:	bf00      	nop
   b5a90:	2003e6cc 	.word	0x2003e6cc
   b5a94:	2003e6c0 	.word	0x2003e6c0
   b5a98:	ffff0000 	.word	0xffff0000

000b5a9c <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b5a9c:	b510      	push	{r4, lr}
   b5a9e:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b5aa0:	f7fe ff84 	bl	b49ac <strlen>
   b5aa4:	3801      	subs	r0, #1
   b5aa6:	1823      	adds	r3, r4, r0
   b5aa8:	4620      	mov	r0, r4
	while(i<j){
   b5aaa:	4283      	cmp	r3, r0
   b5aac:	d906      	bls.n	b5abc <_Z11str_reversePc+0x20>
		c = *i;
   b5aae:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b5ab0:	7819      	ldrb	r1, [r3, #0]
   b5ab2:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b5ab6:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b5aba:	e7f6      	b.n	b5aaa <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b5abc:	bd10      	pop	{r4, pc}

000b5abe <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b5abe:	b570      	push	{r4, r5, r6, lr}
   b5ac0:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b5ac2:	1e91      	subs	r1, r2, #2
   b5ac4:	2922      	cmp	r1, #34	; 0x22
   b5ac6:	d81d      	bhi.n	b5b04 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b5ac8:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b5aca:	b930      	cbnz	r0, b5ada <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b5acc:	4423      	add	r3, r4
            *ptr++ = '0';
   b5ace:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b5ad0:	429d      	cmp	r5, r3
   b5ad2:	d210      	bcs.n	b5af6 <ultoa+0x38>
            *ptr++ = '0';
   b5ad4:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b5ad8:	e7fa      	b.n	b5ad0 <ultoa+0x12>
            result.quot = a/radix;
   b5ada:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b5ade:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b5ae2:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b5ae4:	2809      	cmp	r0, #9
                *ptr += '0';
   b5ae6:	bf94      	ite	ls
   b5ae8:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b5aea:	3157      	addhi	r1, #87	; 0x57
   b5aec:	b2c9      	uxtb	r1, r1
   b5aee:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b5af2:	4630      	mov	r0, r6
	while(a){
   b5af4:	e7e9      	b.n	b5aca <ultoa+0xc>

	*ptr = '\0';
   b5af6:	2300      	movs	r3, #0
	str_reverse(buffer);
   b5af8:	4620      	mov	r0, r4
	*ptr = '\0';
   b5afa:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b5afc:	f7ff ffce 	bl	b5a9c <_Z11str_reversePc>
	return buffer;
   b5b00:	4620      	mov	r0, r4
}
   b5b02:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b5b04:	2000      	movs	r0, #0
   b5b06:	e7fc      	b.n	b5b02 <ultoa+0x44>

000b5b08 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b5b08:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b5b0a:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b5b0c:	460c      	mov	r4, r1
   b5b0e:	4615      	mov	r5, r2
	if(a<0){
   b5b10:	da0e      	bge.n	b5b30 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b5b12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b5b16:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b5b1a:	bf14      	ite	ne
   b5b1c:	4258      	negne	r0, r3
   b5b1e:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b5b20:	2301      	movs	r3, #1
		*buffer = '-';
   b5b22:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b5b24:	462a      	mov	r2, r5
   b5b26:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b5b28:	f7ff ffc9 	bl	b5abe <ultoa>
	}
	return buffer;
}
   b5b2c:	4620      	mov	r0, r4
   b5b2e:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b5b30:	2301      	movs	r3, #1
   b5b32:	e7f9      	b.n	b5b28 <itoa+0x20>

000b5b34 <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
   b5b34:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   b5b36:	6804      	ldr	r4, [r0, #0]
   b5b38:	6b24      	ldr	r4, [r4, #48]	; 0x30
   b5b3a:	46a4      	mov	ip, r4
    }
   b5b3c:	f85d 4b04 	ldr.w	r4, [sp], #4
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   b5b40:	4760      	bx	ip

000b5b42 <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
   b5b42:	6803      	ldr	r3, [r0, #0]
   b5b44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b5b46:	4718      	bx	r3

000b5b48 <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
   b5b48:	8e80      	ldrh	r0, [r0, #52]	; 0x34
   b5b4a:	4770      	bx	lr

000b5b4c <_ZN3UDP9availableEv>:
    }
    return bound;
}

int UDP::available() {
    return _total - _offset;
   b5b4c:	8f02      	ldrh	r2, [r0, #56]	; 0x38
   b5b4e:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
   b5b50:	1a10      	subs	r0, r2, r0
   b5b52:	4770      	bx	lr

000b5b54 <_ZN3UDP9endPacketEv>:
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   b5b54:	b5f0      	push	{r4, r5, r6, r7, lr}
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   b5b56:	6803      	ldr	r3, [r0, #0]
int UDP::endPacket() {
   b5b58:	b089      	sub	sp, #36	; 0x24
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   b5b5a:	6a9f      	ldr	r7, [r3, #40]	; 0x28

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   b5b5c:	4b0c      	ldr	r3, [pc, #48]	; (b5b90 <_ZN3UDP9endPacketEv+0x3c>)
   b5b5e:	9302      	str	r3, [sp, #8]
   b5b60:	f100 0620 	add.w	r6, r0, #32
int UDP::endPacket() {
   b5b64:	4604      	mov	r4, r0
   b5b66:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b5b68:	ad03      	add	r5, sp, #12
   b5b6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b5b6c:	6833      	ldr	r3, [r6, #0]
   b5b6e:	702b      	strb	r3, [r5, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   b5b70:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   b5b72:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
   b5b74:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   b5b76:	9300      	str	r3, [sp, #0]
   b5b78:	4620      	mov	r0, r4
   b5b7a:	ab02      	add	r3, sp, #8
   b5b7c:	47b8      	blx	r7
    flush(); // wait for send to complete
   b5b7e:	6823      	ldr	r3, [r4, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   b5b80:	4605      	mov	r5, r0
    flush(); // wait for send to complete
   b5b82:	69db      	ldr	r3, [r3, #28]
   b5b84:	4620      	mov	r0, r4
   b5b86:	4798      	blx	r3
    return result;
}
   b5b88:	4628      	mov	r0, r5
   b5b8a:	b009      	add	sp, #36	; 0x24
   b5b8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b5b8e:	bf00      	nop
   b5b90:	000b90f8 	.word	0x000b90f8

000b5b94 <_ZN3UDP5writeEh>:
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   b5b94:	b507      	push	{r0, r1, r2, lr}
    return write(&byte, 1);
   b5b96:	6803      	ldr	r3, [r0, #0]
size_t UDP::write(uint8_t byte) {
   b5b98:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&byte, 1);
   b5b9c:	68db      	ldr	r3, [r3, #12]
   b5b9e:	2201      	movs	r2, #1
   b5ba0:	f10d 0107 	add.w	r1, sp, #7
   b5ba4:	4798      	blx	r3
}
   b5ba6:	b003      	add	sp, #12
   b5ba8:	f85d fb04 	ldr.w	pc, [sp], #4

000b5bac <_ZN3UDP4readEv>:
        }
    }
    return ret;
}

int UDP::read() {
   b5bac:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset++] : -1;
   b5bae:	6803      	ldr	r3, [r0, #0]
   b5bb0:	691b      	ldr	r3, [r3, #16]
int UDP::read() {
   b5bb2:	4604      	mov	r4, r0
    return available() ? _buffer[_offset++] : -1;
   b5bb4:	4798      	blx	r3
   b5bb6:	b128      	cbz	r0, b5bc4 <_ZN3UDP4readEv+0x18>
   b5bb8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   b5bba:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   b5bbc:	1c59      	adds	r1, r3, #1
   b5bbe:	86e1      	strh	r1, [r4, #54]	; 0x36
   b5bc0:	5cd0      	ldrb	r0, [r2, r3]
}
   b5bc2:	bd10      	pop	{r4, pc}
    return available() ? _buffer[_offset++] : -1;
   b5bc4:	f04f 30ff 	mov.w	r0, #4294967295
   b5bc8:	e7fb      	b.n	b5bc2 <_ZN3UDP4readEv+0x16>

000b5bca <_ZN3UDP4peekEv>:
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   b5bca:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
   b5bcc:	6803      	ldr	r3, [r0, #0]
   b5bce:	691b      	ldr	r3, [r3, #16]
int UDP::peek() {
   b5bd0:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
   b5bd2:	4798      	blx	r3
   b5bd4:	b118      	cbz	r0, b5bde <_ZN3UDP4peekEv+0x14>
   b5bd6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   b5bd8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   b5bda:	5cd0      	ldrb	r0, [r2, r3]
}
   b5bdc:	bd10      	pop	{r4, pc}
    return available() ? _buffer[_offset] : -1;
   b5bde:	f04f 30ff 	mov.w	r0, #4294967295
   b5be2:	e7fb      	b.n	b5bdc <_ZN3UDP4peekEv+0x12>

000b5be4 <_ZN3UDP5flushEv>:

void UDP::flush() {
}
   b5be4:	4770      	bx	lr

000b5be6 <_ZNK3UDP7printToER5Print>:
void UDP::flush_buffer() {
    _offset = 0;
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
   b5be6:	b410      	push	{r4}
   b5be8:	4603      	mov	r3, r0
   b5bea:	4608      	mov	r0, r1
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   b5bec:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    int size = _total - _offset;
   b5bee:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
   b5bf0:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
    return p.write(_buffer + _offset, size);
   b5bf2:	6803      	ldr	r3, [r0, #0]
   b5bf4:	1a52      	subs	r2, r2, r1
   b5bf6:	68db      	ldr	r3, [r3, #12]
   b5bf8:	4421      	add	r1, r4
}
   b5bfa:	f85d 4b04 	ldr.w	r4, [sp], #4
    return p.write(_buffer + _offset, size);
   b5bfe:	4718      	bx	r3

000b5c00 <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
   b5c00:	f1a0 0010 	sub.w	r0, r0, #16
   b5c04:	f7ff bfef 	b.w	b5be6 <_ZNK3UDP7printToER5Print>

000b5c08 <_ZN3UDP5beginEtm>:
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   b5c08:	b570      	push	{r4, r5, r6, lr}
    stop();
   b5c0a:	6803      	ldr	r3, [r0, #0]
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   b5c0c:	b08c      	sub	sp, #48	; 0x30
    stop();
   b5c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   b5c10:	4604      	mov	r4, r0
   b5c12:	460e      	mov	r6, r1
   b5c14:	4615      	mov	r5, r2
    stop();
   b5c16:	4798      	blx	r3
    const int one = 1;
   b5c18:	2301      	movs	r3, #1
    struct sockaddr_in6 saddr = {};
   b5c1a:	221c      	movs	r2, #28
   b5c1c:	2100      	movs	r1, #0
   b5c1e:	a805      	add	r0, sp, #20
    const int one = 1;
   b5c20:	9302      	str	r3, [sp, #8]
    struct sockaddr_in6 saddr = {};
   b5c22:	f003 f84f 	bl	b8cc4 <memset>
    saddr.sin6_len = sizeof(saddr);
   b5c26:	f640 231c 	movw	r3, #2588	; 0xa1c
    saddr.sin6_port = htons(port);
   b5c2a:	4630      	mov	r0, r6
    saddr.sin6_len = sizeof(saddr);
   b5c2c:	f8ad 3014 	strh.w	r3, [sp, #20]
    saddr.sin6_port = htons(port);
   b5c30:	f7ff fcae 	bl	b5590 <inet_htons>
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   b5c34:	2211      	movs	r2, #17
    saddr.sin6_port = htons(port);
   b5c36:	f8ad 0016 	strh.w	r0, [sp, #22]
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   b5c3a:	2102      	movs	r1, #2
   b5c3c:	200a      	movs	r0, #10
   b5c3e:	f7ff fd67 	bl	b5710 <sock_socket>
    if (_sock < 0) {
   b5c42:	2800      	cmp	r0, #0
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   b5c44:	6160      	str	r0, [r4, #20]
    if (_sock < 0) {
   b5c46:	db25      	blt.n	b5c94 <_ZN3UDP5beginEtm+0x8c>
    if (sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one))) {
   b5c48:	2204      	movs	r2, #4
   b5c4a:	9200      	str	r2, [sp, #0]
   b5c4c:	ab02      	add	r3, sp, #8
   b5c4e:	f640 71ff 	movw	r1, #4095	; 0xfff
   b5c52:	f7ff fd25 	bl	b56a0 <sock_setsockopt>
   b5c56:	b9e8      	cbnz	r0, b5c94 <_ZN3UDP5beginEtm+0x8c>
    if (nif != 0) {
   b5c58:	b195      	cbz	r5, b5c80 <_ZN3UDP5beginEtm+0x78>
        struct ifreq ifr = {};
   b5c5a:	9003      	str	r0, [sp, #12]
   b5c5c:	f8ad 0010 	strh.w	r0, [sp, #16]
        if (if_index_to_name(nif, ifr.ifr_name)) {
   b5c60:	a903      	add	r1, sp, #12
   b5c62:	b2e8      	uxtb	r0, r5
   b5c64:	f7ff fc54 	bl	b5510 <if_index_to_name>
   b5c68:	b9a0      	cbnz	r0, b5c94 <_ZN3UDP5beginEtm+0x8c>
        if (sock_setsockopt(_sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr))) {
   b5c6a:	2306      	movs	r3, #6
   b5c6c:	9300      	str	r3, [sp, #0]
   b5c6e:	6960      	ldr	r0, [r4, #20]
   b5c70:	ab03      	add	r3, sp, #12
   b5c72:	f241 020b 	movw	r2, #4107	; 0x100b
   b5c76:	f640 71ff 	movw	r1, #4095	; 0xfff
   b5c7a:	f7ff fd11 	bl	b56a0 <sock_setsockopt>
   b5c7e:	b948      	cbnz	r0, b5c94 <_ZN3UDP5beginEtm+0x8c>
    if (sock_bind(_sock, (const struct sockaddr*)&saddr, sizeof(saddr))) {
   b5c80:	6960      	ldr	r0, [r4, #20]
   b5c82:	221c      	movs	r2, #28
   b5c84:	a905      	add	r1, sp, #20
   b5c86:	f7ff fd03 	bl	b5690 <sock_bind>
   b5c8a:	b918      	cbnz	r0, b5c94 <_ZN3UDP5beginEtm+0x8c>
    _nif = nif;
   b5c8c:	6465      	str	r5, [r4, #68]	; 0x44
    bound = true;
   b5c8e:	2001      	movs	r0, #1
}
   b5c90:	b00c      	add	sp, #48	; 0x30
   b5c92:	bd70      	pop	{r4, r5, r6, pc}
        stop();
   b5c94:	6823      	ldr	r3, [r4, #0]
   b5c96:	4620      	mov	r0, r4
   b5c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5c9a:	4798      	blx	r3
   b5c9c:	2000      	movs	r0, #0
   b5c9e:	e7f7      	b.n	b5c90 <_ZN3UDP5beginEtm+0x88>

000b5ca0 <_ZN3UDP4stopEv>:
void UDP::stop() {
   b5ca0:	b510      	push	{r4, lr}
   b5ca2:	4604      	mov	r4, r0
    if (isOpen(_sock)) {
   b5ca4:	6940      	ldr	r0, [r0, #20]
   b5ca6:	2800      	cmp	r0, #0
   b5ca8:	db01      	blt.n	b5cae <_ZN3UDP4stopEv+0xe>
        sock_close(_sock);
   b5caa:	f7ff fd01 	bl	b56b0 <sock_close>
    _sock = -1;
   b5cae:	f04f 33ff 	mov.w	r3, #4294967295
   b5cb2:	6163      	str	r3, [r4, #20]
    _offset = 0;
   b5cb4:	2300      	movs	r3, #0
   b5cb6:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   b5cb8:	8723      	strh	r3, [r4, #56]	; 0x38
}
   b5cba:	bd10      	pop	{r4, pc}

000b5cbc <_ZN3UDP5writeEPKhj>:
size_t UDP::write(const uint8_t *buffer, size_t size) {
   b5cbc:	b570      	push	{r4, r5, r6, lr}
   b5cbe:	4605      	mov	r5, r0
    size_t available = _buffer ? _buffer_size - _offset : 0;
   b5cc0:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   b5cc2:	8eee      	ldrh	r6, [r5, #54]	; 0x36
   b5cc4:	b168      	cbz	r0, b5ce2 <_ZN3UDP5writeEPKhj+0x26>
   b5cc6:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   b5cc8:	1b9c      	subs	r4, r3, r6
    if (size > available) {
   b5cca:	4294      	cmp	r4, r2
   b5ccc:	bf28      	it	cs
   b5cce:	4614      	movcs	r4, r2
    memcpy(_buffer + _offset, buffer, size);
   b5cd0:	4622      	mov	r2, r4
   b5cd2:	4430      	add	r0, r6
   b5cd4:	f002 ffe8 	bl	b8ca8 <memcpy>
    _offset += size;
   b5cd8:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   b5cda:	4423      	add	r3, r4
   b5cdc:	86eb      	strh	r3, [r5, #54]	; 0x36
}
   b5cde:	4620      	mov	r0, r4
   b5ce0:	bd70      	pop	{r4, r5, r6, pc}
    size_t available = _buffer ? _buffer_size - _offset : 0;
   b5ce2:	4604      	mov	r4, r0
   b5ce4:	e7f1      	b.n	b5cca <_ZN3UDP5writeEPKhj+0xe>

000b5ce6 <_ZN3UDP4readEPhj>:
int UDP::read(unsigned char* buffer, size_t len) {
   b5ce6:	b5d0      	push	{r4, r6, r7, lr}
    if (available()) {
   b5ce8:	6803      	ldr	r3, [r0, #0]
   b5cea:	691b      	ldr	r3, [r3, #16]
int UDP::read(unsigned char* buffer, size_t len) {
   b5cec:	4604      	mov	r4, r0
   b5cee:	460f      	mov	r7, r1
   b5cf0:	4616      	mov	r6, r2
    if (available()) {
   b5cf2:	4798      	blx	r3
   b5cf4:	b190      	cbz	r0, b5d1c <_ZN3UDP4readEPhj+0x36>
        read = min(int(len), available());
   b5cf6:	6823      	ldr	r3, [r4, #0]
   b5cf8:	4620      	mov	r0, r4
   b5cfa:	691b      	ldr	r3, [r3, #16]
   b5cfc:	4798      	blx	r3
        memcpy(buffer, &_buffer[_offset], read);
   b5cfe:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   b5d00:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   b5d02:	4286      	cmp	r6, r0
   b5d04:	bfa8      	it	ge
   b5d06:	4606      	movge	r6, r0
   b5d08:	4419      	add	r1, r3
   b5d0a:	4632      	mov	r2, r6
   b5d0c:	4638      	mov	r0, r7
   b5d0e:	f002 ffcb 	bl	b8ca8 <memcpy>
        _offset += read;
   b5d12:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   b5d14:	4433      	add	r3, r6
   b5d16:	86e3      	strh	r3, [r4, #54]	; 0x36
}
   b5d18:	4630      	mov	r0, r6
   b5d1a:	bdd0      	pop	{r4, r6, r7, pc}
    int read = -1;
   b5d1c:	f04f 36ff 	mov.w	r6, #4294967295
    return read;
   b5d20:	e7fa      	b.n	b5d18 <_ZN3UDP4readEPhj+0x32>

000b5d22 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    void set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3);


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
   b5d22:	b530      	push	{r4, r5, lr}
   b5d24:	b087      	sub	sp, #28
   b5d26:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b5d28:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b5d2a:	4668      	mov	r0, sp
   b5d2c:	f000 feea 	bl	b6b04 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b5d30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5d32:	3404      	adds	r4, #4
   b5d34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5d36:	682b      	ldr	r3, [r5, #0]
   b5d38:	7023      	strb	r3, [r4, #0]
    }
   b5d3a:	b007      	add	sp, #28
   b5d3c:	bd30      	pop	{r4, r5, pc}
	...

000b5d40 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   b5d40:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5d42:	4696      	mov	lr, r2
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   b5d44:	6802      	ldr	r2, [r0, #0]
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   b5d46:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   b5d48:	6a97      	ldr	r7, [r2, #40]	; 0x28
class IPAddress : public Printable {
   b5d4a:	4a0a      	ldr	r2, [pc, #40]	; (b5d74 <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
   b5d4c:	9202      	str	r2, [sp, #8]
   b5d4e:	1d1c      	adds	r4, r3, #4
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   b5d50:	468c      	mov	ip, r1
   b5d52:	4606      	mov	r6, r0
   b5d54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b5d56:	ad03      	add	r5, sp, #12
   b5d58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b5d5a:	6823      	ldr	r3, [r4, #0]
   b5d5c:	702b      	strb	r3, [r5, #0]
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   b5d5e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   b5d62:	9300      	str	r3, [sp, #0]
   b5d64:	4672      	mov	r2, lr
   b5d66:	ab02      	add	r3, sp, #8
   b5d68:	4661      	mov	r1, ip
   b5d6a:	4630      	mov	r0, r6
   b5d6c:	47b8      	blx	r7
    }
   b5d6e:	b009      	add	sp, #36	; 0x24
   b5d70:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b5d72:	bf00      	nop
   b5d74:	000b90f8 	.word	0x000b90f8

000b5d78 <_ZN3UDP8remoteIPEv>:
    virtual IPAddress remoteIP() { return _remoteIP; };
   b5d78:	b570      	push	{r4, r5, r6, lr}
   b5d7a:	4604      	mov	r4, r0
   b5d7c:	4b05      	ldr	r3, [pc, #20]	; (b5d94 <_ZN3UDP8remoteIPEv+0x1c>)
   b5d7e:	f844 3b04 	str.w	r3, [r4], #4
   b5d82:	f101 0520 	add.w	r5, r1, #32
   b5d86:	4606      	mov	r6, r0
   b5d88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5d8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5d8c:	682b      	ldr	r3, [r5, #0]
   b5d8e:	7023      	strb	r3, [r4, #0]
   b5d90:	4630      	mov	r0, r6
   b5d92:	bd70      	pop	{r4, r5, r6, pc}
   b5d94:	000b90f8 	.word	0x000b90f8

000b5d98 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>:

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   b5d98:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (saddr->sa_family == AF_INET) {
   b5d9a:	7843      	ldrb	r3, [r0, #1]
   b5d9c:	2b02      	cmp	r3, #2
inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   b5d9e:	b08d      	sub	sp, #52	; 0x34
   b5da0:	4605      	mov	r5, r0
   b5da2:	460c      	mov	r4, r1
   b5da4:	4617      	mov	r7, r2
    if (saddr->sa_family == AF_INET) {
   b5da6:	d104      	bne.n	b5db2 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x1a>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b5da8:	1d01      	adds	r1, r0, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b5daa:	4620      	mov	r0, r4
   b5dac:	f7ff ffb9 	bl	b5d22 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
   b5db0:	e022      	b.n	b5df8 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x60>
    else if (saddr->sa_family == AF_INET6) {
   b5db2:	2b0a      	cmp	r3, #10
   b5db4:	d125      	bne.n	b5e02 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6a>
        HAL_IPAddress a = {};
   b5db6:	2211      	movs	r2, #17
   b5db8:	2100      	movs	r1, #0
   b5dba:	a801      	add	r0, sp, #4
   b5dbc:	f002 ff82 	bl	b8cc4 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b5dc0:	68ab      	ldr	r3, [r5, #8]
   b5dc2:	b303      	cbz	r3, b5e06 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6e>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b5dc4:	f105 0308 	add.w	r3, r5, #8
   b5dc8:	ae01      	add	r6, sp, #4
   b5dca:	f105 0c18 	add.w	ip, r5, #24
   b5dce:	6818      	ldr	r0, [r3, #0]
   b5dd0:	6859      	ldr	r1, [r3, #4]
   b5dd2:	4632      	mov	r2, r6
   b5dd4:	c203      	stmia	r2!, {r0, r1}
   b5dd6:	3308      	adds	r3, #8
   b5dd8:	4563      	cmp	r3, ip
   b5dda:	4616      	mov	r6, r2
   b5ddc:	d1f7      	bne.n	b5dce <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x36>
            a.v = 6;
   b5dde:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b5de0:	a901      	add	r1, sp, #4
   b5de2:	a806      	add	r0, sp, #24
   b5de4:	ae07      	add	r6, sp, #28
            a.v = 6;
   b5de6:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b5dea:	f000 fe55 	bl	b6a98 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b5dee:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b5df0:	3404      	adds	r4, #4
   b5df2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5df4:	6833      	ldr	r3, [r6, #0]
   b5df6:	7023      	strb	r3, [r4, #0]
        }
        if (port) {
   b5df8:	b11f      	cbz	r7, b5e02 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6a>
            *port = ntohs(in6addr->sin6_port);
   b5dfa:	8868      	ldrh	r0, [r5, #2]
   b5dfc:	f7ff fbc0 	bl	b5580 <inet_ntohs>
   b5e00:	8038      	strh	r0, [r7, #0]
        }
    }
#endif // HAL_IPv6
}
   b5e02:	b00d      	add	sp, #52	; 0x34
   b5e04:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b5e06:	68eb      	ldr	r3, [r5, #12]
   b5e08:	2b00      	cmp	r3, #0
   b5e0a:	d1db      	bne.n	b5dc4 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x2c>
   b5e0c:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b5e10:	692e      	ldr	r6, [r5, #16]
   b5e12:	f7ff fbad 	bl	b5570 <inet_htonl>
   b5e16:	4286      	cmp	r6, r0
   b5e18:	d1d4      	bne.n	b5dc4 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x2c>
            addr = (const uint8_t*)(&ptr[3]);
   b5e1a:	f105 0114 	add.w	r1, r5, #20
   b5e1e:	e7c4      	b.n	b5daa <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x12>

000b5e20 <_ZN3UDP11beginPacketEPKct>:
int UDP::beginPacket(const char *host, uint16_t port) {
   b5e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5e24:	4617      	mov	r7, r2
   b5e26:	b08e      	sub	sp, #56	; 0x38
    struct addrinfo* ais = nullptr;
   b5e28:	2200      	movs	r2, #0
int UDP::beginPacket(const char *host, uint16_t port) {
   b5e2a:	4606      	mov	r6, r0
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   b5e2c:	ab01      	add	r3, sp, #4
int UDP::beginPacket(const char *host, uint16_t port) {
   b5e2e:	4608      	mov	r0, r1
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   b5e30:	4611      	mov	r1, r2
    struct addrinfo* ais = nullptr;
   b5e32:	9201      	str	r2, [sp, #4]
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   b5e34:	f7ff fb24 	bl	b5480 <netdb_getaddrinfo>
   b5e38:	1e04      	subs	r4, r0, #0
   b5e3a:	db20      	blt.n	b5e7e <_ZN3UDP11beginPacketEPKct+0x5e>
    if (ais && ais->ai_addr) {
   b5e3c:	9b01      	ldr	r3, [sp, #4]
   b5e3e:	b32b      	cbz	r3, b5e8c <_ZN3UDP11beginPacketEPKct+0x6c>
   b5e40:	695b      	ldr	r3, [r3, #20]
   b5e42:	b31b      	cbz	r3, b5e8c <_ZN3UDP11beginPacketEPKct+0x6c>
        IPAddress addr;
   b5e44:	a802      	add	r0, sp, #8
   b5e46:	f000 fe19 	bl	b6a7c <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b5e4a:	9b01      	ldr	r3, [sp, #4]
   b5e4c:	2200      	movs	r2, #0
   b5e4e:	6958      	ldr	r0, [r3, #20]
   b5e50:	a902      	add	r1, sp, #8
   b5e52:	f7ff ffa1 	bl	b5d98 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
        return static_cast<const IPAddress*>(this)->operator bool();
   b5e56:	a802      	add	r0, sp, #8
   b5e58:	f000 fe30 	bl	b6abc <_ZNK9IPAddresscvbEv>
        if (addr) {
   b5e5c:	b1b0      	cbz	r0, b5e8c <_ZN3UDP11beginPacketEPKct+0x6c>
            return beginPacket(addr, port);
   b5e5e:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b5e60:	ad03      	add	r5, sp, #12
   b5e62:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
   b5e66:	4b0b      	ldr	r3, [pc, #44]	; (b5e94 <_ZN3UDP11beginPacketEPKct+0x74>)
   b5e68:	9308      	str	r3, [sp, #32]
   b5e6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5e6c:	ac09      	add	r4, sp, #36	; 0x24
   b5e6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5e70:	682b      	ldr	r3, [r5, #0]
   b5e72:	7023      	strb	r3, [r4, #0]
   b5e74:	463a      	mov	r2, r7
   b5e76:	a908      	add	r1, sp, #32
   b5e78:	4630      	mov	r0, r6
   b5e7a:	47c0      	blx	r8
   b5e7c:	4604      	mov	r4, r0
    SCOPE_GUARD({
   b5e7e:	9801      	ldr	r0, [sp, #4]
   b5e80:	f7ff faf6 	bl	b5470 <netdb_freeaddrinfo>
}
   b5e84:	4620      	mov	r0, r4
   b5e86:	b00e      	add	sp, #56	; 0x38
   b5e88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return -1;
   b5e8c:	f04f 34ff 	mov.w	r4, #4294967295
   b5e90:	e7f5      	b.n	b5e7e <_ZN3UDP11beginPacketEPKct+0x5e>
   b5e92:	bf00      	nop
   b5e94:	000b90f8 	.word	0x000b90f8

000b5e98 <_ZN3UDP13receivePacketEPhjm>:
int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   b5e98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (isOpen(_sock) && buffer) {
   b5e9c:	f8d0 9014 	ldr.w	r9, [r0, #20]
   b5ea0:	f1b9 0f00 	cmp.w	r9, #0
int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   b5ea4:	b090      	sub	sp, #64	; 0x40
   b5ea6:	4605      	mov	r5, r0
   b5ea8:	460e      	mov	r6, r1
   b5eaa:	4690      	mov	r8, r2
   b5eac:	461c      	mov	r4, r3
    if (isOpen(_sock) && buffer) {
   b5eae:	db3c      	blt.n	b5f2a <_ZN3UDP13receivePacketEPhjm+0x92>
   b5eb0:	2900      	cmp	r1, #0
   b5eb2:	d03a      	beq.n	b5f2a <_ZN3UDP13receivePacketEPhjm+0x92>
        sockaddr_storage saddr = {};
   b5eb4:	f04f 0a1c 	mov.w	sl, #28
   b5eb8:	af09      	add	r7, sp, #36	; 0x24
   b5eba:	4652      	mov	r2, sl
   b5ebc:	2100      	movs	r1, #0
   b5ebe:	4638      	mov	r0, r7
   b5ec0:	f002 ff00 	bl	b8cc4 <memset>
        socklen_t slen = sizeof(saddr);
   b5ec4:	f8cd a00c 	str.w	sl, [sp, #12]
        if (timeout == 0) {
   b5ec8:	b1dc      	cbz	r4, b5f02 <_ZN3UDP13receivePacketEPhjm+0x6a>
            tv.tv_sec = timeout / 1000;
   b5eca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5ece:	fbb4 f2f3 	udiv	r2, r4, r3
            tv.tv_usec = (timeout % 1000) * 1000;
   b5ed2:	fb03 4412 	mls	r4, r3, r2, r4
            struct timeval tv = {};
   b5ed6:	2100      	movs	r1, #0
            tv.tv_usec = (timeout % 1000) * 1000;
   b5ed8:	435c      	muls	r4, r3
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   b5eda:	2310      	movs	r3, #16
            tv.tv_sec = timeout / 1000;
   b5edc:	e9cd 2104 	strd	r2, r1, [sp, #16]
            struct timeval tv = {};
   b5ee0:	9107      	str	r1, [sp, #28]
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   b5ee2:	9300      	str	r3, [sp, #0]
   b5ee4:	f241 0206 	movw	r2, #4102	; 0x1006
   b5ee8:	446b      	add	r3, sp
   b5eea:	f640 71ff 	movw	r1, #4095	; 0xfff
   b5eee:	4648      	mov	r0, r9
            tv.tv_usec = (timeout % 1000) * 1000;
   b5ef0:	9406      	str	r4, [sp, #24]
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   b5ef2:	f7ff fbd5 	bl	b56a0 <sock_setsockopt>
            if (ret) {
   b5ef6:	4604      	mov	r4, r0
   b5ef8:	b120      	cbz	r0, b5f04 <_ZN3UDP13receivePacketEPhjm+0x6c>
}
   b5efa:	4620      	mov	r0, r4
   b5efc:	b010      	add	sp, #64	; 0x40
   b5efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            flags = MSG_DONTWAIT;
   b5f02:	2408      	movs	r4, #8
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   b5f04:	ab03      	add	r3, sp, #12
   b5f06:	e9cd 7300 	strd	r7, r3, [sp]
   b5f0a:	6968      	ldr	r0, [r5, #20]
   b5f0c:	4623      	mov	r3, r4
   b5f0e:	4642      	mov	r2, r8
   b5f10:	4631      	mov	r1, r6
   b5f12:	f7ff fbe5 	bl	b56e0 <sock_recvfrom>
        if (ret >= 0) {
   b5f16:	1e04      	subs	r4, r0, #0
   b5f18:	dbef      	blt.n	b5efa <_ZN3UDP13receivePacketEPhjm+0x62>
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
   b5f1a:	f105 0234 	add.w	r2, r5, #52	; 0x34
   b5f1e:	f105 011c 	add.w	r1, r5, #28
   b5f22:	4638      	mov	r0, r7
   b5f24:	f7ff ff38 	bl	b5d98 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
            LOG_DEBUG(TRACE, "received %d bytes from %s#%d", ret, _remoteIP.toString().c_str(), _remotePort);
   b5f28:	e7e7      	b.n	b5efa <_ZN3UDP13receivePacketEPhjm+0x62>
    int ret = -1;
   b5f2a:	f04f 34ff 	mov.w	r4, #4294967295
   b5f2e:	e7e4      	b.n	b5efa <_ZN3UDP13receivePacketEPhjm+0x62>

000b5f30 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>:

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   b5f30:	b538      	push	{r3, r4, r5, lr}
   b5f32:	4605      	mov	r5, r0
   b5f34:	4614      	mov	r4, r2

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b5f36:	7d2b      	ldrb	r3, [r5, #20]
    if (addr.version() == 6) {
   b5f38:	2b06      	cmp	r3, #6
inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   b5f3a:	4608      	mov	r0, r1
    if (addr.version() == 6) {
   b5f3c:	d110      	bne.n	b5f60 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x30>
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
   b5f3e:	f640 231c 	movw	r3, #2588	; 0xa1c
   b5f42:	8013      	strh	r3, [r2, #0]
        in6addr->sin6_family = AF_INET6;
        in6addr->sin6_port = htons(port);
   b5f44:	f7ff fb24 	bl	b5590 <inet_htons>
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   b5f48:	3408      	adds	r4, #8
   b5f4a:	1d2b      	adds	r3, r5, #4
        in6addr->sin6_port = htons(port);
   b5f4c:	f824 0c06 	strh.w	r0, [r4, #-6]
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   b5f50:	3514      	adds	r5, #20
   b5f52:	f853 2b04 	ldr.w	r2, [r3], #4
   b5f56:	f844 2b04 	str.w	r2, [r4], #4
   b5f5a:	42ab      	cmp	r3, r5
   b5f5c:	d1f9      	bne.n	b5f52 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x22>
        const auto& a = addr.raw();
        // NOTE: HAL_IPAddress.ipv4 is host-order :|
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
    }
#endif // HAL_IPv6
}
   b5f5e:	bd38      	pop	{r3, r4, r5, pc}
    else if (addr.version() == 4) {
   b5f60:	2b04      	cmp	r3, #4
   b5f62:	d1fc      	bne.n	b5f5e <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x2e>
        inaddr->sin_len = sizeof(sockaddr_in);
   b5f64:	f44f 7304 	mov.w	r3, #528	; 0x210
   b5f68:	8013      	strh	r3, [r2, #0]
        inaddr->sin_port = htons(port);
   b5f6a:	f7ff fb11 	bl	b5590 <inet_htons>
   b5f6e:	8060      	strh	r0, [r4, #2]
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
   b5f70:	6868      	ldr	r0, [r5, #4]
   b5f72:	f7ff fafd 	bl	b5570 <inet_htonl>
   b5f76:	6060      	str	r0, [r4, #4]
}
   b5f78:	e7f1      	b.n	b5f5e <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x2e>

000b5f7a <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   b5f7a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5f7e:	b08b      	sub	sp, #44	; 0x2c
	sockaddr_storage s = {};
   b5f80:	af03      	add	r7, sp, #12
   b5f82:	f04f 091c 	mov.w	r9, #28
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   b5f86:	4698      	mov	r8, r3
   b5f88:	4604      	mov	r4, r0
   b5f8a:	460d      	mov	r5, r1
   b5f8c:	4616      	mov	r6, r2
	sockaddr_storage s = {};
   b5f8e:	2100      	movs	r1, #0
   b5f90:	464a      	mov	r2, r9
   b5f92:	4638      	mov	r0, r7
   b5f94:	f002 fe96 	bl	b8cc4 <memset>
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
   b5f98:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
   b5f9c:	463a      	mov	r2, r7
   b5f9e:	4640      	mov	r0, r8
   b5fa0:	f7ff ffc6 	bl	b5f30 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_UNSPEC) {
   b5fa4:	f89d 300d 	ldrb.w	r3, [sp, #13]
   b5fa8:	b153      	cbz	r3, b5fc0 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x46>
    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
   b5faa:	e9cd 7900 	strd	r7, r9, [sp]
   b5fae:	6960      	ldr	r0, [r4, #20]
   b5fb0:	2300      	movs	r3, #0
   b5fb2:	4632      	mov	r2, r6
   b5fb4:	4629      	mov	r1, r5
   b5fb6:	f7ff fba3 	bl	b5700 <sock_sendto>
}
   b5fba:	b00b      	add	sp, #44	; 0x2c
   b5fbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return -1;
   b5fc0:	f04f 30ff 	mov.w	r0, #4294967295
   b5fc4:	e7f9      	b.n	b5fba <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x40>
	...

000b5fc8 <_ZN3UDPC1Ev>:
UDP::UDP()
   b5fc8:	b538      	push	{r3, r4, r5, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b5fca:	2500      	movs	r5, #0
   b5fcc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5fd0:	e9c0 5301 	strd	r5, r3, [r0, #4]
          _buffer_allocated(false) {
   b5fd4:	4b0b      	ldr	r3, [pc, #44]	; (b6004 <_ZN3UDPC1Ev+0x3c>)
   b5fd6:	f103 0208 	add.w	r2, r3, #8
   b5fda:	336c      	adds	r3, #108	; 0x6c
   b5fdc:	6103      	str	r3, [r0, #16]
   b5fde:	f04f 33ff 	mov.w	r3, #4294967295
UDP::UDP()
   b5fe2:	4604      	mov	r4, r0
          _buffer_allocated(false) {
   b5fe4:	6002      	str	r2, [r0, #0]
   b5fe6:	6143      	str	r3, [r0, #20]
   b5fe8:	301c      	adds	r0, #28
   b5fea:	f000 fd47 	bl	b6a7c <_ZN9IPAddressC1Ev>
   b5fee:	f44f 7300 	mov.w	r3, #512	; 0x200
   b5ff2:	e9c4 3510 	strd	r3, r5, [r4, #64]	; 0x40
   b5ff6:	86e5      	strh	r5, [r4, #54]	; 0x36
   b5ff8:	8725      	strh	r5, [r4, #56]	; 0x38
   b5ffa:	63e5      	str	r5, [r4, #60]	; 0x3c
   b5ffc:	f884 5048 	strb.w	r5, [r4, #72]	; 0x48
}
   b6000:	4620      	mov	r0, r4
   b6002:	bd38      	pop	{r3, r4, r5, pc}
   b6004:	000b903c 	.word	0x000b903c

000b6008 <_ZN3UDP13releaseBufferEv>:
void UDP::releaseBuffer() {
   b6008:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
   b600a:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
void UDP::releaseBuffer() {
   b600e:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
   b6010:	b123      	cbz	r3, b601c <_ZN3UDP13releaseBufferEv+0x14>
   b6012:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   b6014:	b110      	cbz	r0, b601c <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
   b6016:	2101      	movs	r1, #1
   b6018:	f7fe fd0f 	bl	b4a3a <_ZdlPvj>
    _buffer = NULL;
   b601c:	2300      	movs	r3, #0
   b601e:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
   b6020:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
   b6024:	6423      	str	r3, [r4, #64]	; 0x40
    _offset = 0;
   b6026:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   b6028:	8723      	strh	r3, [r4, #56]	; 0x38
}
   b602a:	bd10      	pop	{r4, pc}

000b602c <_ZN3UDP9setBufferEjPh>:
bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
   b602c:	b570      	push	{r4, r5, r6, lr}
   b602e:	4604      	mov	r4, r0
   b6030:	4616      	mov	r6, r2
   b6032:	460d      	mov	r5, r1
    releaseBuffer();
   b6034:	f7ff ffe8 	bl	b6008 <_ZN3UDP13releaseBufferEv>
    _buffer_size = 0;
   b6038:	2300      	movs	r3, #0
    _buffer = buffer;
   b603a:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
   b603c:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
   b603e:	b12e      	cbz	r6, b604c <_ZN3UDP9setBufferEjPh+0x20>
        _buffer_size = buf_size;
   b6040:	6425      	str	r5, [r4, #64]	; 0x40
    return _buffer_size;
   b6042:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
   b6044:	3800      	subs	r0, #0
   b6046:	bf18      	it	ne
   b6048:	2001      	movne	r0, #1
   b604a:	bd70      	pop	{r4, r5, r6, pc}
    if (!_buffer && buf_size) {         // requested allocation
   b604c:	2d00      	cmp	r5, #0
   b604e:	d0f8      	beq.n	b6042 <_ZN3UDP9setBufferEjPh+0x16>
        _buffer = new uint8_t[buf_size];
   b6050:	4628      	mov	r0, r5
   b6052:	f7fe fcf0 	bl	b4a36 <_Znaj>
        _buffer_allocated = true;
   b6056:	2301      	movs	r3, #1
        _buffer = new uint8_t[buf_size];
   b6058:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
   b605a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    if (_buffer) {
   b605e:	2800      	cmp	r0, #0
   b6060:	d0ef      	beq.n	b6042 <_ZN3UDP9setBufferEjPh+0x16>
   b6062:	e7ed      	b.n	b6040 <_ZN3UDP9setBufferEjPh+0x14>

000b6064 <_ZN3UDP11beginPacketE9IPAddresst>:
int UDP::beginPacket(IPAddress ip, uint16_t port) {
   b6064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6066:	4617      	mov	r7, r2
    if (!_buffer && _buffer_size) {
   b6068:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
int UDP::beginPacket(IPAddress ip, uint16_t port) {
   b606a:	4605      	mov	r5, r0
   b606c:	460c      	mov	r4, r1
    if (!_buffer && _buffer_size) {
   b606e:	b91a      	cbnz	r2, b6078 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
   b6070:	6c01      	ldr	r1, [r0, #64]	; 0x40
   b6072:	b109      	cbz	r1, b6078 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
   b6074:	f7ff ffda 	bl	b602c <_ZN3UDP9setBufferEjPh>
class IPAddress : public Printable {
   b6078:	3404      	adds	r4, #4
   b607a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b607c:	f105 0620 	add.w	r6, r5, #32
   b6080:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b6082:	6823      	ldr	r3, [r4, #0]
   b6084:	7033      	strb	r3, [r6, #0]
    _offset = 0;
   b6086:	2300      	movs	r3, #0
}
   b6088:	6c28      	ldr	r0, [r5, #64]	; 0x40
    _remotePort = port;
   b608a:	86af      	strh	r7, [r5, #52]	; 0x34
    _offset = 0;
   b608c:	86eb      	strh	r3, [r5, #54]	; 0x36
    _total = 0;
   b608e:	872b      	strh	r3, [r5, #56]	; 0x38
}
   b6090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6092 <_ZN3UDP11parsePacketEm>:
int UDP::parsePacket(system_tick_t timeout) {
   b6092:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (!_buffer && _buffer_size) {
   b6094:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
int UDP::parsePacket(system_tick_t timeout) {
   b6096:	4604      	mov	r4, r0
   b6098:	460b      	mov	r3, r1
    if (!_buffer && _buffer_size) {
   b609a:	b92a      	cbnz	r2, b60a8 <_ZN3UDP11parsePacketEm+0x16>
   b609c:	6c01      	ldr	r1, [r0, #64]	; 0x40
   b609e:	b119      	cbz	r1, b60a8 <_ZN3UDP11parsePacketEm+0x16>
   b60a0:	9301      	str	r3, [sp, #4]
        setBuffer(_buffer_size);
   b60a2:	f7ff ffc3 	bl	b602c <_ZN3UDP9setBufferEjPh>
   b60a6:	9b01      	ldr	r3, [sp, #4]
    if (_buffer && _buffer_size) {
   b60a8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    _offset = 0;
   b60aa:	2200      	movs	r2, #0
   b60ac:	86e2      	strh	r2, [r4, #54]	; 0x36
    _total = 0;
   b60ae:	8722      	strh	r2, [r4, #56]	; 0x38
    if (_buffer && _buffer_size) {
   b60b0:	b141      	cbz	r1, b60c4 <_ZN3UDP11parsePacketEm+0x32>
   b60b2:	6c22      	ldr	r2, [r4, #64]	; 0x40
   b60b4:	b132      	cbz	r2, b60c4 <_ZN3UDP11parsePacketEm+0x32>
        int result = receivePacket(_buffer, _buffer_size, timeout);
   b60b6:	6820      	ldr	r0, [r4, #0]
   b60b8:	6b05      	ldr	r5, [r0, #48]	; 0x30
   b60ba:	4620      	mov	r0, r4
   b60bc:	47a8      	blx	r5
        if (result > 0) {
   b60be:	2800      	cmp	r0, #0
            _total = result;
   b60c0:	bfc8      	it	gt
   b60c2:	8720      	strhgt	r0, [r4, #56]	; 0x38
    return available();
   b60c4:	6823      	ldr	r3, [r4, #0]
   b60c6:	691b      	ldr	r3, [r3, #16]
   b60c8:	4620      	mov	r0, r4
}
   b60ca:	b003      	add	sp, #12
   b60cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return available();
   b60d0:	4718      	bx	r3
	...

000b60d4 <_ZN3UDPD1Ev>:
    virtual ~UDP() { stop(); releaseBuffer(); }
   b60d4:	b510      	push	{r4, lr}
   b60d6:	4b07      	ldr	r3, [pc, #28]	; (b60f4 <_ZN3UDPD1Ev+0x20>)
   b60d8:	f103 0208 	add.w	r2, r3, #8
   b60dc:	336c      	adds	r3, #108	; 0x6c
   b60de:	4604      	mov	r4, r0
   b60e0:	6002      	str	r2, [r0, #0]
   b60e2:	6103      	str	r3, [r0, #16]
   b60e4:	f7ff fddc 	bl	b5ca0 <_ZN3UDP4stopEv>
   b60e8:	4620      	mov	r0, r4
   b60ea:	f7ff ff8d 	bl	b6008 <_ZN3UDP13releaseBufferEv>
   b60ee:	4620      	mov	r0, r4
   b60f0:	bd10      	pop	{r4, pc}
   b60f2:	bf00      	nop
   b60f4:	000b903c 	.word	0x000b903c

000b60f8 <_ZN3UDPD0Ev>:
   b60f8:	b510      	push	{r4, lr}
   b60fa:	4604      	mov	r4, r0
   b60fc:	f7ff ffea 	bl	b60d4 <_ZN3UDPD1Ev>
   b6100:	4620      	mov	r0, r4
   b6102:	214c      	movs	r1, #76	; 0x4c
   b6104:	f7fe fc99 	bl	b4a3a <_ZdlPvj>
   b6108:	4620      	mov	r0, r4
   b610a:	bd10      	pop	{r4, pc}

000b610c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b610c:	b510      	push	{r4, lr}
   b610e:	4604      	mov	r4, r0
{
	free(buffer);
   b6110:	6800      	ldr	r0, [r0, #0]
   b6112:	f7ff fc29 	bl	b5968 <free>
}
   b6116:	4620      	mov	r0, r4
   b6118:	bd10      	pop	{r4, pc}

000b611a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b611a:	b510      	push	{r4, lr}
   b611c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b611e:	6800      	ldr	r0, [r0, #0]
   b6120:	b108      	cbz	r0, b6126 <_ZN6String10invalidateEv+0xc>
   b6122:	f7ff fc21 	bl	b5968 <free>
	buffer = NULL;
   b6126:	2300      	movs	r3, #0
	capacity = len = 0;
   b6128:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b612c:	6023      	str	r3, [r4, #0]
}
   b612e:	bd10      	pop	{r4, pc}

000b6130 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b6130:	b538      	push	{r3, r4, r5, lr}
   b6132:	4604      	mov	r4, r0
   b6134:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b6136:	6800      	ldr	r0, [r0, #0]
   b6138:	3101      	adds	r1, #1
   b613a:	f7ff fc1d 	bl	b5978 <realloc>
	if (newbuffer) {
   b613e:	b110      	cbz	r0, b6146 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b6140:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b6144:	2001      	movs	r0, #1
	}
	return 0;
}
   b6146:	bd38      	pop	{r3, r4, r5, pc}

000b6148 <_ZN6String7reserveEj>:
{
   b6148:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b614a:	6803      	ldr	r3, [r0, #0]
{
   b614c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b614e:	b123      	cbz	r3, b615a <_ZN6String7reserveEj+0x12>
   b6150:	6843      	ldr	r3, [r0, #4]
   b6152:	428b      	cmp	r3, r1
   b6154:	d301      	bcc.n	b615a <_ZN6String7reserveEj+0x12>
   b6156:	2001      	movs	r0, #1
}
   b6158:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b615a:	4620      	mov	r0, r4
   b615c:	f7ff ffe8 	bl	b6130 <_ZN6String12changeBufferEj>
   b6160:	2800      	cmp	r0, #0
   b6162:	d0f9      	beq.n	b6158 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b6164:	68a3      	ldr	r3, [r4, #8]
   b6166:	2b00      	cmp	r3, #0
   b6168:	d1f5      	bne.n	b6156 <_ZN6String7reserveEj+0xe>
   b616a:	6822      	ldr	r2, [r4, #0]
   b616c:	7013      	strb	r3, [r2, #0]
   b616e:	e7f2      	b.n	b6156 <_ZN6String7reserveEj+0xe>

000b6170 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b6170:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6172:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b6174:	4611      	mov	r1, r2
   b6176:	9201      	str	r2, [sp, #4]
{
   b6178:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b617a:	f7ff ffe5 	bl	b6148 <_ZN6String7reserveEj>
   b617e:	9a01      	ldr	r2, [sp, #4]
   b6180:	b928      	cbnz	r0, b618e <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b6182:	4620      	mov	r0, r4
   b6184:	f7ff ffc9 	bl	b611a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b6188:	4620      	mov	r0, r4
   b618a:	b003      	add	sp, #12
   b618c:	bd30      	pop	{r4, r5, pc}
	len = length;
   b618e:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b6190:	4629      	mov	r1, r5
   b6192:	6820      	ldr	r0, [r4, #0]
   b6194:	f002 fd88 	bl	b8ca8 <memcpy>
	buffer[len] = 0;
   b6198:	6822      	ldr	r2, [r4, #0]
   b619a:	68a3      	ldr	r3, [r4, #8]
   b619c:	2100      	movs	r1, #0
   b619e:	54d1      	strb	r1, [r2, r3]
	return *this;
   b61a0:	e7f2      	b.n	b6188 <_ZN6String4copyEPKcj+0x18>

000b61a2 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b61a2:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b61a4:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b61a6:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b61aa:	4604      	mov	r4, r0
	len = 0;
   b61ac:	6083      	str	r3, [r0, #8]
	flags = 0;
   b61ae:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b61b0:	b141      	cbz	r1, b61c4 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b61b2:	4608      	mov	r0, r1
   b61b4:	9101      	str	r1, [sp, #4]
   b61b6:	f7fe fbf9 	bl	b49ac <strlen>
   b61ba:	9901      	ldr	r1, [sp, #4]
   b61bc:	4602      	mov	r2, r0
   b61be:	4620      	mov	r0, r4
   b61c0:	f7ff ffd6 	bl	b6170 <_ZN6String4copyEPKcj>
}
   b61c4:	4620      	mov	r0, r4
   b61c6:	b002      	add	sp, #8
   b61c8:	bd10      	pop	{r4, pc}

000b61ca <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b61ca:	4288      	cmp	r0, r1
{
   b61cc:	b510      	push	{r4, lr}
   b61ce:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b61d0:	d005      	beq.n	b61de <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b61d2:	680b      	ldr	r3, [r1, #0]
   b61d4:	b12b      	cbz	r3, b61e2 <_ZN6StringaSERKS_+0x18>
   b61d6:	688a      	ldr	r2, [r1, #8]
   b61d8:	4619      	mov	r1, r3
   b61da:	f7ff ffc9 	bl	b6170 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b61de:	4620      	mov	r0, r4
   b61e0:	bd10      	pop	{r4, pc}
	else invalidate();
   b61e2:	f7ff ff9a 	bl	b611a <_ZN6String10invalidateEv>
   b61e6:	e7fa      	b.n	b61de <_ZN6StringaSERKS_+0x14>

000b61e8 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b61e8:	b510      	push	{r4, lr}
	buffer = NULL;
   b61ea:	2300      	movs	r3, #0
String::String(const String &value)
   b61ec:	4604      	mov	r4, r0
	capacity = 0;
   b61ee:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b61f2:	6083      	str	r3, [r0, #8]
	flags = 0;
   b61f4:	7303      	strb	r3, [r0, #12]
	*this = value;
   b61f6:	f7ff ffe8 	bl	b61ca <_ZN6StringaSERKS_>
}
   b61fa:	4620      	mov	r0, r4
   b61fc:	bd10      	pop	{r4, pc}

000b61fe <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b61fe:	b513      	push	{r0, r1, r4, lr}
   b6200:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b6202:	b159      	cbz	r1, b621c <_ZN6StringaSEPKc+0x1e>
   b6204:	4608      	mov	r0, r1
   b6206:	9101      	str	r1, [sp, #4]
   b6208:	f7fe fbd0 	bl	b49ac <strlen>
   b620c:	9901      	ldr	r1, [sp, #4]
   b620e:	4602      	mov	r2, r0
   b6210:	4620      	mov	r0, r4
   b6212:	f7ff ffad 	bl	b6170 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b6216:	4620      	mov	r0, r4
   b6218:	b002      	add	sp, #8
   b621a:	bd10      	pop	{r4, pc}
	else invalidate();
   b621c:	f7ff ff7d 	bl	b611a <_ZN6String10invalidateEv>
   b6220:	e7f9      	b.n	b6216 <_ZN6StringaSEPKc+0x18>

000b6222 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b6222:	b510      	push	{r4, lr}
   b6224:	4604      	mov	r4, r0
   b6226:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b6228:	2300      	movs	r3, #0
	capacity = 0;
   b622a:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b622e:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b6230:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b6232:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b6234:	a901      	add	r1, sp, #4
   b6236:	f7ff fc67 	bl	b5b08 <itoa>
	*this = buf;
   b623a:	a901      	add	r1, sp, #4
   b623c:	4620      	mov	r0, r4
   b623e:	f7ff ffde 	bl	b61fe <_ZN6StringaSEPKc>
}
   b6242:	4620      	mov	r0, r4
   b6244:	b00a      	add	sp, #40	; 0x28
   b6246:	bd10      	pop	{r4, pc}

000b6248 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   b6248:	6800      	ldr	r0, [r0, #0]
   b624a:	b108      	cbz	r0, b6250 <_ZNK6String5toIntEv+0x8>
   b624c:	f002 bd20 	b.w	b8c90 <atol>
	return 0;
}
   b6250:	4770      	bx	lr

000b6252 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b6252:	b513      	push	{r0, r1, r4, lr}
   b6254:	460b      	mov	r3, r1
   b6256:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6258:	e9d0 0100 	ldrd	r0, r1, [r0]
   b625c:	466c      	mov	r4, sp
   b625e:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b6262:	e893 0003 	ldmia.w	r3, {r0, r1}
   b6266:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b626a:	e894 0003 	ldmia.w	r4, {r0, r1}
   b626e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b6272:	b002      	add	sp, #8
   b6274:	bd10      	pop	{r4, pc}
	...

000b6278 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b6278:	4802      	ldr	r0, [pc, #8]	; (b6284 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b627a:	2300      	movs	r3, #0
   b627c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b627e:	f7ff b967 	b.w	b5550 <os_mutex_recursive_create>
   b6282:	bf00      	nop
   b6284:	2003e6d0 	.word	0x2003e6d0

000b6288 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b6288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b628a:	4606      	mov	r6, r0
   b628c:	460d      	mov	r5, r1
  size_t n = 0;
   b628e:	188f      	adds	r7, r1, r2
   b6290:	2400      	movs	r4, #0
  while (size--) {
   b6292:	42bd      	cmp	r5, r7
   b6294:	d00c      	beq.n	b62b0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b6296:	6833      	ldr	r3, [r6, #0]
   b6298:	f815 1b01 	ldrb.w	r1, [r5], #1
   b629c:	689b      	ldr	r3, [r3, #8]
   b629e:	4630      	mov	r0, r6
   b62a0:	4798      	blx	r3
     if (chunk>=0)
   b62a2:	1e03      	subs	r3, r0, #0
   b62a4:	db01      	blt.n	b62aa <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b62a6:	441c      	add	r4, r3
  while (size--) {
   b62a8:	e7f3      	b.n	b6292 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b62aa:	2c00      	cmp	r4, #0
   b62ac:	bf08      	it	eq
   b62ae:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b62b0:	4620      	mov	r0, r4
   b62b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b62b4 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b62b4:	b513      	push	{r0, r1, r4, lr}
   b62b6:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b62b8:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b62ba:	b159      	cbz	r1, b62d4 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b62bc:	9101      	str	r1, [sp, #4]
   b62be:	f7fe fb75 	bl	b49ac <strlen>
   b62c2:	6823      	ldr	r3, [r4, #0]
   b62c4:	9901      	ldr	r1, [sp, #4]
   b62c6:	68db      	ldr	r3, [r3, #12]
   b62c8:	4602      	mov	r2, r0
   b62ca:	4620      	mov	r0, r4
    }
   b62cc:	b002      	add	sp, #8
   b62ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b62d2:	4718      	bx	r3
    }
   b62d4:	b002      	add	sp, #8
   b62d6:	bd10      	pop	{r4, pc}

000b62d8 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b62d8:	6803      	ldr	r3, [r0, #0]
   b62da:	689b      	ldr	r3, [r3, #8]
   b62dc:	4718      	bx	r3

000b62de <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b62de:	b530      	push	{r4, r5, lr}
   b62e0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b62e2:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b62e4:	2a01      	cmp	r2, #1
  *str = '\0';
   b62e6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b62ea:	bf98      	it	ls
   b62ec:	220a      	movls	r2, #10
   b62ee:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b62f0:	460d      	mov	r5, r1
   b62f2:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b62f6:	fb01 5312 	mls	r3, r1, r2, r5
   b62fa:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b62fe:	2b09      	cmp	r3, #9
   b6300:	bf94      	ite	ls
   b6302:	3330      	addls	r3, #48	; 0x30
   b6304:	3337      	addhi	r3, #55	; 0x37
   b6306:	b2db      	uxtb	r3, r3
  } while(n);
   b6308:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b630a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b630e:	d9ef      	bls.n	b62f0 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b6310:	4621      	mov	r1, r4
   b6312:	f7ff ffcf 	bl	b62b4 <_ZN5Print5writeEPKc>
}
   b6316:	b00b      	add	sp, #44	; 0x2c
   b6318:	bd30      	pop	{r4, r5, pc}
	...

000b631c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b631c:	4b01      	ldr	r3, [pc, #4]	; (b6324 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b631e:	4a02      	ldr	r2, [pc, #8]	; (b6328 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b6320:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b6322:	4770      	bx	lr
   b6324:	2003e6d4 	.word	0x2003e6d4
   b6328:	000b90b4 	.word	0x000b90b4

000b632c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b632c:	4b02      	ldr	r3, [pc, #8]	; (b6338 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b632e:	681a      	ldr	r2, [r3, #0]
   b6330:	4b02      	ldr	r3, [pc, #8]	; (b633c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b6332:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b6334:	4770      	bx	lr
   b6336:	bf00      	nop
   b6338:	2003e474 	.word	0x2003e474
   b633c:	2003e6d8 	.word	0x2003e6d8

000b6340 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b6340:	2100      	movs	r1, #0
   b6342:	f7ff ba45 	b.w	b57d0 <system_delay_ms>
	...

000b6348 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b6348:	4b01      	ldr	r3, [pc, #4]	; (b6350 <_GLOBAL__sub_I_RGB+0x8>)
   b634a:	2200      	movs	r2, #0
   b634c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b634e:	4770      	bx	lr
   b6350:	2003e6dc 	.word	0x2003e6dc

000b6354 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b6354:	4b01      	ldr	r3, [pc, #4]	; (b635c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b6356:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b6358:	4770      	bx	lr
   b635a:	bf00      	nop
   b635c:	2003e47c 	.word	0x2003e47c

000b6360 <serialEventRun>:
{
   b6360:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b6362:	4b0b      	ldr	r3, [pc, #44]	; (b6390 <serialEventRun+0x30>)
   b6364:	b143      	cbz	r3, b6378 <serialEventRun+0x18>
   b6366:	f000 fc37 	bl	b6bd8 <_Z16_fetch_usbserialv>
   b636a:	6803      	ldr	r3, [r0, #0]
   b636c:	691b      	ldr	r3, [r3, #16]
   b636e:	4798      	blx	r3
   b6370:	2800      	cmp	r0, #0
   b6372:	dd01      	ble.n	b6378 <serialEventRun+0x18>
        serialEvent();
   b6374:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b6378:	4b06      	ldr	r3, [pc, #24]	; (b6394 <serialEventRun+0x34>)
   b637a:	b143      	cbz	r3, b638e <serialEventRun+0x2e>
   b637c:	f001 fa7a 	bl	b7874 <_Z22__fetch_global_Serial1v>
   b6380:	6803      	ldr	r3, [r0, #0]
   b6382:	691b      	ldr	r3, [r3, #16]
   b6384:	4798      	blx	r3
   b6386:	2800      	cmp	r0, #0
   b6388:	dd01      	ble.n	b638e <serialEventRun+0x2e>
        serialEvent1();
   b638a:	f3af 8000 	nop.w
}
   b638e:	bd08      	pop	{r3, pc}
	...

000b6398 <_post_loop>:
{
   b6398:	b508      	push	{r3, lr}
	serialEventRun();
   b639a:	f7ff ffe1 	bl	b6360 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b639e:	f7ff f8cf 	bl	b5540 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b63a2:	4b01      	ldr	r3, [pc, #4]	; (b63a8 <_post_loop+0x10>)
   b63a4:	6018      	str	r0, [r3, #0]
}
   b63a6:	bd08      	pop	{r3, pc}
   b63a8:	2003e740 	.word	0x2003e740

000b63ac <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b63ac:	4805      	ldr	r0, [pc, #20]	; (b63c4 <_Z33system_initialize_user_backup_ramv+0x18>)
   b63ae:	4a06      	ldr	r2, [pc, #24]	; (b63c8 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b63b0:	4906      	ldr	r1, [pc, #24]	; (b63cc <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b63b2:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b63b4:	1a12      	subs	r2, r2, r0
   b63b6:	f002 fc77 	bl	b8ca8 <memcpy>
    __backup_sram_signature = signature;
   b63ba:	4b05      	ldr	r3, [pc, #20]	; (b63d0 <_Z33system_initialize_user_backup_ramv+0x24>)
   b63bc:	4a05      	ldr	r2, [pc, #20]	; (b63d4 <_Z33system_initialize_user_backup_ramv+0x28>)
   b63be:	601a      	str	r2, [r3, #0]
}
   b63c0:	bd08      	pop	{r3, pc}
   b63c2:	bf00      	nop
   b63c4:	2003f400 	.word	0x2003f400
   b63c8:	2003f404 	.word	0x2003f404
   b63cc:	000b9620 	.word	0x000b9620
   b63d0:	2003f400 	.word	0x2003f400
   b63d4:	9a271c1e 	.word	0x9a271c1e

000b63d8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b63d8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b63da:	2300      	movs	r3, #0
   b63dc:	9300      	str	r3, [sp, #0]
   b63de:	461a      	mov	r2, r3
   b63e0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b63e4:	f7ff fa16 	bl	b5814 <system_ctrl_set_result>
}
   b63e8:	b003      	add	sp, #12
   b63ea:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b63f0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b63f0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b63f2:	8843      	ldrh	r3, [r0, #2]
   b63f4:	2b0a      	cmp	r3, #10
   b63f6:	d008      	beq.n	b640a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b63f8:	2b50      	cmp	r3, #80	; 0x50
   b63fa:	d10b      	bne.n	b6414 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b63fc:	4b09      	ldr	r3, [pc, #36]	; (b6424 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b63fe:	681b      	ldr	r3, [r3, #0]
   b6400:	b14b      	cbz	r3, b6416 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b6402:	b003      	add	sp, #12
   b6404:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b6408:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b640a:	f7ff ffe5 	bl	b63d8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b640e:	b003      	add	sp, #12
   b6410:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b6414:	2300      	movs	r3, #0
   b6416:	9300      	str	r3, [sp, #0]
   b6418:	461a      	mov	r2, r3
   b641a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b641e:	f7ff f9f9 	bl	b5814 <system_ctrl_set_result>
}
   b6422:	e7f4      	b.n	b640e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b6424:	2003e6f0 	.word	0x2003e6f0

000b6428 <module_user_init_hook>:
{
   b6428:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b642a:	4812      	ldr	r0, [pc, #72]	; (b6474 <module_user_init_hook+0x4c>)
   b642c:	2100      	movs	r1, #0
   b642e:	f7ff fad3 	bl	b59d8 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b6432:	4b11      	ldr	r3, [pc, #68]	; (b6478 <module_user_init_hook+0x50>)
   b6434:	681a      	ldr	r2, [r3, #0]
   b6436:	4b11      	ldr	r3, [pc, #68]	; (b647c <module_user_init_hook+0x54>)
   b6438:	429a      	cmp	r2, r3
   b643a:	4b11      	ldr	r3, [pc, #68]	; (b6480 <module_user_init_hook+0x58>)
   b643c:	bf0c      	ite	eq
   b643e:	2201      	moveq	r2, #1
   b6440:	2200      	movne	r2, #0
   b6442:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b6444:	d001      	beq.n	b644a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b6446:	f7ff ffb1 	bl	b63ac <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b644a:	f7ff f869 	bl	b5520 <HAL_RNG_GetRandomNumber>
   b644e:	4604      	mov	r4, r0
    srand(seed);
   b6450:	f002 fc40 	bl	b8cd4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b6454:	4b0b      	ldr	r3, [pc, #44]	; (b6484 <module_user_init_hook+0x5c>)
   b6456:	b113      	cbz	r3, b645e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b6458:	4620      	mov	r0, r4
   b645a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b645e:	2100      	movs	r1, #0
   b6460:	4808      	ldr	r0, [pc, #32]	; (b6484 <module_user_init_hook+0x5c>)
   b6462:	f7ff fa71 	bl	b5948 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b6466:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b646a:	4807      	ldr	r0, [pc, #28]	; (b6488 <module_user_init_hook+0x60>)
   b646c:	2100      	movs	r1, #0
   b646e:	f7ff b9c7 	b.w	b5800 <system_ctrl_set_app_request_handler>
   b6472:	bf00      	nop
   b6474:	000b6355 	.word	0x000b6355
   b6478:	2003f400 	.word	0x2003f400
   b647c:	9a271c1e 	.word	0x9a271c1e
   b6480:	2003e6ec 	.word	0x2003e6ec
   b6484:	00000000 	.word	0x00000000
   b6488:	000b63f1 	.word	0x000b63f1

000b648c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b648c:	4770      	bx	lr

000b648e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b648e:	2000      	movs	r0, #0
   b6490:	4770      	bx	lr

000b6492 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b6492:	b510      	push	{r4, lr}
   b6494:	2110      	movs	r1, #16
   b6496:	4604      	mov	r4, r0
   b6498:	f7fe facf 	bl	b4a3a <_ZdlPvj>
   b649c:	4620      	mov	r0, r4
   b649e:	bd10      	pop	{r4, pc}

000b64a0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b64a0:	b508      	push	{r3, lr}
      { delete this; }
   b64a2:	f7ff fff6 	bl	b6492 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b64a6:	bd08      	pop	{r3, pc}

000b64a8 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b64a8:	b530      	push	{r4, r5, lr}
        type_(type) {
   b64aa:	2200      	movs	r2, #0
   b64ac:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b64b0:	6002      	str	r2, [r0, #0]
   b64b2:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b64b4:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b64b6:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b64b8:	680c      	ldr	r4, [r1, #0]
   b64ba:	8085      	strh	r5, [r0, #4]
   b64bc:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b64be:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b64c0:	bd30      	pop	{r4, r5, pc}

000b64c2 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b64c2:	b510      	push	{r4, lr}
   b64c4:	4604      	mov	r4, r0
    free((void*)msg_);
   b64c6:	6800      	ldr	r0, [r0, #0]
   b64c8:	f7ff fa4e 	bl	b5968 <free>
}
   b64cc:	4620      	mov	r0, r4
   b64ce:	bd10      	pop	{r4, pc}

000b64d0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b64d0:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b64d2:	68c4      	ldr	r4, [r0, #12]
   b64d4:	b1f4      	cbz	r4, b6514 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b64d6:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b64d8:	2b02      	cmp	r3, #2
   b64da:	d103      	bne.n	b64e4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b64dc:	f104 000c 	add.w	r0, r4, #12
   b64e0:	f7ff ffef 	bl	b64c2 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b64e4:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b64e6:	b135      	cbz	r5, b64f6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b64e8:	4628      	mov	r0, r5
   b64ea:	f7fe ff9f 	bl	b542c <_ZNSt14_Function_baseD1Ev>
   b64ee:	2110      	movs	r1, #16
   b64f0:	4628      	mov	r0, r5
   b64f2:	f7fe faa2 	bl	b4a3a <_ZdlPvj>
   b64f6:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b64f8:	b135      	cbz	r5, b6508 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b64fa:	4628      	mov	r0, r5
   b64fc:	f7fe ff96 	bl	b542c <_ZNSt14_Function_baseD1Ev>
   b6500:	2110      	movs	r1, #16
   b6502:	4628      	mov	r0, r5
   b6504:	f7fe fa99 	bl	b4a3a <_ZdlPvj>
   b6508:	4620      	mov	r0, r4
   b650a:	2114      	movs	r1, #20
   b650c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b6510:	f7fe ba93 	b.w	b4a3a <_ZdlPvj>
   b6514:	bd38      	pop	{r3, r4, r5, pc}

000b6516 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   b6516:	b510      	push	{r4, lr}
   b6518:	b088      	sub	sp, #32
   b651a:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   b651c:	4668      	mov	r0, sp
   b651e:	f7ff fe40 	bl	b61a2 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   b6522:	4669      	mov	r1, sp
   b6524:	a804      	add	r0, sp, #16
   b6526:	f7ff fe5f 	bl	b61e8 <_ZN6StringC1ERKS_>
   b652a:	a804      	add	r0, sp, #16
   b652c:	47a0      	blx	r4
   b652e:	4604      	mov	r4, r0
   b6530:	a804      	add	r0, sp, #16
   b6532:	f7ff fdeb 	bl	b610c <_ZN6StringD1Ev>
    String p(param);
   b6536:	4668      	mov	r0, sp
   b6538:	f7ff fde8 	bl	b610c <_ZN6StringD1Ev>
}
   b653c:	4620      	mov	r0, r4
   b653e:	b008      	add	sp, #32
   b6540:	bd10      	pop	{r4, pc}

000b6542 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   b6542:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   b6544:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   b6546:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   b654a:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   b654c:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   b654e:	461a      	mov	r2, r3
   b6550:	4669      	mov	r1, sp
   b6552:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   b6554:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   b6558:	f8ad 4000 	strh.w	r4, [sp]
   b655c:	f7ff f9cc 	bl	b58f8 <spark_function>
}
   b6560:	b004      	add	sp, #16
   b6562:	bd10      	pop	{r4, pc}

000b6564 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b6564:	680b      	ldr	r3, [r1, #0]
   b6566:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b6568:	684b      	ldr	r3, [r1, #4]
   b656a:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b656c:	b113      	cbz	r3, b6574 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b656e:	685a      	ldr	r2, [r3, #4]
   b6570:	3201      	adds	r2, #1
   b6572:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b6574:	4770      	bx	lr

000b6576 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b6576:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6578:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b657a:	4668      	mov	r0, sp
   b657c:	460d      	mov	r5, r1
   b657e:	f7ff fff1 	bl	b6564 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   b6582:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b6584:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b6586:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b6588:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b658a:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b658c:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b658e:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   b6590:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b6592:	f7fe faab 	bl	b4aec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b6596:	b135      	cbz	r5, b65a6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b6598:	1d28      	adds	r0, r5, #4
   b659a:	f7fe faa7 	bl	b4aec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b659e:	2108      	movs	r1, #8
   b65a0:	4628      	mov	r0, r5
   b65a2:	f7fe fa4a 	bl	b4a3a <_ZdlPvj>
        return p;
    }
   b65a6:	4620      	mov	r0, r4
   b65a8:	b003      	add	sp, #12
   b65aa:	bd30      	pop	{r4, r5, pc}

000b65ac <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b65ac:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b65ae:	b510      	push	{r4, lr}
      if (_M_empty())
   b65b0:	b90a      	cbnz	r2, b65b6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b65b2:	f001 f9c5 	bl	b7940 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    }
   b65b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b65ba:	68c3      	ldr	r3, [r0, #12]
   b65bc:	4718      	bx	r3

000b65be <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b65be:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b65c0:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b65c2:	f100 0110 	add.w	r1, r0, #16
   b65c6:	f7ff fff1 	bl	b65ac <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b65ca:	bd08      	pop	{r3, pc}

000b65cc <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b65cc:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b65ce:	b510      	push	{r4, lr}
      if (_M_empty())
   b65d0:	b90a      	cbnz	r2, b65d6 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b65d2:	f001 f9b5 	bl	b7940 <_ZSt25__throw_bad_function_callv>
    }
   b65d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b65da:	68c3      	ldr	r3, [r0, #12]
   b65dc:	4718      	bx	r3

000b65de <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b65de:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b65e0:	6800      	ldr	r0, [r0, #0]
   b65e2:	f100 0110 	add.w	r1, r0, #16
   b65e6:	f7ff fff1 	bl	b65cc <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b65ea:	bd08      	pop	{r3, pc}

000b65ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b65ec:	b538      	push	{r3, r4, r5, lr}
   b65ee:	2300      	movs	r3, #0
   b65f0:	4604      	mov	r4, r0
   b65f2:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b65f4:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b65f6:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b65f8:	f7fe fa1b 	bl	b4a32 <_Znwj>
   b65fc:	b128      	cbz	r0, b660a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b65fe:	2301      	movs	r3, #1
   b6600:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b6604:	4b02      	ldr	r3, [pc, #8]	; (b6610 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b6606:	6003      	str	r3, [r0, #0]
   b6608:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b660a:	6020      	str	r0, [r4, #0]
	}
   b660c:	4620      	mov	r0, r4
   b660e:	bd38      	pop	{r3, r4, r5, pc}
   b6610:	000b90dc 	.word	0x000b90dc

000b6614 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b6614:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b6616:	2300      	movs	r3, #0
   b6618:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b661a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b661c:	4604      	mov	r4, r0
   b661e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b6620:	b12b      	cbz	r3, b662e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b6622:	2202      	movs	r2, #2
   b6624:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b6626:	68eb      	ldr	r3, [r5, #12]
   b6628:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b662a:	68ab      	ldr	r3, [r5, #8]
   b662c:	60a3      	str	r3, [r4, #8]
    }
   b662e:	4620      	mov	r0, r4
   b6630:	bd38      	pop	{r3, r4, r5, pc}
	...

000b6634 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b6634:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6636:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b6638:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b663a:	4668      	mov	r0, sp
   b663c:	f7ff ff34 	bl	b64a8 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b6640:	f04f 0302 	mov.w	r3, #2
   b6644:	e8d4 2f4f 	ldrexb	r2, [r4]
   b6648:	2a00      	cmp	r2, #0
   b664a:	d103      	bne.n	b6654 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b664c:	e8c4 3f41 	strexb	r1, r3, [r4]
   b6650:	2900      	cmp	r1, #0
   b6652:	d1f7      	bne.n	b6644 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b6654:	d125      	bne.n	b66a2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b6656:	f104 050c 	add.w	r5, r4, #12
   b665a:	4669      	mov	r1, sp
   b665c:	4628      	mov	r0, r5
   b665e:	f7ff ff23 	bl	b64a8 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b6662:	f3bf 8f5b 	dmb	ish
   b6666:	2301      	movs	r3, #1
   b6668:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b666a:	2000      	movs	r0, #0
   b666c:	f104 0308 	add.w	r3, r4, #8
   b6670:	f3bf 8f5b 	dmb	ish
   b6674:	e853 6f00 	ldrex	r6, [r3]
   b6678:	e843 0200 	strex	r2, r0, [r3]
   b667c:	2a00      	cmp	r2, #0
   b667e:	d1f9      	bne.n	b6674 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b6680:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b6684:	b16e      	cbz	r6, b66a2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b6686:	f7ff f8ab 	bl	b57e0 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b668a:	b178      	cbz	r0, b66ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b668c:	4629      	mov	r1, r5
   b668e:	4630      	mov	r0, r6
   b6690:	f7ff ff8c 	bl	b65ac <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b6694:	4630      	mov	r0, r6
   b6696:	f7fe fec9 	bl	b542c <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b669a:	2110      	movs	r1, #16
   b669c:	4630      	mov	r0, r6
   b669e:	f7fe f9cc 	bl	b4a3a <_ZdlPvj>
        p_->setError(std::move(error));
   b66a2:	4668      	mov	r0, sp
   b66a4:	f7ff ff0d 	bl	b64c2 <_ZN8particle5ErrorD1Ev>
    }
   b66a8:	b009      	add	sp, #36	; 0x24
   b66aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b66ac:	4631      	mov	r1, r6
   b66ae:	a802      	add	r0, sp, #8
   b66b0:	f7ff ffb0 	bl	b6614 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b66b4:	68e0      	ldr	r0, [r4, #12]
   b66b6:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b66ba:	b108      	cbz	r0, b66c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b66bc:	f002 fb38 	bl	b8d30 <strdup>
        type_(type) {
   b66c0:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b66c2:	2010      	movs	r0, #16
   b66c4:	f8ad 501c 	strh.w	r5, [sp, #28]
   b66c8:	f7fe f9b3 	bl	b4a32 <_Znwj>
   b66cc:	4605      	mov	r5, r0
   b66ce:	b1e8      	cbz	r0, b670c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b66d0:	2700      	movs	r7, #0
   b66d2:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b66d4:	2018      	movs	r0, #24
   b66d6:	f7fe f9ac 	bl	b4a32 <_Znwj>
   b66da:	4604      	mov	r4, r0
   b66dc:	b188      	cbz	r0, b6702 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b66de:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b66e0:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b66e2:	a802      	add	r0, sp, #8
   b66e4:	f7ff fdb5 	bl	b6252 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b66e8:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b66ea:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b66ec:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b66ee:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b66f0:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b66f2:	a906      	add	r1, sp, #24
   b66f4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b66f6:	60e3      	str	r3, [r4, #12]
   b66f8:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b66fc:	9205      	str	r2, [sp, #20]
   b66fe:	f7ff fed3 	bl	b64a8 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b6702:	4b08      	ldr	r3, [pc, #32]	; (b6724 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b6704:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b6706:	4b08      	ldr	r3, [pc, #32]	; (b6728 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6708:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b670a:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b670c:	a806      	add	r0, sp, #24
   b670e:	f7ff fed8 	bl	b64c2 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b6712:	a802      	add	r0, sp, #8
   b6714:	f7fe fe8a 	bl	b542c <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b6718:	2200      	movs	r2, #0
   b671a:	4629      	mov	r1, r5
   b671c:	4803      	ldr	r0, [pc, #12]	; (b672c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b671e:	f7ff f867 	bl	b57f0 <application_thread_invoke>
   b6722:	e7b7      	b.n	b6694 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b6724:	000b65bf 	.word	0x000b65bf
   b6728:	000b6841 	.word	0x000b6841
   b672c:	000b6cd1 	.word	0x000b6cd1

000b6730 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b6730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6734:	b08b      	sub	sp, #44	; 0x2c
   b6736:	4605      	mov	r5, r0
   b6738:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b673c:	460f      	mov	r7, r1
   b673e:	4690      	mov	r8, r2
   b6740:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b6742:	f7ff f8e1 	bl	b5908 <spark_cloud_flag_connected>
   b6746:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b6748:	4683      	mov	fp, r0
   b674a:	bb38      	cbnz	r0, b679c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b674c:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b6750:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b6752:	a905      	add	r1, sp, #20
   b6754:	4630      	mov	r0, r6
   b6756:	f8ad 3018 	strh.w	r3, [sp, #24]
   b675a:	f7ff fea5 	bl	b64a8 <_ZN8particle5ErrorC1EOS0_>
   b675e:	2014      	movs	r0, #20
   b6760:	f7fe f967 	bl	b4a32 <_Znwj>
   b6764:	4604      	mov	r4, r0
   b6766:	b148      	cbz	r0, b677c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b6768:	2302      	movs	r3, #2
   b676a:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b676c:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b676e:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b6772:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b6774:	4631      	mov	r1, r6
   b6776:	300c      	adds	r0, #12
   b6778:	f7ff fe96 	bl	b64a8 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b677c:	4628      	mov	r0, r5
	: __shared_count(__p)
   b677e:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b6780:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b6784:	f7ff ff32 	bl	b65ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b6788:	4630      	mov	r0, r6
   b678a:	f7ff fe9a 	bl	b64c2 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b678e:	a805      	add	r0, sp, #20
   b6790:	f7ff fe97 	bl	b64c2 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b6794:	4628      	mov	r0, r5
   b6796:	b00b      	add	sp, #44	; 0x2c
   b6798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b679c:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b679e:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b67a0:	2014      	movs	r0, #20
   b67a2:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b67a6:	9307      	str	r3, [sp, #28]
   b67a8:	f7fe f943 	bl	b4a32 <_Znwj>
   b67ac:	4601      	mov	r1, r0
   b67ae:	b118      	cbz	r0, b67b8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b67b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b67b4:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b67b6:	7044      	strb	r4, [r0, #1]
   b67b8:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b67ba:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b67bc:	f7ff ff16 	bl	b65ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b67c0:	4b1e      	ldr	r3, [pc, #120]	; (b683c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b67c2:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b67c4:	2008      	movs	r0, #8
   b67c6:	f7fe f934 	bl	b4a32 <_Znwj>
   b67ca:	4604      	mov	r4, r0
   b67cc:	b110      	cbz	r0, b67d4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b67ce:	a903      	add	r1, sp, #12
   b67d0:	f7ff fec8 	bl	b6564 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b67d4:	9600      	str	r6, [sp, #0]
   b67d6:	fa5f f38a 	uxtb.w	r3, sl
   b67da:	464a      	mov	r2, r9
   b67dc:	4641      	mov	r1, r8
   b67de:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b67e0:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b67e2:	f7ff f8a1 	bl	b5928 <spark_send_event>
   b67e6:	b9b8      	cbnz	r0, b6818 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b67e8:	9b03      	ldr	r3, [sp, #12]
   b67ea:	785b      	ldrb	r3, [r3, #1]
   b67ec:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b67f0:	b993      	cbnz	r3, b6818 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b67f2:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b67f6:	a905      	add	r1, sp, #20
   b67f8:	a803      	add	r0, sp, #12
   b67fa:	9205      	str	r2, [sp, #20]
   b67fc:	f8ad 3018 	strh.w	r3, [sp, #24]
   b6800:	f7ff ff18 	bl	b6634 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b6804:	a805      	add	r0, sp, #20
   b6806:	f7ff fe5c 	bl	b64c2 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b680a:	a805      	add	r0, sp, #20
   b680c:	9909      	ldr	r1, [sp, #36]	; 0x24
   b680e:	f7ff feb2 	bl	b6576 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b6812:	a806      	add	r0, sp, #24
   b6814:	f7fe f96a 	bl	b4aec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6818:	a903      	add	r1, sp, #12
   b681a:	a805      	add	r0, sp, #20
   b681c:	f7ff fea2 	bl	b6564 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b6820:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b6822:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b6824:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b6826:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b6828:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b682a:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b682c:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b682e:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b6830:	f7fe f95c 	bl	b4aec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6834:	a804      	add	r0, sp, #16
   b6836:	f7fe f959 	bl	b4aec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b683a:	e7ab      	b.n	b6794 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b683c:	000b68bd 	.word	0x000b68bd

000b6840 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b6840:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b6842:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6844:	4605      	mov	r5, r0
	switch (__op)
   b6846:	d103      	bne.n	b6850 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b6848:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b684a:	6003      	str	r3, [r0, #0]
      }
   b684c:	2000      	movs	r0, #0
   b684e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b6850:	2a02      	cmp	r2, #2
   b6852:	d010      	beq.n	b6876 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b6854:	2a03      	cmp	r2, #3
   b6856:	d1f9      	bne.n	b684c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b6858:	6804      	ldr	r4, [r0, #0]
   b685a:	2c00      	cmp	r4, #0
   b685c:	d0f6      	beq.n	b684c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b685e:	f104 0010 	add.w	r0, r4, #16
   b6862:	f7ff fe2e 	bl	b64c2 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b6866:	4620      	mov	r0, r4
   b6868:	f7fe fde0 	bl	b542c <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b686c:	2118      	movs	r1, #24
   b686e:	4620      	mov	r0, r4
   b6870:	f7fe f8e3 	bl	b4a3a <_ZdlPvj>
   b6874:	e7ea      	b.n	b684c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b6876:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b6878:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b687a:	f7fe f8da 	bl	b4a32 <_Znwj>
   b687e:	4604      	mov	r4, r0
   b6880:	b150      	cbz	r0, b6898 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b6882:	4631      	mov	r1, r6
   b6884:	f7ff fec6 	bl	b6614 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b6888:	6930      	ldr	r0, [r6, #16]
   b688a:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b688e:	b108      	cbz	r0, b6894 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b6890:	f002 fa4e 	bl	b8d30 <strdup>
        type_(type) {
   b6894:	6120      	str	r0, [r4, #16]
   b6896:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b6898:	602c      	str	r4, [r5, #0]
	}
   b689a:	e7d7      	b.n	b684c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b689c <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b689c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b689e:	2300      	movs	r3, #0
   b68a0:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b68a2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b68a4:	4604      	mov	r4, r0
   b68a6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b68a8:	b12b      	cbz	r3, b68b6 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b68aa:	2202      	movs	r2, #2
   b68ac:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b68ae:	68eb      	ldr	r3, [r5, #12]
   b68b0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b68b2:	68ab      	ldr	r3, [r5, #8]
   b68b4:	60a3      	str	r3, [r4, #8]
    }
   b68b6:	4620      	mov	r0, r4
   b68b8:	bd38      	pop	{r3, r4, r5, pc}
	...

000b68bc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b68bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   b68be:	b089      	sub	sp, #36	; 0x24
   b68c0:	4604      	mov	r4, r0
   b68c2:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b68c4:	a801      	add	r0, sp, #4
   b68c6:	4611      	mov	r1, r2
   b68c8:	f7ff fe55 	bl	b6576 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b68cc:	b1a4      	cbz	r4, b68f8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b68ce:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b68d0:	b11d      	cbz	r5, b68da <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b68d2:	4628      	mov	r0, r5
   b68d4:	f002 fa2c 	bl	b8d30 <strdup>
   b68d8:	4605      	mov	r5, r0
   b68da:	a801      	add	r0, sp, #4
   b68dc:	a903      	add	r1, sp, #12
        type_(type) {
   b68de:	9503      	str	r5, [sp, #12]
   b68e0:	f8ad 4010 	strh.w	r4, [sp, #16]
   b68e4:	f7ff fea6 	bl	b6634 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b68e8:	a803      	add	r0, sp, #12
   b68ea:	f7ff fdea 	bl	b64c2 <_ZN8particle5ErrorD1Ev>
   b68ee:	a802      	add	r0, sp, #8
   b68f0:	f7fe f8fc 	bl	b4aec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b68f4:	b009      	add	sp, #36	; 0x24
   b68f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b68f8:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b68fa:	2301      	movs	r3, #1
   b68fc:	e8d5 2f4f 	ldrexb	r2, [r5]
   b6900:	2a00      	cmp	r2, #0
   b6902:	d103      	bne.n	b690c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b6904:	e8c5 3f41 	strexb	r1, r3, [r5]
   b6908:	2900      	cmp	r1, #0
   b690a:	d1f7      	bne.n	b68fc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b690c:	d1ef      	bne.n	b68ee <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b690e:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b6910:	f3bf 8f5b 	dmb	ish
   b6914:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b6916:	1d2b      	adds	r3, r5, #4
   b6918:	f3bf 8f5b 	dmb	ish
   b691c:	e853 6f00 	ldrex	r6, [r3]
   b6920:	e843 4200 	strex	r2, r4, [r3]
   b6924:	2a00      	cmp	r2, #0
   b6926:	d1f9      	bne.n	b691c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b6928:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b692c:	2e00      	cmp	r6, #0
   b692e:	d0de      	beq.n	b68ee <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b6930:	4620      	mov	r0, r4
   b6932:	f7fe ff55 	bl	b57e0 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b6936:	4607      	mov	r7, r0
   b6938:	b160      	cbz	r0, b6954 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b693a:	f105 010c 	add.w	r1, r5, #12
   b693e:	4630      	mov	r0, r6
   b6940:	f7ff fe44 	bl	b65cc <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b6944:	4630      	mov	r0, r6
   b6946:	f7fe fd71 	bl	b542c <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b694a:	2110      	movs	r1, #16
   b694c:	4630      	mov	r0, r6
   b694e:	f7fe f874 	bl	b4a3a <_ZdlPvj>
   b6952:	e7cc      	b.n	b68ee <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b6954:	4631      	mov	r1, r6
   b6956:	a803      	add	r0, sp, #12
   b6958:	f7ff ffa0 	bl	b689c <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b695c:	7b2b      	ldrb	r3, [r5, #12]
   b695e:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b6962:	2010      	movs	r0, #16
   b6964:	f7fe f865 	bl	b4a32 <_Znwj>
   b6968:	4605      	mov	r5, r0
   b696a:	b1d0      	cbz	r0, b69a2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b696c:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b696e:	2014      	movs	r0, #20
   b6970:	f7fe f85f 	bl	b4a32 <_Znwj>
   b6974:	4604      	mov	r4, r0
   b6976:	b178      	cbz	r0, b6998 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b6978:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b697a:	4601      	mov	r1, r0
   b697c:	a803      	add	r0, sp, #12
   b697e:	f7ff fc68 	bl	b6252 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6982:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b6984:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b6986:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6988:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b698a:	9205      	str	r2, [sp, #20]
   b698c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b698e:	60e3      	str	r3, [r4, #12]
   b6990:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b6994:	9206      	str	r2, [sp, #24]
   b6996:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b6998:	4b06      	ldr	r3, [pc, #24]	; (b69b4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b699a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b699c:	4b06      	ldr	r3, [pc, #24]	; (b69b8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b699e:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b69a0:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b69a2:	a803      	add	r0, sp, #12
   b69a4:	f7fe fd42 	bl	b542c <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b69a8:	2200      	movs	r2, #0
   b69aa:	4629      	mov	r1, r5
   b69ac:	4803      	ldr	r0, [pc, #12]	; (b69bc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b69ae:	f7fe ff1f 	bl	b57f0 <application_thread_invoke>
   b69b2:	e7c7      	b.n	b6944 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b69b4:	000b65df 	.word	0x000b65df
   b69b8:	000b69c1 	.word	0x000b69c1
   b69bc:	000b6cd1 	.word	0x000b6cd1

000b69c0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b69c0:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b69c2:	b570      	push	{r4, r5, r6, lr}
   b69c4:	4604      	mov	r4, r0
	switch (__op)
   b69c6:	d103      	bne.n	b69d0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b69c8:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b69ca:	6003      	str	r3, [r0, #0]
      }
   b69cc:	2000      	movs	r0, #0
   b69ce:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b69d0:	2a02      	cmp	r2, #2
   b69d2:	d00c      	beq.n	b69ee <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b69d4:	2a03      	cmp	r2, #3
   b69d6:	d1f9      	bne.n	b69cc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b69d8:	6804      	ldr	r4, [r0, #0]
   b69da:	2c00      	cmp	r4, #0
   b69dc:	d0f6      	beq.n	b69cc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b69de:	4620      	mov	r0, r4
   b69e0:	f7fe fd24 	bl	b542c <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b69e4:	2114      	movs	r1, #20
   b69e6:	4620      	mov	r0, r4
   b69e8:	f7fe f827 	bl	b4a3a <_ZdlPvj>
   b69ec:	e7ee      	b.n	b69cc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b69ee:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b69f0:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b69f2:	f7fe f81e 	bl	b4a32 <_Znwj>
   b69f6:	4605      	mov	r5, r0
   b69f8:	b120      	cbz	r0, b6a04 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b69fa:	4631      	mov	r1, r6
   b69fc:	f7ff ff4e 	bl	b689c <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b6a00:	7c33      	ldrb	r3, [r6, #16]
   b6a02:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b6a04:	6025      	str	r5, [r4, #0]
	}
   b6a06:	e7e1      	b.n	b69cc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b6a08 <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
   b6a08:	4770      	bx	lr

000b6a0a <_ZN9IPAddressD0Ev>:
   b6a0a:	b510      	push	{r4, lr}
   b6a0c:	2118      	movs	r1, #24
   b6a0e:	4604      	mov	r4, r0
   b6a10:	f7fe f813 	bl	b4a3a <_ZdlPvj>
   b6a14:	4620      	mov	r0, r4
   b6a16:	bd10      	pop	{r4, pc}

000b6a18 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b6a18:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b6a1a:	7d03      	ldrb	r3, [r0, #20]
   b6a1c:	2b06      	cmp	r3, #6
{
   b6a1e:	b08d      	sub	sp, #52	; 0x34
   b6a20:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6a22:	f100 0704 	add.w	r7, r0, #4
   b6a26:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b6a2a:	d012      	beq.n	b6a52 <_ZNK9IPAddress7printToER5Print+0x3a>
   b6a2c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b6a30:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b6a34:	220a      	movs	r2, #10
   b6a36:	4630      	mov	r0, r6
   b6a38:	f7ff fc51 	bl	b62de <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b6a3c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b6a3e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b6a40:	d019      	beq.n	b6a76 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b6a42:	2c00      	cmp	r4, #0
   b6a44:	d0f4      	beq.n	b6a30 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b6a46:	212e      	movs	r1, #46	; 0x2e
   b6a48:	4630      	mov	r0, r6
   b6a4a:	f7ff fc45 	bl	b62d8 <_ZN5Print5printEc>
   b6a4e:	4404      	add	r4, r0
   b6a50:	e7ee      	b.n	b6a30 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6a52:	232f      	movs	r3, #47	; 0x2f
   b6a54:	466a      	mov	r2, sp
   b6a56:	4639      	mov	r1, r7
   b6a58:	200a      	movs	r0, #10
		buf[0] = 0;
   b6a5a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6a5e:	f7fe fd7f 	bl	b5560 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b6a62:	4668      	mov	r0, sp
   b6a64:	f7fd ffa2 	bl	b49ac <strlen>
   b6a68:	6833      	ldr	r3, [r6, #0]
   b6a6a:	4602      	mov	r2, r0
   b6a6c:	68db      	ldr	r3, [r3, #12]
   b6a6e:	4669      	mov	r1, sp
   b6a70:	4630      	mov	r0, r6
   b6a72:	4798      	blx	r3
   b6a74:	4604      	mov	r4, r0
    }
    return n;
}
   b6a76:	4620      	mov	r0, r4
   b6a78:	b00d      	add	sp, #52	; 0x34
   b6a7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6a7c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b6a7c:	b510      	push	{r4, lr}
   b6a7e:	4b05      	ldr	r3, [pc, #20]	; (b6a94 <_ZN9IPAddressC1Ev+0x18>)
   b6a80:	4604      	mov	r4, r0
    void clear() { memset(&address, 0, sizeof (address)); }
   b6a82:	2211      	movs	r2, #17
   b6a84:	f840 3b04 	str.w	r3, [r0], #4
   b6a88:	2100      	movs	r1, #0
   b6a8a:	f002 f91b 	bl	b8cc4 <memset>
}
   b6a8e:	4620      	mov	r0, r4
   b6a90:	bd10      	pop	{r4, pc}
   b6a92:	bf00      	nop
   b6a94:	000b90f8 	.word	0x000b90f8

000b6a98 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b6a98:	4603      	mov	r3, r0
   b6a9a:	4a07      	ldr	r2, [pc, #28]	; (b6ab8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b6a9c:	b510      	push	{r4, lr}
   b6a9e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b6aa2:	f101 0210 	add.w	r2, r1, #16
   b6aa6:	f851 4b04 	ldr.w	r4, [r1], #4
   b6aaa:	f843 4b04 	str.w	r4, [r3], #4
   b6aae:	4291      	cmp	r1, r2
   b6ab0:	d1f9      	bne.n	b6aa6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b6ab2:	780a      	ldrb	r2, [r1, #0]
   b6ab4:	701a      	strb	r2, [r3, #0]
}
   b6ab6:	bd10      	pop	{r4, pc}
   b6ab8:	000b90f8 	.word	0x000b90f8

000b6abc <_ZNK9IPAddresscvbEv>:
    		return address.v;
   b6abc:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b6abe:	2b04      	cmp	r3, #4
   b6ac0:	d104      	bne.n	b6acc <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b6ac2:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b6ac4:	3800      	subs	r0, #0
   b6ac6:	bf18      	it	ne
   b6ac8:	2001      	movne	r0, #1
   b6aca:	4770      	bx	lr
    } else if (version() == 6) {
   b6acc:	2b06      	cmp	r3, #6
   b6ace:	d107      	bne.n	b6ae0 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b6ad0:	6843      	ldr	r3, [r0, #4]
   b6ad2:	b93b      	cbnz	r3, b6ae4 <_ZNK9IPAddresscvbEv+0x28>
   b6ad4:	6883      	ldr	r3, [r0, #8]
   b6ad6:	b92b      	cbnz	r3, b6ae4 <_ZNK9IPAddresscvbEv+0x28>
   b6ad8:	68c3      	ldr	r3, [r0, #12]
   b6ada:	b91b      	cbnz	r3, b6ae4 <_ZNK9IPAddresscvbEv+0x28>
   b6adc:	6900      	ldr	r0, [r0, #16]
   b6ade:	e7f1      	b.n	b6ac4 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b6ae0:	2000      	movs	r0, #0
   b6ae2:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b6ae4:	2001      	movs	r0, #1
}
   b6ae6:	4770      	bx	lr

000b6ae8 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b6ae8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b6aea:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b6aee:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b6af2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b6af6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b6afa:	2304      	movs	r3, #4
   b6afc:	6041      	str	r1, [r0, #4]
   b6afe:	7503      	strb	r3, [r0, #20]
}
   b6b00:	bd10      	pop	{r4, pc}
	...

000b6b04 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b6b04:	b507      	push	{r0, r1, r2, lr}
   b6b06:	4b06      	ldr	r3, [pc, #24]	; (b6b20 <_ZN9IPAddressC1EPKh+0x1c>)
   b6b08:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b6b0a:	78cb      	ldrb	r3, [r1, #3]
   b6b0c:	9300      	str	r3, [sp, #0]
   b6b0e:	788b      	ldrb	r3, [r1, #2]
   b6b10:	784a      	ldrb	r2, [r1, #1]
   b6b12:	7809      	ldrb	r1, [r1, #0]
   b6b14:	f7ff ffe8 	bl	b6ae8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b6b18:	b003      	add	sp, #12
   b6b1a:	f85d fb04 	ldr.w	pc, [sp], #4
   b6b1e:	bf00      	nop
   b6b20:	000b90f8 	.word	0x000b90f8

000b6b24 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6b24:	7441      	strb	r1, [r0, #17]
}
   b6b26:	4770      	bx	lr

000b6b28 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6b28:	4770      	bx	lr

000b6b2a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b6b2a:	4770      	bx	lr

000b6b2c <_ZN9USBSerial4readEv>:
{
   b6b2c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b6b2e:	2100      	movs	r1, #0
   b6b30:	7c00      	ldrb	r0, [r0, #16]
   b6b32:	f7fe fe1d 	bl	b5770 <HAL_USB_USART_Receive_Data>
}
   b6b36:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6b3a:	bd08      	pop	{r3, pc}

000b6b3c <_ZN9USBSerial4peekEv>:
{
   b6b3c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b6b3e:	2101      	movs	r1, #1
   b6b40:	7c00      	ldrb	r0, [r0, #16]
   b6b42:	f7fe fe15 	bl	b5770 <HAL_USB_USART_Receive_Data>
}
   b6b46:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6b4a:	bd08      	pop	{r3, pc}

000b6b4c <_ZN9USBSerial17availableForWriteEv>:
{
   b6b4c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b6b4e:	7c00      	ldrb	r0, [r0, #16]
   b6b50:	f7fe fe06 	bl	b5760 <HAL_USB_USART_Available_Data_For_Write>
}
   b6b54:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6b58:	bd08      	pop	{r3, pc}

000b6b5a <_ZN9USBSerial9availableEv>:
{
   b6b5a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b6b5c:	7c00      	ldrb	r0, [r0, #16]
   b6b5e:	f7fe fdf7 	bl	b5750 <HAL_USB_USART_Available_Data>
}
   b6b62:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6b66:	bd08      	pop	{r3, pc}

000b6b68 <_ZN9USBSerial5writeEh>:
{
   b6b68:	b513      	push	{r0, r1, r4, lr}
   b6b6a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6b6c:	7c00      	ldrb	r0, [r0, #16]
{
   b6b6e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6b70:	f7fe fdf6 	bl	b5760 <HAL_USB_USART_Available_Data_For_Write>
   b6b74:	2800      	cmp	r0, #0
   b6b76:	9901      	ldr	r1, [sp, #4]
   b6b78:	dc01      	bgt.n	b6b7e <_ZN9USBSerial5writeEh+0x16>
   b6b7a:	7c60      	ldrb	r0, [r4, #17]
   b6b7c:	b120      	cbz	r0, b6b88 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b6b7e:	7c20      	ldrb	r0, [r4, #16]
   b6b80:	f7fe fdfe 	bl	b5780 <HAL_USB_USART_Send_Data>
   b6b84:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b6b88:	b002      	add	sp, #8
   b6b8a:	bd10      	pop	{r4, pc}

000b6b8c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b6b8c:	7c00      	ldrb	r0, [r0, #16]
   b6b8e:	f7fe bdff 	b.w	b5790 <HAL_USB_USART_Flush_Data>

000b6b92 <_ZN9USBSerialD0Ev>:
   b6b92:	b510      	push	{r4, lr}
   b6b94:	2114      	movs	r1, #20
   b6b96:	4604      	mov	r4, r0
   b6b98:	f7fd ff4f 	bl	b4a3a <_ZdlPvj>
   b6b9c:	4620      	mov	r0, r4
   b6b9e:	bd10      	pop	{r4, pc}

000b6ba0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b6ba0:	b510      	push	{r4, lr}
   b6ba2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6ba6:	4604      	mov	r4, r0
   b6ba8:	4608      	mov	r0, r1
   b6baa:	2100      	movs	r1, #0
   b6bac:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b6bb0:	4b04      	ldr	r3, [pc, #16]	; (b6bc4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b6bb2:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6bb4:	2301      	movs	r3, #1
  _serial = serial;
   b6bb6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6bb8:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b6bba:	4611      	mov	r1, r2
   b6bbc:	f7fe fdc0 	bl	b5740 <HAL_USB_USART_Init>
}
   b6bc0:	4620      	mov	r0, r4
   b6bc2:	bd10      	pop	{r4, pc}
   b6bc4:	000b910c 	.word	0x000b910c

000b6bc8 <_Z19acquireSerialBufferv>:
{
   b6bc8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b6bca:	2214      	movs	r2, #20
{
   b6bcc:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b6bce:	2100      	movs	r1, #0
   b6bd0:	f002 f878 	bl	b8cc4 <memset>
}
   b6bd4:	4620      	mov	r0, r4
   b6bd6:	bd10      	pop	{r4, pc}

000b6bd8 <_Z16_fetch_usbserialv>:
{
   b6bd8:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6bda:	4c0f      	ldr	r4, [pc, #60]	; (b6c18 <_Z16_fetch_usbserialv+0x40>)
{
   b6bdc:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b6bde:	a803      	add	r0, sp, #12
   b6be0:	f7ff fff2 	bl	b6bc8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6be4:	7821      	ldrb	r1, [r4, #0]
   b6be6:	f3bf 8f5b 	dmb	ish
   b6bea:	f011 0101 	ands.w	r1, r1, #1
   b6bee:	d10f      	bne.n	b6c10 <_Z16_fetch_usbserialv+0x38>
   b6bf0:	4620      	mov	r0, r4
   b6bf2:	9101      	str	r1, [sp, #4]
   b6bf4:	f7fd ff23 	bl	b4a3e <__cxa_guard_acquire>
   b6bf8:	9901      	ldr	r1, [sp, #4]
   b6bfa:	b148      	cbz	r0, b6c10 <_Z16_fetch_usbserialv+0x38>
   b6bfc:	aa03      	add	r2, sp, #12
   b6bfe:	4807      	ldr	r0, [pc, #28]	; (b6c1c <_Z16_fetch_usbserialv+0x44>)
   b6c00:	f7ff ffce 	bl	b6ba0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b6c04:	4620      	mov	r0, r4
   b6c06:	f7fd ff1f 	bl	b4a48 <__cxa_guard_release>
   b6c0a:	4805      	ldr	r0, [pc, #20]	; (b6c20 <_Z16_fetch_usbserialv+0x48>)
   b6c0c:	f002 f836 	bl	b8c7c <atexit>
	return _usbserial;
}
   b6c10:	4802      	ldr	r0, [pc, #8]	; (b6c1c <_Z16_fetch_usbserialv+0x44>)
   b6c12:	b008      	add	sp, #32
   b6c14:	bd10      	pop	{r4, pc}
   b6c16:	bf00      	nop
   b6c18:	2003e6f4 	.word	0x2003e6f4
   b6c1c:	2003e6f8 	.word	0x2003e6f8
   b6c20:	000b6b29 	.word	0x000b6b29

000b6c24 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  hal_interrupt_disable_all();
   b6c24:	f7fe bc64 	b.w	b54f0 <hal_interrupt_disable_all>

000b6c28 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  hal_interrupt_enable_all();
   b6c28:	f7fe bc5a 	b.w	b54e0 <hal_interrupt_enable_all>

000b6c2c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b6c2c:	4770      	bx	lr

000b6c2e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6c2e:	7441      	strb	r1, [r0, #17]
}
   b6c30:	4770      	bx	lr

000b6c32 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b6c32:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b6c34:	7c00      	ldrb	r0, [r0, #16]
   b6c36:	f7fe fce3 	bl	b5600 <hal_usart_available_data_for_write>
}
   b6c3a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6c3e:	bd08      	pop	{r3, pc}

000b6c40 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b6c40:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b6c42:	7c00      	ldrb	r0, [r0, #16]
   b6c44:	f7fe fcb4 	bl	b55b0 <hal_usart_available>
}
   b6c48:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6c4c:	bd08      	pop	{r3, pc}

000b6c4e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b6c4e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b6c50:	7c00      	ldrb	r0, [r0, #16]
   b6c52:	f7fe fcbd 	bl	b55d0 <hal_usart_peek>
}
   b6c56:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6c5a:	bd08      	pop	{r3, pc}

000b6c5c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b6c5c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b6c5e:	7c00      	ldrb	r0, [r0, #16]
   b6c60:	f7fe fcae 	bl	b55c0 <hal_usart_read>
}
   b6c64:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6c68:	bd08      	pop	{r3, pc}

000b6c6a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b6c6a:	7c00      	ldrb	r0, [r0, #16]
   b6c6c:	f7fe bcb8 	b.w	b55e0 <hal_usart_flush>

000b6c70 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b6c70:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6c72:	7c45      	ldrb	r5, [r0, #17]
{
   b6c74:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6c76:	b12d      	cbz	r5, b6c84 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b6c78:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b6c7a:	b003      	add	sp, #12
   b6c7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b6c80:	f7fe bc8e 	b.w	b55a0 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6c84:	7c00      	ldrb	r0, [r0, #16]
   b6c86:	9101      	str	r1, [sp, #4]
   b6c88:	f7fe fcba 	bl	b5600 <hal_usart_available_data_for_write>
   b6c8c:	2800      	cmp	r0, #0
   b6c8e:	9901      	ldr	r1, [sp, #4]
   b6c90:	dcf2      	bgt.n	b6c78 <_ZN11USARTSerial5writeEh+0x8>
}
   b6c92:	4628      	mov	r0, r5
   b6c94:	b003      	add	sp, #12
   b6c96:	bd30      	pop	{r4, r5, pc}

000b6c98 <_ZN11USARTSerialD0Ev>:
   b6c98:	b510      	push	{r4, lr}
   b6c9a:	2114      	movs	r1, #20
   b6c9c:	4604      	mov	r4, r0
   b6c9e:	f7fd fecc 	bl	b4a3a <_ZdlPvj>
   b6ca2:	4620      	mov	r0, r4
   b6ca4:	bd10      	pop	{r4, pc}
	...

000b6ca8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b6ca8:	b510      	push	{r4, lr}
   b6caa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6cae:	4604      	mov	r4, r0
   b6cb0:	4608      	mov	r0, r1
   b6cb2:	4611      	mov	r1, r2
   b6cb4:	2200      	movs	r2, #0
   b6cb6:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b6cba:	4b04      	ldr	r3, [pc, #16]	; (b6ccc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b6cbc:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6cbe:	2301      	movs	r3, #1
  _serial = serial;
   b6cc0:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6cc2:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b6cc4:	f7fe fca4 	bl	b5610 <hal_usart_init_ex>
}
   b6cc8:	4620      	mov	r0, r4
   b6cca:	bd10      	pop	{r4, pc}
   b6ccc:	000b913c 	.word	0x000b913c

000b6cd0 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b6cd0:	b510      	push	{r4, lr}
      if (_M_empty())
   b6cd2:	6883      	ldr	r3, [r0, #8]
   b6cd4:	4604      	mov	r4, r0
   b6cd6:	b90b      	cbnz	r3, b6cdc <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b6cd8:	f000 fe32 	bl	b7940 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6cdc:	68c3      	ldr	r3, [r0, #12]
   b6cde:	4798      	blx	r3
      if (_M_manager)
   b6ce0:	68a3      	ldr	r3, [r4, #8]
   b6ce2:	b11b      	cbz	r3, b6cec <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b6ce4:	2203      	movs	r2, #3
   b6ce6:	4621      	mov	r1, r4
   b6ce8:	4620      	mov	r0, r4
   b6cea:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b6cec:	4620      	mov	r0, r4
   b6cee:	2110      	movs	r1, #16
}
   b6cf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b6cf4:	f7fd bea1 	b.w	b4a3a <_ZdlPvj>

000b6cf8 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b6cf8:	4770      	bx	lr

000b6cfa <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b6cfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6cfc:	4606      	mov	r6, r0
   b6cfe:	4615      	mov	r5, r2
   b6d00:	460c      	mov	r4, r1
   b6d02:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b6d04:	42bc      	cmp	r4, r7
   b6d06:	d006      	beq.n	b6d16 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b6d08:	6833      	ldr	r3, [r6, #0]
   b6d0a:	f814 1b01 	ldrb.w	r1, [r4], #1
   b6d0e:	689b      	ldr	r3, [r3, #8]
   b6d10:	4630      	mov	r0, r6
   b6d12:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b6d14:	e7f6      	b.n	b6d04 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b6d16:	4628      	mov	r0, r5
   b6d18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6d1a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b6d1a:	7c00      	ldrb	r0, [r0, #16]
   b6d1c:	2200      	movs	r2, #0
   b6d1e:	f7fe bc7f 	b.w	b5620 <hal_i2c_write>

000b6d22 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b6d22:	7c00      	ldrb	r0, [r0, #16]
   b6d24:	2100      	movs	r1, #0
   b6d26:	f7fe bc83 	b.w	b5630 <hal_i2c_available>

000b6d2a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b6d2a:	7c00      	ldrb	r0, [r0, #16]
   b6d2c:	2100      	movs	r1, #0
   b6d2e:	f7fe bc87 	b.w	b5640 <hal_i2c_read>

000b6d32 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b6d32:	7c00      	ldrb	r0, [r0, #16]
   b6d34:	2100      	movs	r1, #0
   b6d36:	f7fe bc8b 	b.w	b5650 <hal_i2c_peek>

000b6d3a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b6d3a:	7c00      	ldrb	r0, [r0, #16]
   b6d3c:	2100      	movs	r1, #0
   b6d3e:	f7fe bc8f 	b.w	b5660 <hal_i2c_flush>

000b6d42 <_ZN7TwoWireD0Ev>:
   b6d42:	b510      	push	{r4, lr}
   b6d44:	2114      	movs	r1, #20
   b6d46:	4604      	mov	r4, r0
   b6d48:	f7fd fe77 	bl	b4a3a <_ZdlPvj>
   b6d4c:	4620      	mov	r0, r4
   b6d4e:	bd10      	pop	{r4, pc}

000b6d50 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6d50:	b538      	push	{r3, r4, r5, lr}
   b6d52:	4604      	mov	r4, r0
   b6d54:	4615      	mov	r5, r2
   b6d56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6d5a:	2200      	movs	r2, #0
   b6d5c:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b6d60:	4b09      	ldr	r3, [pc, #36]	; (b6d88 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b6d62:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6d64:	4608      	mov	r0, r1
   b6d66:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b6d68:	4629      	mov	r1, r5
   b6d6a:	f7fe fc89 	bl	b5680 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b6d6e:	30bf      	adds	r0, #191	; 0xbf
   b6d70:	d108      	bne.n	b6d84 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b6d72:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b6d74:	07db      	lsls	r3, r3, #31
   b6d76:	d505      	bpl.n	b6d84 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b6d78:	6868      	ldr	r0, [r5, #4]
   b6d7a:	f7fe fdf5 	bl	b5968 <free>
    free(conf.tx_buffer);
   b6d7e:	68e8      	ldr	r0, [r5, #12]
   b6d80:	f7fe fdf2 	bl	b5968 <free>
}
   b6d84:	4620      	mov	r0, r4
   b6d86:	bd38      	pop	{r3, r4, r5, pc}
   b6d88:	000b916c 	.word	0x000b916c

000b6d8c <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b6d8c:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b6d8e:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b6d90:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b6d94:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b6d96:	2201      	movs	r2, #1
   b6d98:	f04f 33ff 	mov.w	r3, #4294967295
   b6d9c:	f10d 0107 	add.w	r1, sp, #7
   b6da0:	47a0      	blx	r4
}
   b6da2:	b002      	add	sp, #8
   b6da4:	bd10      	pop	{r4, pc}

000b6da6 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b6da6:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b6da8:	6803      	ldr	r3, [r0, #0]
   b6daa:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b6dac:	f04f 33ff 	mov.w	r3, #4294967295
   b6db0:	46a4      	mov	ip, r4
}
   b6db2:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b6db6:	4760      	bx	ip

000b6db8 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b6db8:	b513      	push	{r0, r1, r4, lr}
   b6dba:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b6dbc:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b6dbe:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b6dc2:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b6dc4:	f10d 0107 	add.w	r1, sp, #7
   b6dc8:	2201      	movs	r2, #1
   b6dca:	47a0      	blx	r4
}
   b6dcc:	b002      	add	sp, #8
   b6dce:	bd10      	pop	{r4, pc}

000b6dd0 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b6dd0:	b510      	push	{r4, lr}
   b6dd2:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b6dd4:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6dd8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b6ddc:	429a      	cmp	r2, r3
int TCPClient::read() {
   b6dde:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b6de0:	d008      	beq.n	b6df4 <_ZN9TCPClient4readEv+0x24>
   b6de2:	6963      	ldr	r3, [r4, #20]
   b6de4:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b6de8:	1c51      	adds	r1, r2, #1
   b6dea:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b6dee:	4413      	add	r3, r2
   b6df0:	7918      	ldrb	r0, [r3, #4]
}
   b6df2:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b6df4:	6803      	ldr	r3, [r0, #0]
   b6df6:	691b      	ldr	r3, [r3, #16]
   b6df8:	4798      	blx	r3
   b6dfa:	2800      	cmp	r0, #0
   b6dfc:	d1f1      	bne.n	b6de2 <_ZN9TCPClient4readEv+0x12>
   b6dfe:	f04f 30ff 	mov.w	r0, #4294967295
   b6e02:	e7f6      	b.n	b6df2 <_ZN9TCPClient4readEv+0x22>

000b6e04 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b6e04:	4770      	bx	lr

000b6e06 <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b6e06:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b6e08:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b6e0a:	43c0      	mvns	r0, r0
   b6e0c:	0fc0      	lsrs	r0, r0, #31
   b6e0e:	4770      	bx	lr

000b6e10 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6e10:	4770      	bx	lr
	...

000b6e14 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b6e14:	4b06      	ldr	r3, [pc, #24]	; (b6e30 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b6e16:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b6e18:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b6e1a:	f100 040c 	add.w	r4, r0, #12
	    ||
   b6e1e:	d005      	beq.n	b6e2c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b6e20:	4608      	mov	r0, r1
   b6e22:	f000 fd91 	bl	b7948 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b6e26:	2800      	cmp	r0, #0
   b6e28:	bf08      	it	eq
   b6e2a:	2400      	moveq	r4, #0
      }
   b6e2c:	4620      	mov	r0, r4
   b6e2e:	bd10      	pop	{r4, pc}
   b6e30:	000b90ac 	.word	0x000b90ac

000b6e34 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6e34:	b510      	push	{r4, lr}
   b6e36:	21ac      	movs	r1, #172	; 0xac
   b6e38:	4604      	mov	r4, r0
   b6e3a:	f7fd fdfe 	bl	b4a3a <_ZdlPvj>
   b6e3e:	4620      	mov	r0, r4
   b6e40:	bd10      	pop	{r4, pc}

000b6e42 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b6e42:	21ac      	movs	r1, #172	; 0xac
   b6e44:	f7fd bdf9 	b.w	b4a3a <_ZdlPvj>

000b6e48 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b6e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b6e4c:	f04f 0800 	mov.w	r8, #0
   b6e50:	b086      	sub	sp, #24
   b6e52:	461c      	mov	r4, r3
   b6e54:	f8c0 8004 	str.w	r8, [r0, #4]
   b6e58:	4605      	mov	r5, r0
   b6e5a:	460e      	mov	r6, r1
   b6e5c:	4617      	mov	r7, r2
    struct timeval tv = {};
   b6e5e:	4641      	mov	r1, r8
   b6e60:	2210      	movs	r2, #16
   b6e62:	a802      	add	r0, sp, #8
   b6e64:	f001 ff2e 	bl	b8cc4 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b6e68:	1c63      	adds	r3, r4, #1
   b6e6a:	d009      	beq.n	b6e80 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b6e6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6e70:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b6e74:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b6e78:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b6e7c:	435c      	muls	r4, r3
   b6e7e:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b6e80:	6968      	ldr	r0, [r5, #20]
   b6e82:	2310      	movs	r3, #16
   b6e84:	9300      	str	r3, [sp, #0]
   b6e86:	6800      	ldr	r0, [r0, #0]
   b6e88:	ab02      	add	r3, sp, #8
   b6e8a:	f241 0205 	movw	r2, #4101	; 0x1005
   b6e8e:	f640 71ff 	movw	r1, #4095	; 0xfff
   b6e92:	f7fe fc05 	bl	b56a0 <sock_setsockopt>
    if (ret < 0) {
   b6e96:	2800      	cmp	r0, #0
   b6e98:	da07      	bge.n	b6eaa <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b6e9a:	f7fe fd8d 	bl	b59b8 <__errno>
   b6e9e:	6803      	ldr	r3, [r0, #0]
   b6ea0:	606b      	str	r3, [r5, #4]
        return 0;
   b6ea2:	2000      	movs	r0, #0
}
   b6ea4:	b006      	add	sp, #24
   b6ea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b6eaa:	6968      	ldr	r0, [r5, #20]
   b6eac:	2300      	movs	r3, #0
   b6eae:	6800      	ldr	r0, [r0, #0]
   b6eb0:	463a      	mov	r2, r7
   b6eb2:	4631      	mov	r1, r6
   b6eb4:	f7fe fc1c 	bl	b56f0 <sock_send>
    if (ret < 0) {
   b6eb8:	1e03      	subs	r3, r0, #0
   b6eba:	dbee      	blt.n	b6e9a <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b6ebc:	4618      	mov	r0, r3
   b6ebe:	e7f1      	b.n	b6ea4 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b6ec0 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b6ec0:	b530      	push	{r4, r5, lr}
   b6ec2:	b087      	sub	sp, #28
   b6ec4:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b6ec6:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b6ec8:	4668      	mov	r0, sp
   b6eca:	f7ff fe1b 	bl	b6b04 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b6ece:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6ed0:	3404      	adds	r4, #4
   b6ed2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6ed4:	682b      	ldr	r3, [r5, #0]
   b6ed6:	7023      	strb	r3, [r4, #0]
    }
   b6ed8:	b007      	add	sp, #28
   b6eda:	bd30      	pop	{r4, r5, pc}

000b6edc <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b6edc:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b6ede:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b6ee0:	4b05      	ldr	r3, [pc, #20]	; (b6ef8 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b6ee2:	4604      	mov	r4, r0
   b6ee4:	358c      	adds	r5, #140	; 0x8c
   b6ee6:	f844 3b04 	str.w	r3, [r4], #4
   b6eea:	4606      	mov	r6, r0
   b6eec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6eee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6ef0:	682b      	ldr	r3, [r5, #0]
   b6ef2:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b6ef4:	4630      	mov	r0, r6
   b6ef6:	bd70      	pop	{r4, r5, r6, pc}
   b6ef8:	000b90f8 	.word	0x000b90f8

000b6efc <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b6efc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6f00:	4698      	mov	r8, r3
    stop();
   b6f02:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b6f04:	b093      	sub	sp, #76	; 0x4c
   b6f06:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b6f08:	2400      	movs	r4, #0
    stop();
   b6f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b6f0c:	4606      	mov	r6, r0
   b6f0e:	4617      	mov	r7, r2
    stop();
   b6f10:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b6f12:	4628      	mov	r0, r5
   b6f14:	466b      	mov	r3, sp
   b6f16:	4622      	mov	r2, r4
   b6f18:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b6f1a:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b6f1c:	f7fe fab0 	bl	b5480 <netdb_getaddrinfo>
   b6f20:	4605      	mov	r5, r0
   b6f22:	2800      	cmp	r0, #0
   b6f24:	d163      	bne.n	b6fee <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b6f26:	9b00      	ldr	r3, [sp, #0]
   b6f28:	2b00      	cmp	r3, #0
   b6f2a:	d04b      	beq.n	b6fc4 <_ZN9TCPClient7connectEPKctm+0xc8>
   b6f2c:	695b      	ldr	r3, [r3, #20]
   b6f2e:	2b00      	cmp	r3, #0
   b6f30:	d048      	beq.n	b6fc4 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b6f32:	a806      	add	r0, sp, #24
   b6f34:	f7ff fda2 	bl	b6a7c <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b6f38:	9b00      	ldr	r3, [sp, #0]
   b6f3a:	695c      	ldr	r4, [r3, #20]
    if (saddr->sa_family == AF_INET) {
   b6f3c:	7863      	ldrb	r3, [r4, #1]
   b6f3e:	2b02      	cmp	r3, #2
   b6f40:	d104      	bne.n	b6f4c <_ZN9TCPClient7connectEPKctm+0x50>
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b6f42:	1d21      	adds	r1, r4, #4
            addr = (const uint8_t*)(&ptr[3]);
   b6f44:	a806      	add	r0, sp, #24
   b6f46:	f7ff ffbb 	bl	b6ec0 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        if (port) {
   b6f4a:	e026      	b.n	b6f9a <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b6f4c:	2b0a      	cmp	r3, #10
   b6f4e:	d124      	bne.n	b6f9a <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b6f50:	2211      	movs	r2, #17
   b6f52:	4629      	mov	r1, r5
   b6f54:	a801      	add	r0, sp, #4
   b6f56:	f001 feb5 	bl	b8cc4 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b6f5a:	68a3      	ldr	r3, [r4, #8]
   b6f5c:	2b00      	cmp	r3, #0
   b6f5e:	d038      	beq.n	b6fd2 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b6f60:	f104 0308 	add.w	r3, r4, #8
   b6f64:	f10d 0c04 	add.w	ip, sp, #4
   b6f68:	3418      	adds	r4, #24
   b6f6a:	6818      	ldr	r0, [r3, #0]
   b6f6c:	6859      	ldr	r1, [r3, #4]
   b6f6e:	4662      	mov	r2, ip
   b6f70:	c203      	stmia	r2!, {r0, r1}
   b6f72:	3308      	adds	r3, #8
   b6f74:	42a3      	cmp	r3, r4
   b6f76:	4694      	mov	ip, r2
   b6f78:	d1f7      	bne.n	b6f6a <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b6f7a:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b6f7c:	a901      	add	r1, sp, #4
   b6f7e:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b6f80:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b6f84:	f7ff fd88 	bl	b6a98 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b6f88:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b6f8c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b6f90:	ac07      	add	r4, sp, #28
   b6f92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6f94:	f8dc 3000 	ldr.w	r3, [ip]
   b6f98:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b6f9a:	a806      	add	r0, sp, #24
   b6f9c:	f7ff fd8e 	bl	b6abc <_ZNK9IPAddresscvbEv>
        if (addr) {
   b6fa0:	b180      	cbz	r0, b6fc4 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b6fa2:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b6fa4:	ad07      	add	r5, sp, #28
   b6fa6:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b6faa:	4b12      	ldr	r3, [pc, #72]	; (b6ff4 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b6fac:	930c      	str	r3, [sp, #48]	; 0x30
   b6fae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6fb0:	ac0d      	add	r4, sp, #52	; 0x34
   b6fb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6fb4:	682b      	ldr	r3, [r5, #0]
   b6fb6:	7023      	strb	r3, [r4, #0]
   b6fb8:	463a      	mov	r2, r7
   b6fba:	4643      	mov	r3, r8
   b6fbc:	a90c      	add	r1, sp, #48	; 0x30
   b6fbe:	4630      	mov	r0, r6
   b6fc0:	47c8      	blx	r9
   b6fc2:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b6fc4:	9800      	ldr	r0, [sp, #0]
   b6fc6:	f7fe fa53 	bl	b5470 <netdb_freeaddrinfo>
}
   b6fca:	4628      	mov	r0, r5
   b6fcc:	b013      	add	sp, #76	; 0x4c
   b6fce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b6fd2:	68e3      	ldr	r3, [r4, #12]
   b6fd4:	2b00      	cmp	r3, #0
   b6fd6:	d1c3      	bne.n	b6f60 <_ZN9TCPClient7connectEPKctm+0x64>
   b6fd8:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b6fdc:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b6fe0:	f7fe fac6 	bl	b5570 <inet_htonl>
   b6fe4:	4581      	cmp	r9, r0
   b6fe6:	d1bb      	bne.n	b6f60 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b6fe8:	f104 0114 	add.w	r1, r4, #20
   b6fec:	e7aa      	b.n	b6f44 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b6fee:	4625      	mov	r5, r4
   b6ff0:	e7e8      	b.n	b6fc4 <_ZN9TCPClient7connectEPKctm+0xc8>
   b6ff2:	bf00      	nop
   b6ff4:	000b90f8 	.word	0x000b90f8

000b6ff8 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b6ff8:	b538      	push	{r3, r4, r5, lr}
   b6ffa:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b6ffc:	681a      	ldr	r2, [r3, #0]
   b6ffe:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b7000:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b7002:	da10      	bge.n	b7026 <_ZN9TCPClient9connectedEv+0x2e>
   b7004:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7008:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b700c:	429a      	cmp	r2, r3
   b700e:	d10a      	bne.n	b7026 <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b7010:	6803      	ldr	r3, [r0, #0]
   b7012:	691b      	ldr	r3, [r3, #16]
   b7014:	4798      	blx	r3
        if (!rv) {
   b7016:	4604      	mov	r4, r0
   b7018:	b928      	cbnz	r0, b7026 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b701a:	682b      	ldr	r3, [r5, #0]
   b701c:	4628      	mov	r0, r5
   b701e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7020:	4798      	blx	r3
        rv = available();
   b7022:	4620      	mov	r0, r4
}
   b7024:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b7026:	2001      	movs	r0, #1
   b7028:	e7fc      	b.n	b7024 <_ZN9TCPClient9connectedEv+0x2c>

000b702a <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b702a:	b510      	push	{r4, lr}
   b702c:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b702e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7032:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7036:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b7038:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b703a:	d005      	beq.n	b7048 <_ZN9TCPClient4peekEv+0x1e>
   b703c:	6963      	ldr	r3, [r4, #20]
   b703e:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b7042:	4413      	add	r3, r2
   b7044:	7918      	ldrb	r0, [r3, #4]
}
   b7046:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b7048:	6803      	ldr	r3, [r0, #0]
   b704a:	691b      	ldr	r3, [r3, #16]
   b704c:	4798      	blx	r3
   b704e:	2800      	cmp	r0, #0
   b7050:	d1f4      	bne.n	b703c <_ZN9TCPClient4peekEv+0x12>
   b7052:	f04f 30ff 	mov.w	r0, #4294967295
   b7056:	e7f6      	b.n	b7046 <_ZN9TCPClient4peekEv+0x1c>

000b7058 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b7058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b705a:	6943      	ldr	r3, [r0, #20]
   b705c:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b705e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7062:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7066:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b7068:	4605      	mov	r5, r0
   b706a:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b706c:	d016      	beq.n	b709c <_ZN9TCPClient4readEPhj+0x44>
   b706e:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b7070:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b7074:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b7078:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b707a:	42bc      	cmp	r4, r7
   b707c:	bf28      	it	cs
   b707e:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b7080:	3304      	adds	r3, #4
   b7082:	4622      	mov	r2, r4
   b7084:	4419      	add	r1, r3
   b7086:	4630      	mov	r0, r6
   b7088:	f001 fe0e 	bl	b8ca8 <memcpy>
   b708c:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b708e:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b7092:	4423      	add	r3, r4
   b7094:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b7098:	4620      	mov	r0, r4
   b709a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b709c:	6803      	ldr	r3, [r0, #0]
   b709e:	691b      	ldr	r3, [r3, #16]
   b70a0:	4798      	blx	r3
   b70a2:	2800      	cmp	r0, #0
   b70a4:	d1e3      	bne.n	b706e <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b70a6:	f04f 34ff 	mov.w	r4, #4294967295
   b70aa:	e7f5      	b.n	b7098 <_ZN9TCPClient4readEPhj+0x40>

000b70ac <_ZN9TCPClient12flush_bufferEv>:
   b70ac:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b70ae:	2300      	movs	r3, #0
   b70b0:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b70b4:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b70b6:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b70ba:	4770      	bx	lr

000b70bc <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b70bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b70c0:	461f      	mov	r7, r3
    stop();
   b70c2:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b70c4:	460c      	mov	r4, r1
    stop();
   b70c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b70c8:	b08a      	sub	sp, #40	; 0x28
   b70ca:	4605      	mov	r5, r0
   b70cc:	4616      	mov	r6, r2
    stop();
   b70ce:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b70d0:	7d23      	ldrb	r3, [r4, #20]
   b70d2:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b70d6:	2b04      	cmp	r3, #4
   b70d8:	bf0c      	ite	eq
   b70da:	2002      	moveq	r0, #2
   b70dc:	200a      	movne	r0, #10
   b70de:	2206      	movs	r2, #6
   b70e0:	2101      	movs	r1, #1
   b70e2:	f7fe fb15 	bl	b5710 <sock_socket>
   b70e6:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b70ea:	696b      	ldr	r3, [r5, #20]
   b70ec:	681b      	ldr	r3, [r3, #0]
   b70ee:	2b00      	cmp	r3, #0
   b70f0:	da08      	bge.n	b7104 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b70f2:	682b      	ldr	r3, [r5, #0]
   b70f4:	4628      	mov	r0, r5
   b70f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b70f8:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b70fa:	4798      	blx	r3
}
   b70fc:	4620      	mov	r0, r4
   b70fe:	b00a      	add	sp, #40	; 0x28
   b7100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b7104:	4628      	mov	r0, r5
   b7106:	f7ff ffd1 	bl	b70ac <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b710a:	b1b7      	cbz	r7, b713a <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b710c:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b710e:	a903      	add	r1, sp, #12
   b7110:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b7112:	9303      	str	r3, [sp, #12]
   b7114:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b7118:	f7fe f9fa 	bl	b5510 <if_index_to_name>
   b711c:	2800      	cmp	r0, #0
   b711e:	d1e8      	bne.n	b70f2 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b7120:	6968      	ldr	r0, [r5, #20]
   b7122:	2306      	movs	r3, #6
   b7124:	9300      	str	r3, [sp, #0]
   b7126:	6800      	ldr	r0, [r0, #0]
   b7128:	ab03      	add	r3, sp, #12
   b712a:	f241 020b 	movw	r2, #4107	; 0x100b
   b712e:	f640 71ff 	movw	r1, #4095	; 0xfff
   b7132:	f7fe fab5 	bl	b56a0 <sock_setsockopt>
   b7136:	2800      	cmp	r0, #0
   b7138:	d1db      	bne.n	b70f2 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b713a:	221c      	movs	r2, #28
   b713c:	2100      	movs	r1, #0
   b713e:	a803      	add	r0, sp, #12
   b7140:	f001 fdc0 	bl	b8cc4 <memset>
    if (ip.version() == 4) {
   b7144:	7d23      	ldrb	r3, [r4, #20]
   b7146:	2b04      	cmp	r3, #4
   b7148:	d11d      	bne.n	b7186 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b714a:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b714e:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b7150:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b7154:	f7fe fa1c 	bl	b5590 <inet_htons>
   b7158:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b715c:	6860      	ldr	r0, [r4, #4]
   b715e:	f7fe fa07 	bl	b5570 <inet_htonl>
   b7162:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b7164:	696b      	ldr	r3, [r5, #20]
   b7166:	221c      	movs	r2, #28
   b7168:	6818      	ldr	r0, [r3, #0]
   b716a:	a903      	add	r1, sp, #12
   b716c:	f7fe faa8 	bl	b56c0 <sock_connect>
   b7170:	2800      	cmp	r0, #0
   b7172:	d1be      	bne.n	b70f2 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b7174:	3404      	adds	r4, #4
   b7176:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b7178:	696d      	ldr	r5, [r5, #20]
   b717a:	358c      	adds	r5, #140	; 0x8c
   b717c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b717e:	6823      	ldr	r3, [r4, #0]
   b7180:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b7182:	2401      	movs	r4, #1
   b7184:	e7ba      	b.n	b70fc <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b7186:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b718a:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b718c:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b7190:	f7fe f9fe 	bl	b5590 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b7194:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b7196:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b719a:	1d23      	adds	r3, r4, #4
   b719c:	f104 0714 	add.w	r7, r4, #20
   b71a0:	6818      	ldr	r0, [r3, #0]
   b71a2:	6859      	ldr	r1, [r3, #4]
   b71a4:	4632      	mov	r2, r6
   b71a6:	c203      	stmia	r2!, {r0, r1}
   b71a8:	3308      	adds	r3, #8
   b71aa:	42bb      	cmp	r3, r7
   b71ac:	4616      	mov	r6, r2
   b71ae:	d1f7      	bne.n	b71a0 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b71b0:	e7d8      	b.n	b7164 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b71b4 <_ZN9TCPClient9availableEv>:
{
   b71b4:	b530      	push	{r4, r5, lr}
   b71b6:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b71b8:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b71bc:	b08b      	sub	sp, #44	; 0x2c
   b71be:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b71c0:	b12b      	cbz	r3, b71ce <_ZN9TCPClient9availableEv+0x1a>
   b71c2:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b71c6:	429a      	cmp	r2, r3
   b71c8:	d101      	bne.n	b71ce <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b71ca:	f7ff ff6f 	bl	b70ac <_ZN9TCPClient12flush_bufferEv>
   b71ce:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b71d0:	6808      	ldr	r0, [r1, #0]
   b71d2:	2800      	cmp	r0, #0
   b71d4:	db18      	blt.n	b7208 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b71d6:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b71da:	2d7f      	cmp	r5, #127	; 0x7f
   b71dc:	d814      	bhi.n	b7208 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b71de:	3104      	adds	r1, #4
   b71e0:	2308      	movs	r3, #8
   b71e2:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b71e6:	4429      	add	r1, r5
   b71e8:	f7fe fa72 	bl	b56d0 <sock_recv>
            if (ret > 0) {
   b71ec:	2800      	cmp	r0, #0
   b71ee:	dd13      	ble.n	b7218 <_ZN9TCPClient9availableEv+0x64>
   b71f0:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b71f2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b71f6:	b90a      	cbnz	r2, b71fc <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b71f8:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b71fc:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b71fe:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7202:	4410      	add	r0, r2
   b7204:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b7208:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b720a:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b720e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b7212:	1ac0      	subs	r0, r0, r3
   b7214:	b00b      	add	sp, #44	; 0x2c
   b7216:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b7218:	f7fe fbce 	bl	b59b8 <__errno>
   b721c:	6803      	ldr	r3, [r0, #0]
   b721e:	2b0b      	cmp	r3, #11
   b7220:	d0f2      	beq.n	b7208 <_ZN9TCPClient9availableEv+0x54>
   b7222:	f7fe fbc9 	bl	b59b8 <__errno>
   b7226:	6803      	ldr	r3, [r0, #0]
   b7228:	2b0b      	cmp	r3, #11
   b722a:	d0ed      	beq.n	b7208 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b722c:	2320      	movs	r3, #32
   b722e:	2500      	movs	r5, #0
   b7230:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b7234:	f7fe fbc0 	bl	b59b8 <__errno>
   b7238:	6803      	ldr	r3, [r0, #0]
   b723a:	9301      	str	r3, [sp, #4]
   b723c:	4b08      	ldr	r3, [pc, #32]	; (b7260 <_ZN9TCPClient9availableEv+0xac>)
   b723e:	4909      	ldr	r1, [pc, #36]	; (b7264 <_ZN9TCPClient9availableEv+0xb0>)
   b7240:	9300      	str	r3, [sp, #0]
   b7242:	aa02      	add	r2, sp, #8
   b7244:	462b      	mov	r3, r5
   b7246:	2032      	movs	r0, #50	; 0x32
   b7248:	f7fe fab2 	bl	b57b0 <log_message>
                    sock_close(d_->sock);
   b724c:	6963      	ldr	r3, [r4, #20]
   b724e:	6818      	ldr	r0, [r3, #0]
   b7250:	f7fe fa2e 	bl	b56b0 <sock_close>
   b7254:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b7256:	f04f 32ff 	mov.w	r2, #4294967295
   b725a:	601a      	str	r2, [r3, #0]
   b725c:	e7d4      	b.n	b7208 <_ZN9TCPClient9availableEv+0x54>
   b725e:	bf00      	nop
   b7260:	000b9193 	.word	0x000b9193
   b7264:	000b918c 	.word	0x000b918c

000b7268 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b7268:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b726a:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b726c:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b726e:	6818      	ldr	r0, [r3, #0]
   b7270:	2800      	cmp	r0, #0
   b7272:	db01      	blt.n	b7278 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b7274:	f7fe fa1c 	bl	b56b0 <sock_close>
   b7278:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b727a:	f04f 32ff 	mov.w	r2, #4294967295
   b727e:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b7280:	6960      	ldr	r0, [r4, #20]
   b7282:	2211      	movs	r2, #17
   b7284:	2100      	movs	r1, #0
   b7286:	308c      	adds	r0, #140	; 0x8c
   b7288:	f001 fd1c 	bl	b8cc4 <memset>
    flush_buffer();
   b728c:	4620      	mov	r0, r4
}
   b728e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b7292:	f7ff bf0b 	b.w	b70ac <_ZN9TCPClient12flush_bufferEv>

000b7296 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b7296:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b7298:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b729a:	4604      	mov	r4, r0
          total(0) {
   b729c:	6001      	str	r1, [r0, #0]
   b729e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b72a2:	3088      	adds	r0, #136	; 0x88
   b72a4:	f7ff fbea 	bl	b6a7c <_ZN9IPAddressC1Ev>
}
   b72a8:	4620      	mov	r0, r4
   b72aa:	bd10      	pop	{r4, pc}

000b72ac <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b72ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b72ae:	2300      	movs	r3, #0
   b72b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b72b4:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b72b8:	4a0e      	ldr	r2, [pc, #56]	; (b72f4 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b72ba:	6103      	str	r3, [r0, #16]
   b72bc:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b72be:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b72c0:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b72c2:	20ac      	movs	r0, #172	; 0xac
   b72c4:	9101      	str	r1, [sp, #4]
   b72c6:	f7fd fbb4 	bl	b4a32 <_Znwj>
	  auto __pi = ::new (__mem)
   b72ca:	1e05      	subs	r5, r0, #0
   b72cc:	f105 060c 	add.w	r6, r5, #12
   b72d0:	d008      	beq.n	b72e4 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b72d2:	2301      	movs	r3, #1
   b72d4:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b72d8:	4b07      	ldr	r3, [pc, #28]	; (b72f8 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b72da:	9901      	ldr	r1, [sp, #4]
   b72dc:	602b      	str	r3, [r5, #0]
   b72de:	4630      	mov	r0, r6
   b72e0:	f7ff ffd9 	bl	b7296 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b72e4:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b72e6:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b72ea:	f7ff fedf 	bl	b70ac <_ZN9TCPClient12flush_bufferEv>
}
   b72ee:	b002      	add	sp, #8
   b72f0:	bd70      	pop	{r4, r5, r6, pc}
   b72f2:	bf00      	nop
   b72f4:	000b91c8 	.word	0x000b91c8
   b72f8:	000b91ac 	.word	0x000b91ac

000b72fc <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b72fc:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b72fe:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   b7302:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b7304:	f7ff ffd2 	bl	b72ac <_ZN9TCPClientC1Ei>
}
   b7308:	4620      	mov	r0, r4
   b730a:	bd10      	pop	{r4, pc}

000b730c <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b730c:	b510      	push	{r4, lr}
   b730e:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b7310:	6800      	ldr	r0, [r0, #0]
   b7312:	2800      	cmp	r0, #0
   b7314:	db01      	blt.n	b731a <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b7316:	f7fe f9cb 	bl	b56b0 <sock_close>
    }
}
   b731a:	4620      	mov	r0, r4
   b731c:	bd10      	pop	{r4, pc}

000b731e <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b731e:	300c      	adds	r0, #12
   b7320:	f7ff bff4 	b.w	b730c <_ZN9TCPClient4DataD1Ev>

000b7324 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b7324:	2200      	movs	r2, #0
   b7326:	6840      	ldr	r0, [r0, #4]
   b7328:	4611      	mov	r1, r2
   b732a:	f7fe ba95 	b.w	b5858 <network_ready>

000b732e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b732e:	2200      	movs	r2, #0
   b7330:	6840      	ldr	r0, [r0, #4]
   b7332:	4611      	mov	r1, r2
   b7334:	f7fe bab0 	b.w	b5898 <network_listening>

000b7338 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b7338:	2200      	movs	r2, #0
   b733a:	6840      	ldr	r0, [r0, #4]
   b733c:	4611      	mov	r1, r2
   b733e:	f7fe babb 	b.w	b58b8 <network_get_listen_timeout>

000b7342 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7342:	6840      	ldr	r0, [r0, #4]
   b7344:	2200      	movs	r2, #0
   b7346:	f7fe baaf 	b.w	b58a8 <network_set_listen_timeout>

000b734a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b734a:	6840      	ldr	r0, [r0, #4]
   b734c:	2200      	movs	r2, #0
   b734e:	f081 0101 	eor.w	r1, r1, #1
   b7352:	f7fe ba99 	b.w	b5888 <network_listen>

000b7356 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b7356:	2300      	movs	r3, #0
   b7358:	6840      	ldr	r0, [r0, #4]
   b735a:	461a      	mov	r2, r3
   b735c:	4619      	mov	r1, r3
   b735e:	f7fe ba8b 	b.w	b5878 <network_off>

000b7362 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7362:	2300      	movs	r3, #0
   b7364:	6840      	ldr	r0, [r0, #4]
   b7366:	461a      	mov	r2, r3
   b7368:	4619      	mov	r1, r3
   b736a:	f7fe ba7d 	b.w	b5868 <network_on>

000b736e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b736e:	2200      	movs	r2, #0
   b7370:	6840      	ldr	r0, [r0, #4]
   b7372:	4611      	mov	r1, r2
   b7374:	f7fe ba60 	b.w	b5838 <network_connecting>

000b7378 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7378:	6840      	ldr	r0, [r0, #4]
   b737a:	2200      	movs	r2, #0
   b737c:	2102      	movs	r1, #2
   b737e:	f7fe ba63 	b.w	b5848 <network_disconnect>

000b7382 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b7382:	2300      	movs	r3, #0
   b7384:	6840      	ldr	r0, [r0, #4]
   b7386:	461a      	mov	r2, r3
   b7388:	f7fe ba4e 	b.w	b5828 <network_connect>

000b738c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b738c:	4b02      	ldr	r3, [pc, #8]	; (b7398 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b738e:	2204      	movs	r2, #4
   b7390:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b7392:	4a02      	ldr	r2, [pc, #8]	; (b739c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b7394:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b7396:	4770      	bx	lr
   b7398:	2003e70c 	.word	0x2003e70c
   b739c:	000b9214 	.word	0x000b9214

000b73a0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b73a0:	2300      	movs	r3, #0
   b73a2:	6840      	ldr	r0, [r0, #4]
   b73a4:	461a      	mov	r2, r3
   b73a6:	f7fe ba3f 	b.w	b5828 <network_connect>

000b73aa <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b73aa:	6840      	ldr	r0, [r0, #4]
   b73ac:	2200      	movs	r2, #0
   b73ae:	2102      	movs	r1, #2
   b73b0:	f7fe ba4a 	b.w	b5848 <network_disconnect>

000b73b4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b73b4:	2200      	movs	r2, #0
   b73b6:	6840      	ldr	r0, [r0, #4]
   b73b8:	4611      	mov	r1, r2
   b73ba:	f7fe ba3d 	b.w	b5838 <network_connecting>

000b73be <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b73be:	2200      	movs	r2, #0
   b73c0:	6840      	ldr	r0, [r0, #4]
   b73c2:	4611      	mov	r1, r2
   b73c4:	f7fe ba48 	b.w	b5858 <network_ready>

000b73c8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b73c8:	2300      	movs	r3, #0
   b73ca:	6840      	ldr	r0, [r0, #4]
   b73cc:	461a      	mov	r2, r3
   b73ce:	4619      	mov	r1, r3
   b73d0:	f7fe ba4a 	b.w	b5868 <network_on>

000b73d4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b73d4:	2300      	movs	r3, #0
   b73d6:	6840      	ldr	r0, [r0, #4]
   b73d8:	461a      	mov	r2, r3
   b73da:	4619      	mov	r1, r3
   b73dc:	f7fe ba4c 	b.w	b5878 <network_off>

000b73e0 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b73e0:	6840      	ldr	r0, [r0, #4]
   b73e2:	2100      	movs	r1, #0
   b73e4:	f7fe ba70 	b.w	b58c8 <network_is_on>

000b73e8 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b73e8:	6840      	ldr	r0, [r0, #4]
   b73ea:	2100      	movs	r1, #0
   b73ec:	f7fe ba74 	b.w	b58d8 <network_is_off>

000b73f0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b73f0:	6840      	ldr	r0, [r0, #4]
   b73f2:	2200      	movs	r2, #0
   b73f4:	f081 0101 	eor.w	r1, r1, #1
   b73f8:	f7fe ba46 	b.w	b5888 <network_listen>

000b73fc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b73fc:	6840      	ldr	r0, [r0, #4]
   b73fe:	2200      	movs	r2, #0
   b7400:	f7fe ba52 	b.w	b58a8 <network_set_listen_timeout>

000b7404 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b7404:	2200      	movs	r2, #0
   b7406:	6840      	ldr	r0, [r0, #4]
   b7408:	4611      	mov	r1, r2
   b740a:	f7fe ba55 	b.w	b58b8 <network_get_listen_timeout>

000b740e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b740e:	2200      	movs	r2, #0
   b7410:	6840      	ldr	r0, [r0, #4]
   b7412:	4611      	mov	r1, r2
   b7414:	f7fe ba40 	b.w	b5898 <network_listening>

000b7418 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b7418:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b741c:	b095      	sub	sp, #84	; 0x54
   b741e:	4614      	mov	r4, r2
   b7420:	460d      	mov	r5, r1
   b7422:	4607      	mov	r7, r0
    IPAddress addr;
   b7424:	f7ff fb2a 	bl	b6a7c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b7428:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b742a:	221c      	movs	r2, #28
   b742c:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b742e:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b7430:	f001 fc48 	bl	b8cc4 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b7434:	2340      	movs	r3, #64	; 0x40
   b7436:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b7438:	4620      	mov	r0, r4
   b743a:	466b      	mov	r3, sp
   b743c:	aa0c      	add	r2, sp, #48	; 0x30
   b743e:	2100      	movs	r1, #0
   b7440:	f7fe f81e 	bl	b5480 <netdb_getaddrinfo>
    if (!r) {
   b7444:	4604      	mov	r4, r0
   b7446:	2800      	cmp	r0, #0
   b7448:	d14b      	bne.n	b74e2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b744a:	4602      	mov	r2, r0
   b744c:	2101      	movs	r1, #1
   b744e:	6868      	ldr	r0, [r5, #4]
   b7450:	f7fe fa02 	bl	b5858 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7454:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b7456:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7458:	4622      	mov	r2, r4
   b745a:	6868      	ldr	r0, [r5, #4]
   b745c:	f7fe f9fc 	bl	b5858 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7460:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7462:	4681      	mov	r9, r0
        bool ok = false;
   b7464:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7466:	2e00      	cmp	r6, #0
   b7468:	d03b      	beq.n	b74e2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b746a:	2900      	cmp	r1, #0
   b746c:	d139      	bne.n	b74e2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b746e:	6873      	ldr	r3, [r6, #4]
   b7470:	2b02      	cmp	r3, #2
   b7472:	d003      	beq.n	b747c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b7474:	2b0a      	cmp	r3, #10
   b7476:	d011      	beq.n	b749c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7478:	69f6      	ldr	r6, [r6, #28]
   b747a:	e7f4      	b.n	b7466 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b747c:	f1b8 0f00 	cmp.w	r8, #0
   b7480:	d0fa      	beq.n	b7478 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b7482:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b7484:	a806      	add	r0, sp, #24
   b7486:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b7488:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b748a:	f7ff fb3b 	bl	b6b04 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b748e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7490:	1d3c      	adds	r4, r7, #4
   b7492:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7494:	682b      	ldr	r3, [r5, #0]
   b7496:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b7498:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b749a:	e7ed      	b.n	b7478 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b749c:	f1b9 0f00 	cmp.w	r9, #0
   b74a0:	d0ea      	beq.n	b7478 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b74a2:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b74a4:	2210      	movs	r2, #16
   b74a6:	a801      	add	r0, sp, #4
   b74a8:	f001 fc0c 	bl	b8cc4 <memset>
                    a.v = 6;
   b74ac:	2306      	movs	r3, #6
   b74ae:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b74b2:	ad01      	add	r5, sp, #4
   b74b4:	f104 0308 	add.w	r3, r4, #8
   b74b8:	3418      	adds	r4, #24
   b74ba:	6818      	ldr	r0, [r3, #0]
   b74bc:	6859      	ldr	r1, [r3, #4]
   b74be:	462a      	mov	r2, r5
   b74c0:	c203      	stmia	r2!, {r0, r1}
   b74c2:	3308      	adds	r3, #8
   b74c4:	42a3      	cmp	r3, r4
   b74c6:	4615      	mov	r5, r2
   b74c8:	d1f7      	bne.n	b74ba <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b74ca:	a901      	add	r1, sp, #4
   b74cc:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b74ce:	ad07      	add	r5, sp, #28
   b74d0:	f7ff fae2 	bl	b6a98 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b74d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b74d6:	1d3c      	adds	r4, r7, #4
   b74d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b74da:	682b      	ldr	r3, [r5, #0]
   b74dc:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b74de:	4649      	mov	r1, r9
   b74e0:	e7ca      	b.n	b7478 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b74e2:	9800      	ldr	r0, [sp, #0]
   b74e4:	f7fd ffc4 	bl	b5470 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b74e8:	4638      	mov	r0, r7
   b74ea:	b015      	add	sp, #84	; 0x54
   b74ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b74f0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b74f0:	4b02      	ldr	r3, [pc, #8]	; (b74fc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b74f2:	4a03      	ldr	r2, [pc, #12]	; (b7500 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b74f4:	601a      	str	r2, [r3, #0]
   b74f6:	2200      	movs	r2, #0
   b74f8:	605a      	str	r2, [r3, #4]

} // spark
   b74fa:	4770      	bx	lr
   b74fc:	2003e714 	.word	0x2003e714
   b7500:	000b9250 	.word	0x000b9250

000b7504 <_ZN5spark16JSONBufferWriterD1Ev>:

private:
    Print &strm_;
};

class JSONBufferWriter: public JSONWriter {
   b7504:	4770      	bx	lr

000b7506 <_ZN5spark16JSONBufferWriterD0Ev>:
   b7506:	b510      	push	{r4, lr}
   b7508:	2114      	movs	r1, #20
   b750a:	4604      	mov	r4, r0
   b750c:	f7fd fa95 	bl	b4a3a <_ZdlPvj>
   b7510:	4620      	mov	r0, r4
   b7512:	bd10      	pop	{r4, pc}

000b7514 <_ZN5spark16JSONBufferWriter5writeEPKcj>:
    }
    write('"');
}

// spark::JSONBufferWriter
void spark::JSONBufferWriter::write(const char *data, size_t size) {
   b7514:	b538      	push	{r3, r4, r5, lr}
   b7516:	4615      	mov	r5, r2
    if (n_ < bufSize_) {
   b7518:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
   b751c:	4293      	cmp	r3, r2
void spark::JSONBufferWriter::write(const char *data, size_t size) {
   b751e:	4604      	mov	r4, r0
    if (n_ < bufSize_) {
   b7520:	d207      	bcs.n	b7532 <_ZN5spark16JSONBufferWriter5writeEPKcj+0x1e>
        memcpy(buf_ + n_, data, std::min(size, bufSize_ - n_));
   b7522:	1ad2      	subs	r2, r2, r3
   b7524:	6880      	ldr	r0, [r0, #8]
   b7526:	42aa      	cmp	r2, r5
   b7528:	bf28      	it	cs
   b752a:	462a      	movcs	r2, r5
   b752c:	4418      	add	r0, r3
   b752e:	f001 fbbb 	bl	b8ca8 <memcpy>
    }
    n_ += size;
   b7532:	6922      	ldr	r2, [r4, #16]
   b7534:	442a      	add	r2, r5
   b7536:	6122      	str	r2, [r4, #16]
}
   b7538:	bd38      	pop	{r3, r4, r5, pc}

000b753a <_ZN5spark16JSONBufferWriter6printfEPKcz>:

void spark::JSONBufferWriter::printf(const char *fmt, ...) {
   b753a:	b40e      	push	{r1, r2, r3}
   b753c:	b517      	push	{r0, r1, r2, r4, lr}
   b753e:	ab05      	add	r3, sp, #20
   b7540:	4604      	mov	r4, r0
   b7542:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list args;
    va_start(args, fmt);
    const int n = vsnprintf(buf_ + n_, (n_ < bufSize_) ? bufSize_ - n_ : 0, fmt, args);
   b7546:	68e1      	ldr	r1, [r4, #12]
    va_start(args, fmt);
   b7548:	9301      	str	r3, [sp, #4]
    const int n = vsnprintf(buf_ + n_, (n_ < bufSize_) ? bufSize_ - n_ : 0, fmt, args);
   b754a:	6903      	ldr	r3, [r0, #16]
   b754c:	6880      	ldr	r0, [r0, #8]
   b754e:	428b      	cmp	r3, r1
   b7550:	bf38      	it	cc
   b7552:	1ac9      	subcc	r1, r1, r3
   b7554:	4418      	add	r0, r3
   b7556:	bf28      	it	cs
   b7558:	2100      	movcs	r1, #0
   b755a:	9b01      	ldr	r3, [sp, #4]
   b755c:	f7fe fa14 	bl	b5988 <vsnprintf>
    va_end(args);
    n_ += n;
   b7560:	6923      	ldr	r3, [r4, #16]
   b7562:	4418      	add	r0, r3
   b7564:	6120      	str	r0, [r4, #16]
}
   b7566:	b003      	add	sp, #12
   b7568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b756c:	b003      	add	sp, #12
   b756e:	4770      	bx	lr

000b7570 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   b7570:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b7572:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   b7574:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b7578:	689b      	ldr	r3, [r3, #8]
   b757a:	2201      	movs	r2, #1
   b757c:	f10d 0107 	add.w	r1, sp, #7
   b7580:	4798      	blx	r3
}
   b7582:	b003      	add	sp, #12
   b7584:	f85d fb04 	ldr.w	pc, [sp], #4

000b7588 <_ZN5spark10JSONWriter8endArrayEv>:
spark::JSONWriter& spark::JSONWriter::endArray() {
   b7588:	b510      	push	{r4, lr}
    write(']');
   b758a:	215d      	movs	r1, #93	; 0x5d
spark::JSONWriter& spark::JSONWriter::endArray() {
   b758c:	4604      	mov	r4, r0
    write(']');
   b758e:	f7ff ffef 	bl	b7570 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   b7592:	2301      	movs	r3, #1
   b7594:	7123      	strb	r3, [r4, #4]
}
   b7596:	4620      	mov	r0, r4
   b7598:	bd10      	pop	{r4, pc}

000b759a <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   b759a:	b510      	push	{r4, lr}
    write('}');
   b759c:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   b759e:	4604      	mov	r4, r0
    write('}');
   b75a0:	f7ff ffe6 	bl	b7570 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   b75a4:	2301      	movs	r3, #1
   b75a6:	7123      	strb	r3, [r4, #4]
}
   b75a8:	4620      	mov	r0, r4
   b75aa:	bd10      	pop	{r4, pc}

000b75ac <_ZN5spark10JSONWriter14writeSeparatorEv>:
void spark::JSONWriter::writeSeparator() {
   b75ac:	b508      	push	{r3, lr}
    switch (state_) {
   b75ae:	7903      	ldrb	r3, [r0, #4]
   b75b0:	2b01      	cmp	r3, #1
   b75b2:	d002      	beq.n	b75ba <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   b75b4:	2b02      	cmp	r3, #2
   b75b6:	d004      	beq.n	b75c2 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
}
   b75b8:	bd08      	pop	{r3, pc}
        write(',');
   b75ba:	212c      	movs	r1, #44	; 0x2c
        write(':');
   b75bc:	f7ff ffd8 	bl	b7570 <_ZN5spark10JSONWriter5writeEc>
}
   b75c0:	e7fa      	b.n	b75b8 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   b75c2:	213a      	movs	r1, #58	; 0x3a
   b75c4:	e7fa      	b.n	b75bc <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000b75c6 <_ZN5spark10JSONWriter10beginArrayEv>:
spark::JSONWriter& spark::JSONWriter::beginArray() {
   b75c6:	b510      	push	{r4, lr}
   b75c8:	4604      	mov	r4, r0
    writeSeparator();
   b75ca:	f7ff ffef 	bl	b75ac <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('[');
   b75ce:	4620      	mov	r0, r4
   b75d0:	215b      	movs	r1, #91	; 0x5b
   b75d2:	f7ff ffcd 	bl	b7570 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   b75d6:	2300      	movs	r3, #0
   b75d8:	7123      	strb	r3, [r4, #4]
}
   b75da:	4620      	mov	r0, r4
   b75dc:	bd10      	pop	{r4, pc}

000b75de <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   b75de:	b510      	push	{r4, lr}
   b75e0:	4604      	mov	r4, r0
    writeSeparator();
   b75e2:	f7ff ffe3 	bl	b75ac <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   b75e6:	4620      	mov	r0, r4
   b75e8:	217b      	movs	r1, #123	; 0x7b
   b75ea:	f7ff ffc1 	bl	b7570 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   b75ee:	2300      	movs	r3, #0
   b75f0:	7123      	strb	r3, [r4, #4]
}
   b75f2:	4620      	mov	r0, r4
   b75f4:	bd10      	pop	{r4, pc}
	...

000b75f8 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   b75f8:	b513      	push	{r0, r1, r4, lr}
   b75fa:	4604      	mov	r4, r0
   b75fc:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b75fe:	f7ff ffd5 	bl	b75ac <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   b7602:	6823      	ldr	r3, [r4, #0]
   b7604:	9a01      	ldr	r2, [sp, #4]
   b7606:	68db      	ldr	r3, [r3, #12]
   b7608:	4903      	ldr	r1, [pc, #12]	; (b7618 <_ZN5spark10JSONWriter5valueEi+0x20>)
   b760a:	4620      	mov	r0, r4
   b760c:	4798      	blx	r3
    state_ = NEXT;
   b760e:	2301      	movs	r3, #1
}
   b7610:	4620      	mov	r0, r4
    state_ = NEXT;
   b7612:	7123      	strb	r3, [r4, #4]
}
   b7614:	b002      	add	sp, #8
   b7616:	bd10      	pop	{r4, pc}
   b7618:	000b91a0 	.word	0x000b91a0

000b761c <_ZN5spark10JSONWriter5valueEd>:
spark::JSONWriter& spark::JSONWriter::value(double val) {
   b761c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b761e:	4604      	mov	r4, r0
   b7620:	ec57 6b10 	vmov	r6, r7, d0
    writeSeparator();
   b7624:	f7ff ffc2 	bl	b75ac <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%g", val);
   b7628:	6823      	ldr	r3, [r4, #0]
   b762a:	4905      	ldr	r1, [pc, #20]	; (b7640 <_ZN5spark10JSONWriter5valueEd+0x24>)
   b762c:	68dd      	ldr	r5, [r3, #12]
   b762e:	4620      	mov	r0, r4
   b7630:	463b      	mov	r3, r7
   b7632:	4632      	mov	r2, r6
   b7634:	47a8      	blx	r5
    state_ = NEXT;
   b7636:	2301      	movs	r3, #1
   b7638:	7123      	strb	r3, [r4, #4]
}
   b763a:	4620      	mov	r0, r4
   b763c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b763e:	bf00      	nop
   b7640:	000b9284 	.word	0x000b9284

000b7644 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b7644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b7648:	460d      	mov	r5, r1
    write('"');
   b764a:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b764c:	4690      	mov	r8, r2
   b764e:	4604      	mov	r4, r0
    write('"');
   b7650:	f7ff ff8e 	bl	b7570 <_ZN5spark10JSONWriter5writeEc>
                printf("u%04x", (unsigned)c);
   b7654:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b76fc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   b7658:	44a8      	add	r8, r5
    const char *s = str;
   b765a:	462f      	mov	r7, r5
    while (s != end) {
   b765c:	4547      	cmp	r7, r8
   b765e:	46ba      	mov	sl, r7
   b7660:	d03d      	beq.n	b76de <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   b7662:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   b7666:	2e22      	cmp	r6, #34	; 0x22
   b7668:	d006      	beq.n	b7678 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b766a:	2e5c      	cmp	r6, #92	; 0x5c
   b766c:	d004      	beq.n	b7678 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b766e:	4630      	mov	r0, r6
   b7670:	f001 fb12 	bl	b8c98 <isprint>
   b7674:	2800      	cmp	r0, #0
   b7676:	d1f1      	bne.n	b765c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   b7678:	6823      	ldr	r3, [r4, #0]
   b767a:	ebaa 0205 	sub.w	r2, sl, r5
   b767e:	689b      	ldr	r3, [r3, #8]
   b7680:	4629      	mov	r1, r5
   b7682:	4620      	mov	r0, r4
   b7684:	4798      	blx	r3
            write('\\');
   b7686:	215c      	movs	r1, #92	; 0x5c
   b7688:	4620      	mov	r0, r4
   b768a:	f7ff ff71 	bl	b7570 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   b768e:	2e0d      	cmp	r6, #13
   b7690:	d80a      	bhi.n	b76a8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   b7692:	2e07      	cmp	r6, #7
   b7694:	d91c      	bls.n	b76d0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b7696:	f1a6 0308 	sub.w	r3, r6, #8
   b769a:	2b05      	cmp	r3, #5
   b769c:	d818      	bhi.n	b76d0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b769e:	e8df f003 	tbb	[pc, r3]
   b76a2:	0f0d      	.short	0x0f0d
   b76a4:	15131711 	.word	0x15131711
   b76a8:	2e22      	cmp	r6, #34	; 0x22
   b76aa:	d001      	beq.n	b76b0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   b76ac:	2e5c      	cmp	r6, #92	; 0x5c
   b76ae:	d10f      	bne.n	b76d0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   b76b0:	4631      	mov	r1, r6
                write('b');
   b76b2:	4620      	mov	r0, r4
   b76b4:	f7ff ff5c 	bl	b7570 <_ZN5spark10JSONWriter5writeEc>
            str = s + 1;
   b76b8:	463d      	mov	r5, r7
    while (s != end) {
   b76ba:	e7cf      	b.n	b765c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   b76bc:	2162      	movs	r1, #98	; 0x62
   b76be:	e7f8      	b.n	b76b2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   b76c0:	2174      	movs	r1, #116	; 0x74
   b76c2:	e7f6      	b.n	b76b2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   b76c4:	216e      	movs	r1, #110	; 0x6e
   b76c6:	e7f4      	b.n	b76b2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   b76c8:	2166      	movs	r1, #102	; 0x66
   b76ca:	e7f2      	b.n	b76b2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   b76cc:	2172      	movs	r1, #114	; 0x72
   b76ce:	e7f0      	b.n	b76b2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   b76d0:	6823      	ldr	r3, [r4, #0]
   b76d2:	4632      	mov	r2, r6
   b76d4:	68db      	ldr	r3, [r3, #12]
   b76d6:	4649      	mov	r1, r9
   b76d8:	4620      	mov	r0, r4
   b76da:	4798      	blx	r3
                break;
   b76dc:	e7ec      	b.n	b76b8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
    if (s != str) {
   b76de:	42bd      	cmp	r5, r7
   b76e0:	d005      	beq.n	b76ee <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   b76e2:	6823      	ldr	r3, [r4, #0]
   b76e4:	1b7a      	subs	r2, r7, r5
   b76e6:	689b      	ldr	r3, [r3, #8]
   b76e8:	4629      	mov	r1, r5
   b76ea:	4620      	mov	r0, r4
   b76ec:	4798      	blx	r3
    write('"');
   b76ee:	2122      	movs	r1, #34	; 0x22
   b76f0:	4620      	mov	r0, r4
   b76f2:	f7ff ff3d 	bl	b7570 <_ZN5spark10JSONWriter5writeEc>
}
   b76f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b76fa:	bf00      	nop
   b76fc:	000b9287 	.word	0x000b9287

000b7700 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   b7700:	b513      	push	{r0, r1, r4, lr}
   b7702:	4604      	mov	r4, r0
   b7704:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b7708:	f7ff ff50 	bl	b75ac <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   b770c:	4620      	mov	r0, r4
   b770e:	e9dd 2100 	ldrd	r2, r1, [sp]
   b7712:	f7ff ff97 	bl	b7644 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   b7716:	2302      	movs	r3, #2
}
   b7718:	4620      	mov	r0, r4
    state_ = VALUE;
   b771a:	7123      	strb	r3, [r4, #4]
}
   b771c:	b002      	add	sp, #8
   b771e:	bd10      	pop	{r4, pc}

000b7720 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   b7720:	b513      	push	{r0, r1, r4, lr}
   b7722:	4604      	mov	r4, r0
   b7724:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b7728:	f7ff ff40 	bl	b75ac <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   b772c:	4620      	mov	r0, r4
   b772e:	e9dd 2100 	ldrd	r2, r1, [sp]
   b7732:	f7ff ff87 	bl	b7644 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   b7736:	2301      	movs	r3, #1
}
   b7738:	4620      	mov	r0, r4
    state_ = NEXT;
   b773a:	7123      	strb	r3, [r4, #4]
}
   b773c:	b002      	add	sp, #8
   b773e:	bd10      	pop	{r4, pc}

000b7740 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b7740:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b7742:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b7744:	d902      	bls.n	b774c <pinAvailable+0xc>
    return false;
   b7746:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b7748:	b002      	add	sp, #8
   b774a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b774c:	f1a0 030b 	sub.w	r3, r0, #11
   b7750:	2b02      	cmp	r3, #2
   b7752:	d81a      	bhi.n	b778a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b7754:	4c17      	ldr	r4, [pc, #92]	; (b77b4 <pinAvailable+0x74>)
   b7756:	7821      	ldrb	r1, [r4, #0]
   b7758:	f3bf 8f5b 	dmb	ish
   b775c:	f011 0101 	ands.w	r1, r1, #1
   b7760:	d10b      	bne.n	b777a <pinAvailable+0x3a>
   b7762:	4620      	mov	r0, r4
   b7764:	9101      	str	r1, [sp, #4]
   b7766:	f7fd f96a 	bl	b4a3e <__cxa_guard_acquire>
   b776a:	9901      	ldr	r1, [sp, #4]
   b776c:	b128      	cbz	r0, b777a <pinAvailable+0x3a>
   b776e:	4812      	ldr	r0, [pc, #72]	; (b77b8 <pinAvailable+0x78>)
   b7770:	f7fe f978 	bl	b5a64 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b7774:	4620      	mov	r0, r4
   b7776:	f7fd f967 	bl	b4a48 <__cxa_guard_release>
   b777a:	4b0f      	ldr	r3, [pc, #60]	; (b77b8 <pinAvailable+0x78>)
   b777c:	7818      	ldrb	r0, [r3, #0]
   b777e:	f7fd ffd7 	bl	b5730 <hal_spi_is_enabled>
   b7782:	2800      	cmp	r0, #0
   b7784:	d1df      	bne.n	b7746 <pinAvailable+0x6>
  return true; // 'pin' is available
   b7786:	2001      	movs	r0, #1
   b7788:	e7de      	b.n	b7748 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b778a:	2801      	cmp	r0, #1
   b778c:	d809      	bhi.n	b77a2 <pinAvailable+0x62>
   b778e:	f000 f8b1 	bl	b78f4 <_Z19__fetch_global_Wirev>
   b7792:	2100      	movs	r1, #0
   b7794:	7c00      	ldrb	r0, [r0, #16]
   b7796:	f7fd ff6b 	bl	b5670 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b779a:	f080 0001 	eor.w	r0, r0, #1
   b779e:	b2c0      	uxtb	r0, r0
   b77a0:	e7d2      	b.n	b7748 <pinAvailable+0x8>
   b77a2:	3809      	subs	r0, #9
   b77a4:	2801      	cmp	r0, #1
   b77a6:	d8ee      	bhi.n	b7786 <pinAvailable+0x46>
   b77a8:	f000 f864 	bl	b7874 <_Z22__fetch_global_Serial1v>
   b77ac:	7c00      	ldrb	r0, [r0, #16]
   b77ae:	f7fd ff1f 	bl	b55f0 <hal_usart_is_enabled>
   b77b2:	e7f2      	b.n	b779a <pinAvailable+0x5a>
   b77b4:	2003e71c 	.word	0x2003e71c
   b77b8:	2003e720 	.word	0x2003e720

000b77bc <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b77bc:	2823      	cmp	r0, #35	; 0x23
{
   b77be:	b538      	push	{r3, r4, r5, lr}
   b77c0:	4604      	mov	r4, r0
   b77c2:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b77c4:	d80a      	bhi.n	b77dc <pinMode+0x20>
   b77c6:	29ff      	cmp	r1, #255	; 0xff
   b77c8:	d008      	beq.n	b77dc <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b77ca:	f7ff ffb9 	bl	b7740 <pinAvailable>
   b77ce:	b128      	cbz	r0, b77dc <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
   b77d0:	4629      	mov	r1, r5
   b77d2:	4620      	mov	r0, r4
}
   b77d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
   b77d8:	f7fd be6a 	b.w	b54b0 <hal_gpio_mode>
}
   b77dc:	bd38      	pop	{r3, r4, r5, pc}

000b77de <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
   b77de:	b538      	push	{r3, r4, r5, lr}
   b77e0:	4604      	mov	r4, r0
   b77e2:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
   b77e4:	f7fd fe6c 	bl	b54c0 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b77e8:	28ff      	cmp	r0, #255	; 0xff
   b77ea:	d010      	beq.n	b780e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b77ec:	2806      	cmp	r0, #6
   b77ee:	d804      	bhi.n	b77fa <digitalWrite+0x1c>
   b77f0:	234d      	movs	r3, #77	; 0x4d
   b77f2:	fa23 f000 	lsr.w	r0, r3, r0
   b77f6:	07c3      	lsls	r3, r0, #31
   b77f8:	d409      	bmi.n	b780e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b77fa:	4620      	mov	r0, r4
   b77fc:	f7ff ffa0 	bl	b7740 <pinAvailable>
   b7800:	b128      	cbz	r0, b780e <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
   b7802:	4629      	mov	r1, r5
   b7804:	4620      	mov	r0, r4
}
   b7806:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
   b780a:	f7fd be61 	b.w	b54d0 <hal_gpio_write>
}
   b780e:	bd38      	pop	{r3, r4, r5, pc}

000b7810 <analogRead>:
int32_t analogRead(hal_pin_t pin)
{
#if !HAL_PLATFORM_RTL872X
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b7810:	280d      	cmp	r0, #13
{
   b7812:	b510      	push	{r4, lr}
   b7814:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b7816:	bf9c      	itt	ls
   b7818:	340e      	addls	r4, #14
   b781a:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
#endif

  // Safety check
  if( !pinAvailable(pin) ) {
   b781c:	4620      	mov	r0, r4
   b781e:	f7ff ff8f 	bl	b7740 <pinAvailable>
   b7822:	b150      	cbz	r0, b783a <analogRead+0x2a>
    return LOW;
  }

  if(hal_pin_validate_function(pin, PF_ADC)!=PF_ADC)
   b7824:	2103      	movs	r1, #3
   b7826:	4620      	mov	r0, r4
   b7828:	f7fd fe3a 	bl	b54a0 <hal_pin_validate_function>
   b782c:	2803      	cmp	r0, #3
   b782e:	d104      	bne.n	b783a <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b7830:	4620      	mov	r0, r4
}
   b7832:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b7836:	f7fd be63 	b.w	b5500 <hal_adc_read>
}
   b783a:	2000      	movs	r0, #0
   b783c:	bd10      	pop	{r4, pc}

000b783e <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b783e:	4770      	bx	lr

000b7840 <_Z20acquireSerial1Bufferv>:
{
   b7840:	b538      	push	{r3, r4, r5, lr}
   b7842:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b7844:	2514      	movs	r5, #20
   b7846:	462a      	mov	r2, r5
   b7848:	2100      	movs	r1, #0
   b784a:	f001 fa3b 	bl	b8cc4 <memset>
   b784e:	8025      	strh	r5, [r4, #0]
   b7850:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7852:	4907      	ldr	r1, [pc, #28]	; (b7870 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b7854:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7856:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b7858:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b785a:	f000 f86f 	bl	b793c <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b785e:	4904      	ldr	r1, [pc, #16]	; (b7870 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b7860:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7862:	4628      	mov	r0, r5
   b7864:	f000 f86a 	bl	b793c <_ZnajRKSt9nothrow_t>
    };
   b7868:	60e0      	str	r0, [r4, #12]
}
   b786a:	4620      	mov	r0, r4
   b786c:	bd38      	pop	{r3, r4, r5, pc}
   b786e:	bf00      	nop
   b7870:	000b92a8 	.word	0x000b92a8

000b7874 <_Z22__fetch_global_Serial1v>:
{
   b7874:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7876:	4d0e      	ldr	r5, [pc, #56]	; (b78b0 <_Z22__fetch_global_Serial1v+0x3c>)
   b7878:	7829      	ldrb	r1, [r5, #0]
   b787a:	f3bf 8f5b 	dmb	ish
   b787e:	f011 0401 	ands.w	r4, r1, #1
{
   b7882:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7884:	d111      	bne.n	b78aa <_Z22__fetch_global_Serial1v+0x36>
   b7886:	4628      	mov	r0, r5
   b7888:	f7fd f8d9 	bl	b4a3e <__cxa_guard_acquire>
   b788c:	b168      	cbz	r0, b78aa <_Z22__fetch_global_Serial1v+0x36>
   b788e:	a801      	add	r0, sp, #4
   b7890:	f7ff ffd6 	bl	b7840 <_Z20acquireSerial1Bufferv>
   b7894:	aa01      	add	r2, sp, #4
   b7896:	4621      	mov	r1, r4
   b7898:	4806      	ldr	r0, [pc, #24]	; (b78b4 <_Z22__fetch_global_Serial1v+0x40>)
   b789a:	f7ff fa05 	bl	b6ca8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b789e:	4628      	mov	r0, r5
   b78a0:	f7fd f8d2 	bl	b4a48 <__cxa_guard_release>
   b78a4:	4804      	ldr	r0, [pc, #16]	; (b78b8 <_Z22__fetch_global_Serial1v+0x44>)
   b78a6:	f001 f9e9 	bl	b8c7c <atexit>
    return serial1;
}
   b78aa:	4802      	ldr	r0, [pc, #8]	; (b78b4 <_Z22__fetch_global_Serial1v+0x40>)
   b78ac:	b007      	add	sp, #28
   b78ae:	bd30      	pop	{r4, r5, pc}
   b78b0:	2003e728 	.word	0x2003e728
   b78b4:	2003e72c 	.word	0x2003e72c
   b78b8:	000b783f 	.word	0x000b783f

000b78bc <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b78bc:	4770      	bx	lr
	...

000b78c0 <_Z17acquireWireBufferv>:
{
   b78c0:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b78c2:	4b0a      	ldr	r3, [pc, #40]	; (b78ec <_Z17acquireWireBufferv+0x2c>)
   b78c4:	6003      	str	r3, [r0, #0]
   b78c6:	2301      	movs	r3, #1
{
   b78c8:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b78ca:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b78cc:	4908      	ldr	r1, [pc, #32]	; (b78f0 <_Z17acquireWireBufferv+0x30>)
   b78ce:	2020      	movs	r0, #32
   b78d0:	f000 f834 	bl	b793c <_ZnajRKSt9nothrow_t>
	};
   b78d4:	2520      	movs	r5, #32
   b78d6:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b78d8:	4905      	ldr	r1, [pc, #20]	; (b78f0 <_Z17acquireWireBufferv+0x30>)
	};
   b78da:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b78dc:	4628      	mov	r0, r5
   b78de:	f000 f82d 	bl	b793c <_ZnajRKSt9nothrow_t>
	};
   b78e2:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b78e6:	4620      	mov	r0, r4
   b78e8:	bd38      	pop	{r3, r4, r5, pc}
   b78ea:	bf00      	nop
   b78ec:	00010018 	.word	0x00010018
   b78f0:	000b92a8 	.word	0x000b92a8

000b78f4 <_Z19__fetch_global_Wirev>:
{
   b78f4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b78f6:	4d0e      	ldr	r5, [pc, #56]	; (b7930 <_Z19__fetch_global_Wirev+0x3c>)
   b78f8:	7829      	ldrb	r1, [r5, #0]
   b78fa:	f3bf 8f5b 	dmb	ish
   b78fe:	f011 0401 	ands.w	r4, r1, #1
{
   b7902:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7904:	d111      	bne.n	b792a <_Z19__fetch_global_Wirev+0x36>
   b7906:	4628      	mov	r0, r5
   b7908:	f7fd f899 	bl	b4a3e <__cxa_guard_acquire>
   b790c:	b168      	cbz	r0, b792a <_Z19__fetch_global_Wirev+0x36>
   b790e:	4668      	mov	r0, sp
   b7910:	f7ff ffd6 	bl	b78c0 <_Z17acquireWireBufferv>
   b7914:	466a      	mov	r2, sp
   b7916:	4621      	mov	r1, r4
   b7918:	4806      	ldr	r0, [pc, #24]	; (b7934 <_Z19__fetch_global_Wirev+0x40>)
   b791a:	f7ff fa19 	bl	b6d50 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b791e:	4628      	mov	r0, r5
   b7920:	f7fd f892 	bl	b4a48 <__cxa_guard_release>
   b7924:	4804      	ldr	r0, [pc, #16]	; (b7938 <_Z19__fetch_global_Wirev+0x44>)
   b7926:	f001 f9a9 	bl	b8c7c <atexit>
	return wire;
}
   b792a:	4802      	ldr	r0, [pc, #8]	; (b7934 <_Z19__fetch_global_Wirev+0x40>)
   b792c:	b007      	add	sp, #28
   b792e:	bd30      	pop	{r4, r5, pc}
   b7930:	2003e744 	.word	0x2003e744
   b7934:	2003e748 	.word	0x2003e748
   b7938:	000b78bd 	.word	0x000b78bd

000b793c <_ZnajRKSt9nothrow_t>:
   b793c:	f7fd b87b 	b.w	b4a36 <_Znaj>

000b7940 <_ZSt25__throw_bad_function_callv>:
   b7940:	b508      	push	{r3, lr}
   b7942:	f7fe f829 	bl	b5998 <abort>
	...

000b7948 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b7948:	4901      	ldr	r1, [pc, #4]	; (b7950 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b794a:	f000 b8f9 	b.w	b7b40 <_ZNKSt9type_infoeqERKS_>
   b794e:	bf00      	nop
   b7950:	000b92c4 	.word	0x000b92c4

000b7954 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b7954:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b7956:	2400      	movs	r4, #0
   b7958:	2310      	movs	r3, #16
   b795a:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b795e:	6803      	ldr	r3, [r0, #0]
   b7960:	4615      	mov	r5, r2
   b7962:	699e      	ldr	r6, [r3, #24]
   b7964:	6812      	ldr	r2, [r2, #0]
   b7966:	466b      	mov	r3, sp
   b7968:	e9cd 4400 	strd	r4, r4, [sp]
   b796c:	47b0      	blx	r6
   b796e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b7972:	f003 0306 	and.w	r3, r3, #6
   b7976:	2b06      	cmp	r3, #6
   b7978:	bf03      	ittte	eq
   b797a:	9b00      	ldreq	r3, [sp, #0]
   b797c:	602b      	streq	r3, [r5, #0]
   b797e:	2001      	moveq	r0, #1
   b7980:	4620      	movne	r0, r4
   b7982:	b004      	add	sp, #16
   b7984:	bd70      	pop	{r4, r5, r6, pc}

000b7986 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b7986:	9800      	ldr	r0, [sp, #0]
   b7988:	4290      	cmp	r0, r2
   b798a:	bf14      	ite	ne
   b798c:	2001      	movne	r0, #1
   b798e:	2006      	moveq	r0, #6
   b7990:	4770      	bx	lr
	...

000b7994 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b7994:	b510      	push	{r4, lr}
   b7996:	4b03      	ldr	r3, [pc, #12]	; (b79a4 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b7998:	6003      	str	r3, [r0, #0]
   b799a:	4604      	mov	r4, r0
   b799c:	f000 f8cd 	bl	b7b3a <_ZNSt9type_infoD1Ev>
   b79a0:	4620      	mov	r0, r4
   b79a2:	bd10      	pop	{r4, pc}
   b79a4:	000b9304 	.word	0x000b9304

000b79a8 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b79a8:	b510      	push	{r4, lr}
   b79aa:	4604      	mov	r4, r0
   b79ac:	f7ff fff2 	bl	b7994 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b79b0:	4620      	mov	r0, r4
   b79b2:	2108      	movs	r1, #8
   b79b4:	f7fd f841 	bl	b4a3a <_ZdlPvj>
   b79b8:	4620      	mov	r0, r4
   b79ba:	bd10      	pop	{r4, pc}

000b79bc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b79bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b79c0:	461f      	mov	r7, r3
   b79c2:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b79c6:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b79ca:	4598      	cmp	r8, r3
   b79cc:	4606      	mov	r6, r0
   b79ce:	4615      	mov	r5, r2
   b79d0:	d107      	bne.n	b79e2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b79d2:	9907      	ldr	r1, [sp, #28]
   b79d4:	f000 f8b4 	bl	b7b40 <_ZNKSt9type_infoeqERKS_>
   b79d8:	b118      	cbz	r0, b79e2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b79da:	7165      	strb	r5, [r4, #5]
   b79dc:	2000      	movs	r0, #0
   b79de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b79e2:	4639      	mov	r1, r7
   b79e4:	4630      	mov	r0, r6
   b79e6:	f000 f8ab 	bl	b7b40 <_ZNKSt9type_infoeqERKS_>
   b79ea:	2800      	cmp	r0, #0
   b79ec:	d0f6      	beq.n	b79dc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b79ee:	2301      	movs	r3, #1
   b79f0:	f8c4 8000 	str.w	r8, [r4]
   b79f4:	7125      	strb	r5, [r4, #4]
   b79f6:	71a3      	strb	r3, [r4, #6]
   b79f8:	e7f0      	b.n	b79dc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b79fa <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b79fa:	b538      	push	{r3, r4, r5, lr}
   b79fc:	4615      	mov	r5, r2
   b79fe:	461c      	mov	r4, r3
   b7a00:	f000 f89e 	bl	b7b40 <_ZNKSt9type_infoeqERKS_>
   b7a04:	b120      	cbz	r0, b7a10 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b7a06:	2308      	movs	r3, #8
   b7a08:	60e3      	str	r3, [r4, #12]
   b7a0a:	2306      	movs	r3, #6
   b7a0c:	6025      	str	r5, [r4, #0]
   b7a0e:	7123      	strb	r3, [r4, #4]
   b7a10:	bd38      	pop	{r3, r4, r5, pc}

000b7a12 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b7a12:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7a14:	4605      	mov	r5, r0
   b7a16:	460c      	mov	r4, r1
   b7a18:	9201      	str	r2, [sp, #4]
   b7a1a:	461e      	mov	r6, r3
   b7a1c:	f000 f890 	bl	b7b40 <_ZNKSt9type_infoeqERKS_>
   b7a20:	b950      	cbnz	r0, b7a38 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b7a22:	2e03      	cmp	r6, #3
   b7a24:	d808      	bhi.n	b7a38 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b7a26:	6823      	ldr	r3, [r4, #0]
   b7a28:	9a01      	ldr	r2, [sp, #4]
   b7a2a:	695b      	ldr	r3, [r3, #20]
   b7a2c:	4629      	mov	r1, r5
   b7a2e:	4620      	mov	r0, r4
   b7a30:	b002      	add	sp, #8
   b7a32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b7a36:	4718      	bx	r3
   b7a38:	b002      	add	sp, #8
   b7a3a:	bd70      	pop	{r4, r5, r6, pc}

000b7a3c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b7a3c:	b510      	push	{r4, lr}
   b7a3e:	4b03      	ldr	r3, [pc, #12]	; (b7a4c <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b7a40:	6003      	str	r3, [r0, #0]
   b7a42:	4604      	mov	r4, r0
   b7a44:	f7ff ffa6 	bl	b7994 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b7a48:	4620      	mov	r0, r4
   b7a4a:	bd10      	pop	{r4, pc}
   b7a4c:	000b9364 	.word	0x000b9364

000b7a50 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b7a50:	b510      	push	{r4, lr}
   b7a52:	4604      	mov	r4, r0
   b7a54:	f7ff fff2 	bl	b7a3c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b7a58:	4620      	mov	r0, r4
   b7a5a:	210c      	movs	r1, #12
   b7a5c:	f7fc ffed 	bl	b4a3a <_ZdlPvj>
   b7a60:	4620      	mov	r0, r4
   b7a62:	bd10      	pop	{r4, pc}

000b7a64 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b7a64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b7a66:	9f08      	ldr	r7, [sp, #32]
   b7a68:	4297      	cmp	r7, r2
   b7a6a:	4605      	mov	r5, r0
   b7a6c:	460e      	mov	r6, r1
   b7a6e:	4614      	mov	r4, r2
   b7a70:	d00a      	beq.n	b7a88 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b7a72:	68a8      	ldr	r0, [r5, #8]
   b7a74:	6802      	ldr	r2, [r0, #0]
   b7a76:	9708      	str	r7, [sp, #32]
   b7a78:	6a15      	ldr	r5, [r2, #32]
   b7a7a:	4631      	mov	r1, r6
   b7a7c:	4622      	mov	r2, r4
   b7a7e:	46ac      	mov	ip, r5
   b7a80:	b003      	add	sp, #12
   b7a82:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b7a86:	4760      	bx	ip
   b7a88:	4619      	mov	r1, r3
   b7a8a:	9301      	str	r3, [sp, #4]
   b7a8c:	f000 f858 	bl	b7b40 <_ZNKSt9type_infoeqERKS_>
   b7a90:	9b01      	ldr	r3, [sp, #4]
   b7a92:	2800      	cmp	r0, #0
   b7a94:	d0ed      	beq.n	b7a72 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b7a96:	2006      	movs	r0, #6
   b7a98:	b003      	add	sp, #12
   b7a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7a9c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b7a9c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7aa0:	460d      	mov	r5, r1
   b7aa2:	4619      	mov	r1, r3
   b7aa4:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b7aa8:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b7aac:	4681      	mov	r9, r0
   b7aae:	4617      	mov	r7, r2
   b7ab0:	4698      	mov	r8, r3
   b7ab2:	f000 f845 	bl	b7b40 <_ZNKSt9type_infoeqERKS_>
   b7ab6:	b190      	cbz	r0, b7ade <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b7ab8:	2d00      	cmp	r5, #0
   b7aba:	6034      	str	r4, [r6, #0]
   b7abc:	7137      	strb	r7, [r6, #4]
   b7abe:	db09      	blt.n	b7ad4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b7ac0:	1961      	adds	r1, r4, r5
   b7ac2:	458a      	cmp	sl, r1
   b7ac4:	bf0c      	ite	eq
   b7ac6:	2106      	moveq	r1, #6
   b7ac8:	2101      	movne	r1, #1
   b7aca:	71b1      	strb	r1, [r6, #6]
   b7acc:	2000      	movs	r0, #0
   b7ace:	b001      	add	sp, #4
   b7ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7ad4:	3502      	adds	r5, #2
   b7ad6:	d1f9      	bne.n	b7acc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7ad8:	2301      	movs	r3, #1
   b7ada:	71b3      	strb	r3, [r6, #6]
   b7adc:	e7f6      	b.n	b7acc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7ade:	4554      	cmp	r4, sl
   b7ae0:	d106      	bne.n	b7af0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b7ae2:	4659      	mov	r1, fp
   b7ae4:	4648      	mov	r0, r9
   b7ae6:	f000 f82b 	bl	b7b40 <_ZNKSt9type_infoeqERKS_>
   b7aea:	b108      	cbz	r0, b7af0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b7aec:	7177      	strb	r7, [r6, #5]
   b7aee:	e7ed      	b.n	b7acc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7af0:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b7af4:	6803      	ldr	r3, [r0, #0]
   b7af6:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b7afa:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b7afe:	69dc      	ldr	r4, [r3, #28]
   b7b00:	463a      	mov	r2, r7
   b7b02:	4643      	mov	r3, r8
   b7b04:	4629      	mov	r1, r5
   b7b06:	46a4      	mov	ip, r4
   b7b08:	b001      	add	sp, #4
   b7b0a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7b0e:	4760      	bx	ip

000b7b10 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b7b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7b14:	4607      	mov	r7, r0
   b7b16:	460c      	mov	r4, r1
   b7b18:	4615      	mov	r5, r2
   b7b1a:	461e      	mov	r6, r3
   b7b1c:	f7ff ff6d 	bl	b79fa <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b7b20:	b948      	cbnz	r0, b7b36 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b7b22:	68b8      	ldr	r0, [r7, #8]
   b7b24:	6803      	ldr	r3, [r0, #0]
   b7b26:	699f      	ldr	r7, [r3, #24]
   b7b28:	462a      	mov	r2, r5
   b7b2a:	4633      	mov	r3, r6
   b7b2c:	4621      	mov	r1, r4
   b7b2e:	46bc      	mov	ip, r7
   b7b30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b7b34:	4760      	bx	ip
   b7b36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b7b3a <_ZNSt9type_infoD1Ev>:
   b7b3a:	4770      	bx	lr

000b7b3c <_ZNKSt9type_info14__is_pointer_pEv>:
   b7b3c:	2000      	movs	r0, #0
   b7b3e:	4770      	bx	lr

000b7b40 <_ZNKSt9type_infoeqERKS_>:
   b7b40:	4281      	cmp	r1, r0
   b7b42:	b508      	push	{r3, lr}
   b7b44:	d00e      	beq.n	b7b64 <_ZNKSt9type_infoeqERKS_+0x24>
   b7b46:	6840      	ldr	r0, [r0, #4]
   b7b48:	7803      	ldrb	r3, [r0, #0]
   b7b4a:	2b2a      	cmp	r3, #42	; 0x2a
   b7b4c:	d00c      	beq.n	b7b68 <_ZNKSt9type_infoeqERKS_+0x28>
   b7b4e:	6849      	ldr	r1, [r1, #4]
   b7b50:	780b      	ldrb	r3, [r1, #0]
   b7b52:	2b2a      	cmp	r3, #42	; 0x2a
   b7b54:	bf08      	it	eq
   b7b56:	3101      	addeq	r1, #1
   b7b58:	f7fc ff1e 	bl	b4998 <strcmp>
   b7b5c:	fab0 f080 	clz	r0, r0
   b7b60:	0940      	lsrs	r0, r0, #5
   b7b62:	bd08      	pop	{r3, pc}
   b7b64:	2001      	movs	r0, #1
   b7b66:	e7fc      	b.n	b7b62 <_ZNKSt9type_infoeqERKS_+0x22>
   b7b68:	2000      	movs	r0, #0
   b7b6a:	e7fa      	b.n	b7b62 <_ZNKSt9type_infoeqERKS_+0x22>
   b7b6c:	0000      	movs	r0, r0
	...

000b7b70 <pow>:
   b7b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7b72:	ed2d 8b02 	vpush	{d8}
   b7b76:	ec57 6b10 	vmov	r6, r7, d0
   b7b7a:	ec55 4b11 	vmov	r4, r5, d1
   b7b7e:	f000 f8cb 	bl	b7d18 <__ieee754_pow>
   b7b82:	4b63      	ldr	r3, [pc, #396]	; (b7d10 <pow+0x1a0>)
   b7b84:	eeb0 8a40 	vmov.f32	s16, s0
   b7b88:	eef0 8a60 	vmov.f32	s17, s1
   b7b8c:	f993 3000 	ldrsb.w	r3, [r3]
   b7b90:	3301      	adds	r3, #1
   b7b92:	d02a      	beq.n	b7bea <pow+0x7a>
   b7b94:	4622      	mov	r2, r4
   b7b96:	462b      	mov	r3, r5
   b7b98:	4620      	mov	r0, r4
   b7b9a:	4629      	mov	r1, r5
   b7b9c:	f7fc fe96 	bl	b48cc <__aeabi_dcmpun>
   b7ba0:	bb18      	cbnz	r0, b7bea <pow+0x7a>
   b7ba2:	4632      	mov	r2, r6
   b7ba4:	463b      	mov	r3, r7
   b7ba6:	4630      	mov	r0, r6
   b7ba8:	4639      	mov	r1, r7
   b7baa:	f7fc fe8f 	bl	b48cc <__aeabi_dcmpun>
   b7bae:	2800      	cmp	r0, #0
   b7bb0:	d144      	bne.n	b7c3c <pow+0xcc>
   b7bb2:	2200      	movs	r2, #0
   b7bb4:	2300      	movs	r3, #0
   b7bb6:	4630      	mov	r0, r6
   b7bb8:	4639      	mov	r1, r7
   b7bba:	f7fc fe55 	bl	b4868 <__aeabi_dcmpeq>
   b7bbe:	b1d8      	cbz	r0, b7bf8 <pow+0x88>
   b7bc0:	2200      	movs	r2, #0
   b7bc2:	2300      	movs	r3, #0
   b7bc4:	4620      	mov	r0, r4
   b7bc6:	4629      	mov	r1, r5
   b7bc8:	f7fc fe4e 	bl	b4868 <__aeabi_dcmpeq>
   b7bcc:	2800      	cmp	r0, #0
   b7bce:	d13d      	bne.n	b7c4c <pow+0xdc>
   b7bd0:	ec45 4b10 	vmov	d0, r4, r5
   b7bd4:	f000 ff10 	bl	b89f8 <finite>
   b7bd8:	b138      	cbz	r0, b7bea <pow+0x7a>
   b7bda:	4620      	mov	r0, r4
   b7bdc:	4629      	mov	r1, r5
   b7bde:	2200      	movs	r2, #0
   b7be0:	2300      	movs	r3, #0
   b7be2:	f7fc fe4b 	bl	b487c <__aeabi_dcmplt>
   b7be6:	2800      	cmp	r0, #0
   b7be8:	d15c      	bne.n	b7ca4 <pow+0x134>
   b7bea:	eeb0 0a48 	vmov.f32	s0, s16
   b7bee:	eef0 0a68 	vmov.f32	s1, s17
   b7bf2:	ecbd 8b02 	vpop	{d8}
   b7bf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b7bf8:	eeb0 0a48 	vmov.f32	s0, s16
   b7bfc:	eef0 0a68 	vmov.f32	s1, s17
   b7c00:	f000 fefa 	bl	b89f8 <finite>
   b7c04:	b358      	cbz	r0, b7c5e <pow+0xee>
   b7c06:	ec51 0b18 	vmov	r0, r1, d8
   b7c0a:	2200      	movs	r2, #0
   b7c0c:	2300      	movs	r3, #0
   b7c0e:	f7fc fe2b 	bl	b4868 <__aeabi_dcmpeq>
   b7c12:	2800      	cmp	r0, #0
   b7c14:	d0e9      	beq.n	b7bea <pow+0x7a>
   b7c16:	ec47 6b10 	vmov	d0, r6, r7
   b7c1a:	f000 feed 	bl	b89f8 <finite>
   b7c1e:	2800      	cmp	r0, #0
   b7c20:	d0e3      	beq.n	b7bea <pow+0x7a>
   b7c22:	ec45 4b10 	vmov	d0, r4, r5
   b7c26:	f000 fee7 	bl	b89f8 <finite>
   b7c2a:	2800      	cmp	r0, #0
   b7c2c:	d0dd      	beq.n	b7bea <pow+0x7a>
   b7c2e:	f7fd fec3 	bl	b59b8 <__errno>
   b7c32:	2322      	movs	r3, #34	; 0x22
   b7c34:	ed9f 8b2e 	vldr	d8, [pc, #184]	; b7cf0 <pow+0x180>
   b7c38:	6003      	str	r3, [r0, #0]
   b7c3a:	e7d6      	b.n	b7bea <pow+0x7a>
   b7c3c:	4620      	mov	r0, r4
   b7c3e:	4629      	mov	r1, r5
   b7c40:	2200      	movs	r2, #0
   b7c42:	2300      	movs	r3, #0
   b7c44:	f7fc fe10 	bl	b4868 <__aeabi_dcmpeq>
   b7c48:	2800      	cmp	r0, #0
   b7c4a:	d0ce      	beq.n	b7bea <pow+0x7a>
   b7c4c:	ed9f 8b2a 	vldr	d8, [pc, #168]	; b7cf8 <pow+0x188>
   b7c50:	eeb0 0a48 	vmov.f32	s0, s16
   b7c54:	eef0 0a68 	vmov.f32	s1, s17
   b7c58:	ecbd 8b02 	vpop	{d8}
   b7c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b7c5e:	ec47 6b10 	vmov	d0, r6, r7
   b7c62:	f000 fec9 	bl	b89f8 <finite>
   b7c66:	2800      	cmp	r0, #0
   b7c68:	d0cd      	beq.n	b7c06 <pow+0x96>
   b7c6a:	ec45 4b10 	vmov	d0, r4, r5
   b7c6e:	f000 fec3 	bl	b89f8 <finite>
   b7c72:	2800      	cmp	r0, #0
   b7c74:	d0c7      	beq.n	b7c06 <pow+0x96>
   b7c76:	ec53 2b18 	vmov	r2, r3, d8
   b7c7a:	ee18 0a10 	vmov	r0, s16
   b7c7e:	4619      	mov	r1, r3
   b7c80:	f7fc fe24 	bl	b48cc <__aeabi_dcmpun>
   b7c84:	bb20      	cbnz	r0, b7cd0 <pow+0x160>
   b7c86:	f7fd fe97 	bl	b59b8 <__errno>
   b7c8a:	4603      	mov	r3, r0
   b7c8c:	2222      	movs	r2, #34	; 0x22
   b7c8e:	601a      	str	r2, [r3, #0]
   b7c90:	4630      	mov	r0, r6
   b7c92:	4639      	mov	r1, r7
   b7c94:	2200      	movs	r2, #0
   b7c96:	2300      	movs	r3, #0
   b7c98:	f7fc fdf0 	bl	b487c <__aeabi_dcmplt>
   b7c9c:	b948      	cbnz	r0, b7cb2 <pow+0x142>
   b7c9e:	ed9f 8b18 	vldr	d8, [pc, #96]	; b7d00 <pow+0x190>
   b7ca2:	e7a2      	b.n	b7bea <pow+0x7a>
   b7ca4:	f7fd fe88 	bl	b59b8 <__errno>
   b7ca8:	2321      	movs	r3, #33	; 0x21
   b7caa:	ed9f 8b17 	vldr	d8, [pc, #92]	; b7d08 <pow+0x198>
   b7cae:	6003      	str	r3, [r0, #0]
   b7cb0:	e79b      	b.n	b7bea <pow+0x7a>
   b7cb2:	ec45 4b10 	vmov	d0, r4, r5
   b7cb6:	f000 feb3 	bl	b8a20 <rint>
   b7cba:	4622      	mov	r2, r4
   b7cbc:	ec51 0b10 	vmov	r0, r1, d0
   b7cc0:	462b      	mov	r3, r5
   b7cc2:	f7fc fdd1 	bl	b4868 <__aeabi_dcmpeq>
   b7cc6:	2800      	cmp	r0, #0
   b7cc8:	d1e9      	bne.n	b7c9e <pow+0x12e>
   b7cca:	ed9f 8b0f 	vldr	d8, [pc, #60]	; b7d08 <pow+0x198>
   b7cce:	e78c      	b.n	b7bea <pow+0x7a>
   b7cd0:	f7fd fe72 	bl	b59b8 <__errno>
   b7cd4:	2200      	movs	r2, #0
   b7cd6:	2300      	movs	r3, #0
   b7cd8:	2121      	movs	r1, #33	; 0x21
   b7cda:	6001      	str	r1, [r0, #0]
   b7cdc:	4610      	mov	r0, r2
   b7cde:	4619      	mov	r1, r3
   b7ce0:	f7fc fc84 	bl	b45ec <__aeabi_ddiv>
   b7ce4:	ec41 0b18 	vmov	d8, r0, r1
   b7ce8:	e77f      	b.n	b7bea <pow+0x7a>
   b7cea:	bf00      	nop
   b7cec:	f3af 8000 	nop.w
	...
   b7cfc:	3ff00000 	.word	0x3ff00000
   b7d00:	00000000 	.word	0x00000000
   b7d04:	7ff00000 	.word	0x7ff00000
   b7d08:	00000000 	.word	0x00000000
   b7d0c:	fff00000 	.word	0xfff00000
   b7d10:	2003e478 	.word	0x2003e478
   b7d14:	00000000 	.word	0x00000000

000b7d18 <__ieee754_pow>:
   b7d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7d1c:	ec57 6b11 	vmov	r6, r7, d1
   b7d20:	ed2d 8b0c 	vpush	{d8-d13}
   b7d24:	f027 4a00 	bic.w	sl, r7, #2147483648	; 0x80000000
   b7d28:	ea5a 0206 	orrs.w	r2, sl, r6
   b7d2c:	b087      	sub	sp, #28
   b7d2e:	d03d      	beq.n	b7dac <__ieee754_pow+0x94>
   b7d30:	ec55 4b10 	vmov	r4, r5, d0
   b7d34:	4972      	ldr	r1, [pc, #456]	; (b7f00 <__ieee754_pow+0x1e8>)
   b7d36:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
   b7d3a:	4588      	cmp	r8, r1
   b7d3c:	ee10 2a10 	vmov	r2, s0
   b7d40:	46a9      	mov	r9, r5
   b7d42:	dc2c      	bgt.n	b7d9e <__ieee754_pow+0x86>
   b7d44:	ee11 3a10 	vmov	r3, s2
   b7d48:	46bb      	mov	fp, r7
   b7d4a:	d036      	beq.n	b7dba <__ieee754_pow+0xa2>
   b7d4c:	458a      	cmp	sl, r1
   b7d4e:	dc26      	bgt.n	b7d9e <__ieee754_pow+0x86>
   b7d50:	496b      	ldr	r1, [pc, #428]	; (b7f00 <__ieee754_pow+0x1e8>)
   b7d52:	458a      	cmp	sl, r1
   b7d54:	d021      	beq.n	b7d9a <__ieee754_pow+0x82>
   b7d56:	f1b9 0f00 	cmp.w	r9, #0
   b7d5a:	db39      	blt.n	b7dd0 <__ieee754_pow+0xb8>
   b7d5c:	2100      	movs	r1, #0
   b7d5e:	9100      	str	r1, [sp, #0]
   b7d60:	2b00      	cmp	r3, #0
   b7d62:	d151      	bne.n	b7e08 <__ieee754_pow+0xf0>
   b7d64:	4b66      	ldr	r3, [pc, #408]	; (b7f00 <__ieee754_pow+0x1e8>)
   b7d66:	459a      	cmp	sl, r3
   b7d68:	f000 80a2 	beq.w	b7eb0 <__ieee754_pow+0x198>
   b7d6c:	4b65      	ldr	r3, [pc, #404]	; (b7f04 <__ieee754_pow+0x1ec>)
   b7d6e:	459a      	cmp	sl, r3
   b7d70:	f000 80b0 	beq.w	b7ed4 <__ieee754_pow+0x1bc>
   b7d74:	f1bb 4f80 	cmp.w	fp, #1073741824	; 0x40000000
   b7d78:	f000 84c0 	beq.w	b86fc <__ieee754_pow+0x9e4>
   b7d7c:	4b62      	ldr	r3, [pc, #392]	; (b7f08 <__ieee754_pow+0x1f0>)
   b7d7e:	459b      	cmp	fp, r3
   b7d80:	d142      	bne.n	b7e08 <__ieee754_pow+0xf0>
   b7d82:	f1b9 0f00 	cmp.w	r9, #0
   b7d86:	db3f      	blt.n	b7e08 <__ieee754_pow+0xf0>
   b7d88:	ec45 4b10 	vmov	d0, r4, r5
   b7d8c:	b007      	add	sp, #28
   b7d8e:	ecbd 8b0c 	vpop	{d8-d13}
   b7d92:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7d96:	f000 bd59 	b.w	b884c <__ieee754_sqrt>
   b7d9a:	2b00      	cmp	r3, #0
   b7d9c:	d0db      	beq.n	b7d56 <__ieee754_pow+0x3e>
   b7d9e:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   b7da2:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   b7da6:	ea58 0302 	orrs.w	r3, r8, r2
   b7daa:	d109      	bne.n	b7dc0 <__ieee754_pow+0xa8>
   b7dac:	ed9f 0b50 	vldr	d0, [pc, #320]	; b7ef0 <__ieee754_pow+0x1d8>
   b7db0:	b007      	add	sp, #28
   b7db2:	ecbd 8b0c 	vpop	{d8-d13}
   b7db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7dba:	b90c      	cbnz	r4, b7dc0 <__ieee754_pow+0xa8>
   b7dbc:	45c2      	cmp	sl, r8
   b7dbe:	ddc7      	ble.n	b7d50 <__ieee754_pow+0x38>
   b7dc0:	4852      	ldr	r0, [pc, #328]	; (b7f0c <__ieee754_pow+0x1f4>)
   b7dc2:	b007      	add	sp, #28
   b7dc4:	ecbd 8b0c 	vpop	{d8-d13}
   b7dc8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7dcc:	f000 be20 	b.w	b8a10 <nan>
   b7dd0:	494f      	ldr	r1, [pc, #316]	; (b7f10 <__ieee754_pow+0x1f8>)
   b7dd2:	458a      	cmp	sl, r1
   b7dd4:	f300 8085 	bgt.w	b7ee2 <__ieee754_pow+0x1ca>
   b7dd8:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
   b7ddc:	458a      	cmp	sl, r1
   b7dde:	dd0f      	ble.n	b7e00 <__ieee754_pow+0xe8>
   b7de0:	ea4f 512a 	mov.w	r1, sl, asr #20
   b7de4:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
   b7de8:	2914      	cmp	r1, #20
   b7dea:	f340 849b 	ble.w	b8724 <__ieee754_pow+0xa0c>
   b7dee:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
   b7df2:	fa23 f001 	lsr.w	r0, r3, r1
   b7df6:	fa00 f101 	lsl.w	r1, r0, r1
   b7dfa:	4299      	cmp	r1, r3
   b7dfc:	f000 84ed 	beq.w	b87da <__ieee754_pow+0xac2>
   b7e00:	2100      	movs	r1, #0
   b7e02:	9100      	str	r1, [sp, #0]
   b7e04:	2b00      	cmp	r3, #0
   b7e06:	d0b1      	beq.n	b7d6c <__ieee754_pow+0x54>
   b7e08:	ec45 4b10 	vmov	d0, r4, r5
   b7e0c:	9202      	str	r2, [sp, #8]
   b7e0e:	f000 fde9 	bl	b89e4 <fabs>
   b7e12:	9a02      	ldr	r2, [sp, #8]
   b7e14:	bb5a      	cbnz	r2, b7e6e <__ieee754_pow+0x156>
   b7e16:	f1b8 0f00 	cmp.w	r8, #0
   b7e1a:	d004      	beq.n	b7e26 <__ieee754_pow+0x10e>
   b7e1c:	4b39      	ldr	r3, [pc, #228]	; (b7f04 <__ieee754_pow+0x1ec>)
   b7e1e:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
   b7e22:	429a      	cmp	r2, r3
   b7e24:	d123      	bne.n	b7e6e <__ieee754_pow+0x156>
   b7e26:	f1bb 0f00 	cmp.w	fp, #0
   b7e2a:	da07      	bge.n	b7e3c <__ieee754_pow+0x124>
   b7e2c:	ec53 2b10 	vmov	r2, r3, d0
   b7e30:	4934      	ldr	r1, [pc, #208]	; (b7f04 <__ieee754_pow+0x1ec>)
   b7e32:	2000      	movs	r0, #0
   b7e34:	f7fc fbda 	bl	b45ec <__aeabi_ddiv>
   b7e38:	ec41 0b10 	vmov	d0, r0, r1
   b7e3c:	f1b9 0f00 	cmp.w	r9, #0
   b7e40:	dab6      	bge.n	b7db0 <__ieee754_pow+0x98>
   b7e42:	9b00      	ldr	r3, [sp, #0]
   b7e44:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   b7e48:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   b7e4c:	ea58 0303 	orrs.w	r3, r8, r3
   b7e50:	f040 848d 	bne.w	b876e <__ieee754_pow+0xa56>
   b7e54:	ec53 2b10 	vmov	r2, r3, d0
   b7e58:	4610      	mov	r0, r2
   b7e5a:	4619      	mov	r1, r3
   b7e5c:	f7fc f8e4 	bl	b4028 <__aeabi_dsub>
   b7e60:	4602      	mov	r2, r0
   b7e62:	460b      	mov	r3, r1
   b7e64:	f7fc fbc2 	bl	b45ec <__aeabi_ddiv>
   b7e68:	ec41 0b10 	vmov	d0, r0, r1
   b7e6c:	e7a0      	b.n	b7db0 <__ieee754_pow+0x98>
   b7e6e:	9a00      	ldr	r2, [sp, #0]
   b7e70:	ea4f 73d9 	mov.w	r3, r9, lsr #31
   b7e74:	3b01      	subs	r3, #1
   b7e76:	9304      	str	r3, [sp, #16]
   b7e78:	4313      	orrs	r3, r2
   b7e7a:	d035      	beq.n	b7ee8 <__ieee754_pow+0x1d0>
   b7e7c:	4b25      	ldr	r3, [pc, #148]	; (b7f14 <__ieee754_pow+0x1fc>)
   b7e7e:	459a      	cmp	sl, r3
   b7e80:	dd4c      	ble.n	b7f1c <__ieee754_pow+0x204>
   b7e82:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   b7e86:	459a      	cmp	sl, r3
   b7e88:	4b23      	ldr	r3, [pc, #140]	; (b7f18 <__ieee754_pow+0x200>)
   b7e8a:	f340 83db 	ble.w	b8644 <__ieee754_pow+0x92c>
   b7e8e:	4598      	cmp	r8, r3
   b7e90:	f340 8360 	ble.w	b8554 <__ieee754_pow+0x83c>
   b7e94:	f1bb 0f00 	cmp.w	fp, #0
   b7e98:	f340 8360 	ble.w	b855c <__ieee754_pow+0x844>
   b7e9c:	a316      	add	r3, pc, #88	; (adr r3, b7ef8 <__ieee754_pow+0x1e0>)
   b7e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7ea2:	4610      	mov	r0, r2
   b7ea4:	4619      	mov	r1, r3
   b7ea6:	f7fc fa77 	bl	b4398 <__aeabi_dmul>
   b7eaa:	ec41 0b10 	vmov	d0, r0, r1
   b7eae:	e77f      	b.n	b7db0 <__ieee754_pow+0x98>
   b7eb0:	f108 4340 	add.w	r3, r8, #3221225472	; 0xc0000000
   b7eb4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   b7eb8:	4313      	orrs	r3, r2
   b7eba:	f43f af77 	beq.w	b7dac <__ieee754_pow+0x94>
   b7ebe:	4b16      	ldr	r3, [pc, #88]	; (b7f18 <__ieee754_pow+0x200>)
   b7ec0:	4598      	cmp	r8, r3
   b7ec2:	f340 837a 	ble.w	b85ba <__ieee754_pow+0x8a2>
   b7ec6:	f1bb 0f00 	cmp.w	fp, #0
   b7eca:	f2c0 8347 	blt.w	b855c <__ieee754_pow+0x844>
   b7ece:	ec47 6b10 	vmov	d0, r6, r7
   b7ed2:	e76d      	b.n	b7db0 <__ieee754_pow+0x98>
   b7ed4:	f1bb 0f00 	cmp.w	fp, #0
   b7ed8:	f2c0 841a 	blt.w	b8710 <__ieee754_pow+0x9f8>
   b7edc:	ec45 4b10 	vmov	d0, r4, r5
   b7ee0:	e766      	b.n	b7db0 <__ieee754_pow+0x98>
   b7ee2:	2102      	movs	r1, #2
   b7ee4:	9100      	str	r1, [sp, #0]
   b7ee6:	e73b      	b.n	b7d60 <__ieee754_pow+0x48>
   b7ee8:	4622      	mov	r2, r4
   b7eea:	462b      	mov	r3, r5
   b7eec:	e7b4      	b.n	b7e58 <__ieee754_pow+0x140>
   b7eee:	bf00      	nop
   b7ef0:	00000000 	.word	0x00000000
   b7ef4:	3ff00000 	.word	0x3ff00000
   b7ef8:	8800759c 	.word	0x8800759c
   b7efc:	7e37e43c 	.word	0x7e37e43c
   b7f00:	7ff00000 	.word	0x7ff00000
   b7f04:	3ff00000 	.word	0x3ff00000
   b7f08:	3fe00000 	.word	0x3fe00000
   b7f0c:	000b93a0 	.word	0x000b93a0
   b7f10:	433fffff 	.word	0x433fffff
   b7f14:	41e00000 	.word	0x41e00000
   b7f18:	3fefffff 	.word	0x3fefffff
   b7f1c:	4be4      	ldr	r3, [pc, #912]	; (b82b0 <__ieee754_pow+0x598>)
   b7f1e:	ea09 0303 	and.w	r3, r9, r3
   b7f22:	2200      	movs	r2, #0
   b7f24:	b953      	cbnz	r3, b7f3c <__ieee754_pow+0x224>
   b7f26:	ec51 0b10 	vmov	r0, r1, d0
   b7f2a:	4be2      	ldr	r3, [pc, #904]	; (b82b4 <__ieee754_pow+0x59c>)
   b7f2c:	f7fc fa34 	bl	b4398 <__aeabi_dmul>
   b7f30:	ec41 0b10 	vmov	d0, r0, r1
   b7f34:	ee10 8a90 	vmov	r8, s1
   b7f38:	f06f 0234 	mvn.w	r2, #52	; 0x34
   b7f3c:	ea4f 5328 	mov.w	r3, r8, asr #20
   b7f40:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   b7f44:	189a      	adds	r2, r3, r2
   b7f46:	4bdc      	ldr	r3, [pc, #880]	; (b82b8 <__ieee754_pow+0x5a0>)
   b7f48:	9205      	str	r2, [sp, #20]
   b7f4a:	f3c8 0813 	ubfx	r8, r8, #0, #20
   b7f4e:	f048 547f 	orr.w	r4, r8, #1069547520	; 0x3fc00000
   b7f52:	4598      	cmp	r8, r3
   b7f54:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   b7f58:	dd07      	ble.n	b7f6a <__ieee754_pow+0x252>
   b7f5a:	4bd8      	ldr	r3, [pc, #864]	; (b82bc <__ieee754_pow+0x5a4>)
   b7f5c:	4598      	cmp	r8, r3
   b7f5e:	f340 8414 	ble.w	b878a <__ieee754_pow+0xa72>
   b7f62:	3201      	adds	r2, #1
   b7f64:	9205      	str	r2, [sp, #20]
   b7f66:	f5a4 1480 	sub.w	r4, r4, #1048576	; 0x100000
   b7f6a:	ed9f 6bb9 	vldr	d6, [pc, #740]	; b8250 <__ieee754_pow+0x538>
   b7f6e:	ed9f 7bba 	vldr	d7, [pc, #744]	; b8258 <__ieee754_pow+0x540>
   b7f72:	ec53 2b16 	vmov	r2, r3, d6
   b7f76:	eeb0 ca47 	vmov.f32	s24, s14
   b7f7a:	eef0 ca67 	vmov.f32	s25, s15
   b7f7e:	2500      	movs	r5, #0
   b7f80:	eeb0 da47 	vmov.f32	s26, s14
   b7f84:	eef0 da67 	vmov.f32	s27, s15
   b7f88:	ec5b ab10 	vmov	sl, fp, d0
   b7f8c:	46a3      	mov	fp, r4
   b7f8e:	4650      	mov	r0, sl
   b7f90:	4659      	mov	r1, fp
   b7f92:	ec43 2b1a 	vmov	d10, r2, r3
   b7f96:	f7fc f847 	bl	b4028 <__aeabi_dsub>
   b7f9a:	ec53 2b1a 	vmov	r2, r3, d10
   b7f9e:	4680      	mov	r8, r0
   b7fa0:	4689      	mov	r9, r1
   b7fa2:	4650      	mov	r0, sl
   b7fa4:	4659      	mov	r1, fp
   b7fa6:	f7fc f841 	bl	b402c <__adddf3>
   b7faa:	4602      	mov	r2, r0
   b7fac:	460b      	mov	r3, r1
   b7fae:	2000      	movs	r0, #0
   b7fb0:	49c3      	ldr	r1, [pc, #780]	; (b82c0 <__ieee754_pow+0x5a8>)
   b7fb2:	f7fc fb1b 	bl	b45ec <__aeabi_ddiv>
   b7fb6:	ec41 0b1b 	vmov	d11, r0, r1
   b7fba:	4640      	mov	r0, r8
   b7fbc:	ec53 2b1b 	vmov	r2, r3, d11
   b7fc0:	4649      	mov	r1, r9
   b7fc2:	f7fc f9e9 	bl	b4398 <__aeabi_dmul>
   b7fc6:	ec41 0b18 	vmov	d8, r0, r1
   b7fca:	460a      	mov	r2, r1
   b7fcc:	4601      	mov	r1, r0
   b7fce:	e9cd 1202 	strd	r1, r2, [sp, #8]
   b7fd2:	2100      	movs	r1, #0
   b7fd4:	9102      	str	r1, [sp, #8]
   b7fd6:	1064      	asrs	r4, r4, #1
   b7fd8:	ec4b ab19 	vmov	d9, sl, fp
   b7fdc:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
   b7fe0:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
   b7fe4:	f504 2300 	add.w	r3, r4, #524288	; 0x80000
   b7fe8:	2000      	movs	r0, #0
   b7fea:	1959      	adds	r1, r3, r5
   b7fec:	4604      	mov	r4, r0
   b7fee:	460d      	mov	r5, r1
   b7ff0:	4602      	mov	r2, r0
   b7ff2:	460b      	mov	r3, r1
   b7ff4:	4650      	mov	r0, sl
   b7ff6:	4659      	mov	r1, fp
   b7ff8:	f7fc f9ce 	bl	b4398 <__aeabi_dmul>
   b7ffc:	4602      	mov	r2, r0
   b7ffe:	460b      	mov	r3, r1
   b8000:	4640      	mov	r0, r8
   b8002:	4649      	mov	r1, r9
   b8004:	f7fc f810 	bl	b4028 <__aeabi_dsub>
   b8008:	ec53 2b1a 	vmov	r2, r3, d10
   b800c:	4680      	mov	r8, r0
   b800e:	4689      	mov	r9, r1
   b8010:	4620      	mov	r0, r4
   b8012:	4629      	mov	r1, r5
   b8014:	f7fc f808 	bl	b4028 <__aeabi_dsub>
   b8018:	4602      	mov	r2, r0
   b801a:	460b      	mov	r3, r1
   b801c:	ec51 0b19 	vmov	r0, r1, d9
   b8020:	f7fc f802 	bl	b4028 <__aeabi_dsub>
   b8024:	4652      	mov	r2, sl
   b8026:	465b      	mov	r3, fp
   b8028:	f7fc f9b6 	bl	b4398 <__aeabi_dmul>
   b802c:	4602      	mov	r2, r0
   b802e:	460b      	mov	r3, r1
   b8030:	4640      	mov	r0, r8
   b8032:	4649      	mov	r1, r9
   b8034:	f7fb fff8 	bl	b4028 <__aeabi_dsub>
   b8038:	ec53 2b1b 	vmov	r2, r3, d11
   b803c:	f7fc f9ac 	bl	b4398 <__aeabi_dmul>
   b8040:	ec53 2b18 	vmov	r2, r3, d8
   b8044:	ec41 0b19 	vmov	d9, r0, r1
   b8048:	ec51 0b18 	vmov	r0, r1, d8
   b804c:	f7fc f9a4 	bl	b4398 <__aeabi_dmul>
   b8050:	a383      	add	r3, pc, #524	; (adr r3, b8260 <__ieee754_pow+0x548>)
   b8052:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8056:	4604      	mov	r4, r0
   b8058:	460d      	mov	r5, r1
   b805a:	f7fc f99d 	bl	b4398 <__aeabi_dmul>
   b805e:	a382      	add	r3, pc, #520	; (adr r3, b8268 <__ieee754_pow+0x550>)
   b8060:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8064:	f7fb ffe2 	bl	b402c <__adddf3>
   b8068:	4622      	mov	r2, r4
   b806a:	462b      	mov	r3, r5
   b806c:	f7fc f994 	bl	b4398 <__aeabi_dmul>
   b8070:	a37f      	add	r3, pc, #508	; (adr r3, b8270 <__ieee754_pow+0x558>)
   b8072:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8076:	f7fb ffd9 	bl	b402c <__adddf3>
   b807a:	4622      	mov	r2, r4
   b807c:	462b      	mov	r3, r5
   b807e:	f7fc f98b 	bl	b4398 <__aeabi_dmul>
   b8082:	a37d      	add	r3, pc, #500	; (adr r3, b8278 <__ieee754_pow+0x560>)
   b8084:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8088:	f7fb ffd0 	bl	b402c <__adddf3>
   b808c:	4622      	mov	r2, r4
   b808e:	462b      	mov	r3, r5
   b8090:	f7fc f982 	bl	b4398 <__aeabi_dmul>
   b8094:	a37a      	add	r3, pc, #488	; (adr r3, b8280 <__ieee754_pow+0x568>)
   b8096:	e9d3 2300 	ldrd	r2, r3, [r3]
   b809a:	f7fb ffc7 	bl	b402c <__adddf3>
   b809e:	4622      	mov	r2, r4
   b80a0:	462b      	mov	r3, r5
   b80a2:	f7fc f979 	bl	b4398 <__aeabi_dmul>
   b80a6:	a378      	add	r3, pc, #480	; (adr r3, b8288 <__ieee754_pow+0x570>)
   b80a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   b80ac:	f7fb ffbe 	bl	b402c <__adddf3>
   b80b0:	4622      	mov	r2, r4
   b80b2:	4680      	mov	r8, r0
   b80b4:	4689      	mov	r9, r1
   b80b6:	462b      	mov	r3, r5
   b80b8:	4620      	mov	r0, r4
   b80ba:	4629      	mov	r1, r5
   b80bc:	f7fc f96c 	bl	b4398 <__aeabi_dmul>
   b80c0:	4602      	mov	r2, r0
   b80c2:	460b      	mov	r3, r1
   b80c4:	4640      	mov	r0, r8
   b80c6:	4649      	mov	r1, r9
   b80c8:	f7fc f966 	bl	b4398 <__aeabi_dmul>
   b80cc:	4652      	mov	r2, sl
   b80ce:	4604      	mov	r4, r0
   b80d0:	460d      	mov	r5, r1
   b80d2:	465b      	mov	r3, fp
   b80d4:	ec51 0b18 	vmov	r0, r1, d8
   b80d8:	f7fb ffa8 	bl	b402c <__adddf3>
   b80dc:	ec53 2b19 	vmov	r2, r3, d9
   b80e0:	f7fc f95a 	bl	b4398 <__aeabi_dmul>
   b80e4:	4622      	mov	r2, r4
   b80e6:	462b      	mov	r3, r5
   b80e8:	f7fb ffa0 	bl	b402c <__adddf3>
   b80ec:	4652      	mov	r2, sl
   b80ee:	4680      	mov	r8, r0
   b80f0:	4689      	mov	r9, r1
   b80f2:	465b      	mov	r3, fp
   b80f4:	4650      	mov	r0, sl
   b80f6:	4659      	mov	r1, fp
   b80f8:	f7fc f94e 	bl	b4398 <__aeabi_dmul>
   b80fc:	4602      	mov	r2, r0
   b80fe:	460b      	mov	r3, r1
   b8100:	ec43 2b1a 	vmov	d10, r2, r3
   b8104:	4b6f      	ldr	r3, [pc, #444]	; (b82c4 <__ieee754_pow+0x5ac>)
   b8106:	2200      	movs	r2, #0
   b8108:	f7fb ff90 	bl	b402c <__adddf3>
   b810c:	4642      	mov	r2, r8
   b810e:	464b      	mov	r3, r9
   b8110:	f7fb ff8c 	bl	b402c <__adddf3>
   b8114:	2400      	movs	r4, #0
   b8116:	460d      	mov	r5, r1
   b8118:	4622      	mov	r2, r4
   b811a:	462b      	mov	r3, r5
   b811c:	4650      	mov	r0, sl
   b811e:	4659      	mov	r1, fp
   b8120:	f7fc f93a 	bl	b4398 <__aeabi_dmul>
   b8124:	4b67      	ldr	r3, [pc, #412]	; (b82c4 <__ieee754_pow+0x5ac>)
   b8126:	4682      	mov	sl, r0
   b8128:	468b      	mov	fp, r1
   b812a:	2200      	movs	r2, #0
   b812c:	4620      	mov	r0, r4
   b812e:	4629      	mov	r1, r5
   b8130:	f7fb ff7a 	bl	b4028 <__aeabi_dsub>
   b8134:	ec53 2b1a 	vmov	r2, r3, d10
   b8138:	f7fb ff76 	bl	b4028 <__aeabi_dsub>
   b813c:	4602      	mov	r2, r0
   b813e:	460b      	mov	r3, r1
   b8140:	4640      	mov	r0, r8
   b8142:	4649      	mov	r1, r9
   b8144:	f7fb ff70 	bl	b4028 <__aeabi_dsub>
   b8148:	ec53 2b18 	vmov	r2, r3, d8
   b814c:	f7fc f924 	bl	b4398 <__aeabi_dmul>
   b8150:	4622      	mov	r2, r4
   b8152:	462b      	mov	r3, r5
   b8154:	4604      	mov	r4, r0
   b8156:	460d      	mov	r5, r1
   b8158:	ec51 0b19 	vmov	r0, r1, d9
   b815c:	f7fc f91c 	bl	b4398 <__aeabi_dmul>
   b8160:	4602      	mov	r2, r0
   b8162:	460b      	mov	r3, r1
   b8164:	4620      	mov	r0, r4
   b8166:	4629      	mov	r1, r5
   b8168:	f7fb ff60 	bl	b402c <__adddf3>
   b816c:	4680      	mov	r8, r0
   b816e:	4689      	mov	r9, r1
   b8170:	4642      	mov	r2, r8
   b8172:	464b      	mov	r3, r9
   b8174:	4650      	mov	r0, sl
   b8176:	4659      	mov	r1, fp
   b8178:	f7fb ff58 	bl	b402c <__adddf3>
   b817c:	a344      	add	r3, pc, #272	; (adr r3, b8290 <__ieee754_pow+0x578>)
   b817e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8182:	2000      	movs	r0, #0
   b8184:	4604      	mov	r4, r0
   b8186:	460d      	mov	r5, r1
   b8188:	f7fc f906 	bl	b4398 <__aeabi_dmul>
   b818c:	4652      	mov	r2, sl
   b818e:	ec41 0b19 	vmov	d9, r0, r1
   b8192:	465b      	mov	r3, fp
   b8194:	4620      	mov	r0, r4
   b8196:	4629      	mov	r1, r5
   b8198:	f7fb ff46 	bl	b4028 <__aeabi_dsub>
   b819c:	4602      	mov	r2, r0
   b819e:	460b      	mov	r3, r1
   b81a0:	4640      	mov	r0, r8
   b81a2:	4649      	mov	r1, r9
   b81a4:	f7fb ff40 	bl	b4028 <__aeabi_dsub>
   b81a8:	a33b      	add	r3, pc, #236	; (adr r3, b8298 <__ieee754_pow+0x580>)
   b81aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   b81ae:	f7fc f8f3 	bl	b4398 <__aeabi_dmul>
   b81b2:	4602      	mov	r2, r0
   b81b4:	460b      	mov	r3, r1
   b81b6:	4620      	mov	r0, r4
   b81b8:	4629      	mov	r1, r5
   b81ba:	4614      	mov	r4, r2
   b81bc:	461d      	mov	r5, r3
   b81be:	a338      	add	r3, pc, #224	; (adr r3, b82a0 <__ieee754_pow+0x588>)
   b81c0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b81c4:	f7fc f8e8 	bl	b4398 <__aeabi_dmul>
   b81c8:	4602      	mov	r2, r0
   b81ca:	460b      	mov	r3, r1
   b81cc:	4620      	mov	r0, r4
   b81ce:	4629      	mov	r1, r5
   b81d0:	f7fb ff2c 	bl	b402c <__adddf3>
   b81d4:	ec53 2b1d 	vmov	r2, r3, d13
   b81d8:	f7fb ff28 	bl	b402c <__adddf3>
   b81dc:	4680      	mov	r8, r0
   b81de:	9805      	ldr	r0, [sp, #20]
   b81e0:	4689      	mov	r9, r1
   b81e2:	f7fc f86f 	bl	b42c4 <__aeabi_i2d>
   b81e6:	4642      	mov	r2, r8
   b81e8:	4682      	mov	sl, r0
   b81ea:	468b      	mov	fp, r1
   b81ec:	464b      	mov	r3, r9
   b81ee:	ec51 0b19 	vmov	r0, r1, d9
   b81f2:	f7fb ff1b 	bl	b402c <__adddf3>
   b81f6:	ec53 2b1c 	vmov	r2, r3, d12
   b81fa:	f7fb ff17 	bl	b402c <__adddf3>
   b81fe:	4652      	mov	r2, sl
   b8200:	465b      	mov	r3, fp
   b8202:	f7fb ff13 	bl	b402c <__adddf3>
   b8206:	4652      	mov	r2, sl
   b8208:	465b      	mov	r3, fp
   b820a:	2000      	movs	r0, #0
   b820c:	4604      	mov	r4, r0
   b820e:	460d      	mov	r5, r1
   b8210:	f7fb ff0a 	bl	b4028 <__aeabi_dsub>
   b8214:	ec53 2b1c 	vmov	r2, r3, d12
   b8218:	f7fb ff06 	bl	b4028 <__aeabi_dsub>
   b821c:	ec53 2b19 	vmov	r2, r3, d9
   b8220:	f7fb ff02 	bl	b4028 <__aeabi_dsub>
   b8224:	4602      	mov	r2, r0
   b8226:	460b      	mov	r3, r1
   b8228:	4640      	mov	r0, r8
   b822a:	4649      	mov	r1, r9
   b822c:	f7fb fefc 	bl	b4028 <__aeabi_dsub>
   b8230:	9b00      	ldr	r3, [sp, #0]
   b8232:	9a04      	ldr	r2, [sp, #16]
   b8234:	3b01      	subs	r3, #1
   b8236:	4313      	orrs	r3, r2
   b8238:	4682      	mov	sl, r0
   b823a:	468b      	mov	fp, r1
   b823c:	f040 81b6 	bne.w	b85ac <__ieee754_pow+0x894>
   b8240:	ed9f 7b19 	vldr	d7, [pc, #100]	; b82a8 <__ieee754_pow+0x590>
   b8244:	eeb0 8a47 	vmov.f32	s16, s14
   b8248:	eef0 8a67 	vmov.f32	s17, s15
   b824c:	e03c      	b.n	b82c8 <__ieee754_pow+0x5b0>
   b824e:	bf00      	nop
   b8250:	00000000 	.word	0x00000000
   b8254:	3ff00000 	.word	0x3ff00000
	...
   b8260:	4a454eef 	.word	0x4a454eef
   b8264:	3fca7e28 	.word	0x3fca7e28
   b8268:	93c9db65 	.word	0x93c9db65
   b826c:	3fcd864a 	.word	0x3fcd864a
   b8270:	a91d4101 	.word	0xa91d4101
   b8274:	3fd17460 	.word	0x3fd17460
   b8278:	518f264d 	.word	0x518f264d
   b827c:	3fd55555 	.word	0x3fd55555
   b8280:	db6fabff 	.word	0xdb6fabff
   b8284:	3fdb6db6 	.word	0x3fdb6db6
   b8288:	33333303 	.word	0x33333303
   b828c:	3fe33333 	.word	0x3fe33333
   b8290:	e0000000 	.word	0xe0000000
   b8294:	3feec709 	.word	0x3feec709
   b8298:	dc3a03fd 	.word	0xdc3a03fd
   b829c:	3feec709 	.word	0x3feec709
   b82a0:	145b01f5 	.word	0x145b01f5
   b82a4:	be3e2fe0 	.word	0xbe3e2fe0
   b82a8:	00000000 	.word	0x00000000
   b82ac:	bff00000 	.word	0xbff00000
   b82b0:	7ff00000 	.word	0x7ff00000
   b82b4:	43400000 	.word	0x43400000
   b82b8:	0003988e 	.word	0x0003988e
   b82bc:	000bb679 	.word	0x000bb679
   b82c0:	3ff00000 	.word	0x3ff00000
   b82c4:	40080000 	.word	0x40080000
   b82c8:	2300      	movs	r3, #0
   b82ca:	e9cd 6700 	strd	r6, r7, [sp]
   b82ce:	9300      	str	r3, [sp, #0]
   b82d0:	e9dd 8900 	ldrd	r8, r9, [sp]
   b82d4:	4630      	mov	r0, r6
   b82d6:	4642      	mov	r2, r8
   b82d8:	464b      	mov	r3, r9
   b82da:	4639      	mov	r1, r7
   b82dc:	f7fb fea4 	bl	b4028 <__aeabi_dsub>
   b82e0:	4622      	mov	r2, r4
   b82e2:	462b      	mov	r3, r5
   b82e4:	f7fc f858 	bl	b4398 <__aeabi_dmul>
   b82e8:	4632      	mov	r2, r6
   b82ea:	463b      	mov	r3, r7
   b82ec:	4606      	mov	r6, r0
   b82ee:	460f      	mov	r7, r1
   b82f0:	4650      	mov	r0, sl
   b82f2:	4659      	mov	r1, fp
   b82f4:	f7fc f850 	bl	b4398 <__aeabi_dmul>
   b82f8:	4602      	mov	r2, r0
   b82fa:	460b      	mov	r3, r1
   b82fc:	4630      	mov	r0, r6
   b82fe:	4639      	mov	r1, r7
   b8300:	f7fb fe94 	bl	b402c <__adddf3>
   b8304:	4642      	mov	r2, r8
   b8306:	464b      	mov	r3, r9
   b8308:	4606      	mov	r6, r0
   b830a:	460f      	mov	r7, r1
   b830c:	4620      	mov	r0, r4
   b830e:	4629      	mov	r1, r5
   b8310:	f7fc f842 	bl	b4398 <__aeabi_dmul>
   b8314:	4604      	mov	r4, r0
   b8316:	460d      	mov	r5, r1
   b8318:	462b      	mov	r3, r5
   b831a:	4630      	mov	r0, r6
   b831c:	4639      	mov	r1, r7
   b831e:	4622      	mov	r2, r4
   b8320:	f7fb fe84 	bl	b402c <__adddf3>
   b8324:	4bc2      	ldr	r3, [pc, #776]	; (b8630 <__ieee754_pow+0x918>)
   b8326:	4299      	cmp	r1, r3
   b8328:	4680      	mov	r8, r0
   b832a:	4689      	mov	r9, r1
   b832c:	468a      	mov	sl, r1
   b832e:	f340 8118 	ble.w	b8562 <__ieee754_pow+0x84a>
   b8332:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   b8336:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   b833a:	4303      	orrs	r3, r0
   b833c:	f040 8207 	bne.w	b874e <__ieee754_pow+0xa36>
   b8340:	a3a3      	add	r3, pc, #652	; (adr r3, b85d0 <__ieee754_pow+0x8b8>)
   b8342:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8346:	4630      	mov	r0, r6
   b8348:	4639      	mov	r1, r7
   b834a:	f7fb fe6f 	bl	b402c <__adddf3>
   b834e:	4602      	mov	r2, r0
   b8350:	460b      	mov	r3, r1
   b8352:	4640      	mov	r0, r8
   b8354:	4649      	mov	r1, r9
   b8356:	4690      	mov	r8, r2
   b8358:	4699      	mov	r9, r3
   b835a:	4622      	mov	r2, r4
   b835c:	462b      	mov	r3, r5
   b835e:	f7fb fe63 	bl	b4028 <__aeabi_dsub>
   b8362:	4602      	mov	r2, r0
   b8364:	460b      	mov	r3, r1
   b8366:	4640      	mov	r0, r8
   b8368:	4649      	mov	r1, r9
   b836a:	f7fc faa5 	bl	b48b8 <__aeabi_dcmpgt>
   b836e:	2800      	cmp	r0, #0
   b8370:	f040 81ed 	bne.w	b874e <__ieee754_pow+0xa36>
   b8374:	f3ca 530a 	ubfx	r3, sl, #20, #11
   b8378:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   b837c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   b8380:	fa42 f303 	asr.w	r3, r2, r3
   b8384:	4453      	add	r3, sl
   b8386:	49ab      	ldr	r1, [pc, #684]	; (b8634 <__ieee754_pow+0x91c>)
   b8388:	f3c3 520a 	ubfx	r2, r3, #20, #11
   b838c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   b8390:	fa41 fc02 	asr.w	ip, r1, r2
   b8394:	f3c3 0113 	ubfx	r1, r3, #0, #20
   b8398:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b839c:	f1c2 0214 	rsb	r2, r2, #20
   b83a0:	fa41 f202 	asr.w	r2, r1, r2
   b83a4:	2000      	movs	r0, #0
   b83a6:	ea23 010c 	bic.w	r1, r3, ip
   b83aa:	f1ba 0f00 	cmp.w	sl, #0
   b83ae:	9200      	str	r2, [sp, #0]
   b83b0:	460b      	mov	r3, r1
   b83b2:	4602      	mov	r2, r0
   b83b4:	da02      	bge.n	b83bc <__ieee754_pow+0x6a4>
   b83b6:	9900      	ldr	r1, [sp, #0]
   b83b8:	4249      	negs	r1, r1
   b83ba:	9100      	str	r1, [sp, #0]
   b83bc:	4620      	mov	r0, r4
   b83be:	4629      	mov	r1, r5
   b83c0:	f7fb fe32 	bl	b4028 <__aeabi_dsub>
   b83c4:	9b00      	ldr	r3, [sp, #0]
   b83c6:	051b      	lsls	r3, r3, #20
   b83c8:	9302      	str	r3, [sp, #8]
   b83ca:	4602      	mov	r2, r0
   b83cc:	460b      	mov	r3, r1
   b83ce:	4604      	mov	r4, r0
   b83d0:	460d      	mov	r5, r1
   b83d2:	4630      	mov	r0, r6
   b83d4:	4639      	mov	r1, r7
   b83d6:	f7fb fe29 	bl	b402c <__adddf3>
   b83da:	4689      	mov	r9, r1
   b83dc:	f04f 0800 	mov.w	r8, #0
   b83e0:	a37d      	add	r3, pc, #500	; (adr r3, b85d8 <__ieee754_pow+0x8c0>)
   b83e2:	e9d3 2300 	ldrd	r2, r3, [r3]
   b83e6:	4640      	mov	r0, r8
   b83e8:	4649      	mov	r1, r9
   b83ea:	f7fb ffd5 	bl	b4398 <__aeabi_dmul>
   b83ee:	4622      	mov	r2, r4
   b83f0:	462b      	mov	r3, r5
   b83f2:	4682      	mov	sl, r0
   b83f4:	468b      	mov	fp, r1
   b83f6:	4640      	mov	r0, r8
   b83f8:	4649      	mov	r1, r9
   b83fa:	f7fb fe15 	bl	b4028 <__aeabi_dsub>
   b83fe:	4602      	mov	r2, r0
   b8400:	460b      	mov	r3, r1
   b8402:	4630      	mov	r0, r6
   b8404:	4639      	mov	r1, r7
   b8406:	f7fb fe0f 	bl	b4028 <__aeabi_dsub>
   b840a:	a375      	add	r3, pc, #468	; (adr r3, b85e0 <__ieee754_pow+0x8c8>)
   b840c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8410:	f7fb ffc2 	bl	b4398 <__aeabi_dmul>
   b8414:	a374      	add	r3, pc, #464	; (adr r3, b85e8 <__ieee754_pow+0x8d0>)
   b8416:	e9d3 2300 	ldrd	r2, r3, [r3]
   b841a:	4604      	mov	r4, r0
   b841c:	460d      	mov	r5, r1
   b841e:	4640      	mov	r0, r8
   b8420:	4649      	mov	r1, r9
   b8422:	f7fb ffb9 	bl	b4398 <__aeabi_dmul>
   b8426:	4602      	mov	r2, r0
   b8428:	460b      	mov	r3, r1
   b842a:	4620      	mov	r0, r4
   b842c:	4629      	mov	r1, r5
   b842e:	f7fb fdfd 	bl	b402c <__adddf3>
   b8432:	4606      	mov	r6, r0
   b8434:	460f      	mov	r7, r1
   b8436:	4632      	mov	r2, r6
   b8438:	463b      	mov	r3, r7
   b843a:	4650      	mov	r0, sl
   b843c:	4659      	mov	r1, fp
   b843e:	f7fb fdf5 	bl	b402c <__adddf3>
   b8442:	4652      	mov	r2, sl
   b8444:	465b      	mov	r3, fp
   b8446:	4604      	mov	r4, r0
   b8448:	460d      	mov	r5, r1
   b844a:	f7fb fded 	bl	b4028 <__aeabi_dsub>
   b844e:	4602      	mov	r2, r0
   b8450:	460b      	mov	r3, r1
   b8452:	4630      	mov	r0, r6
   b8454:	4639      	mov	r1, r7
   b8456:	f7fb fde7 	bl	b4028 <__aeabi_dsub>
   b845a:	4622      	mov	r2, r4
   b845c:	4680      	mov	r8, r0
   b845e:	4689      	mov	r9, r1
   b8460:	462b      	mov	r3, r5
   b8462:	4620      	mov	r0, r4
   b8464:	4629      	mov	r1, r5
   b8466:	f7fb ff97 	bl	b4398 <__aeabi_dmul>
   b846a:	a361      	add	r3, pc, #388	; (adr r3, b85f0 <__ieee754_pow+0x8d8>)
   b846c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8470:	4606      	mov	r6, r0
   b8472:	460f      	mov	r7, r1
   b8474:	f7fb ff90 	bl	b4398 <__aeabi_dmul>
   b8478:	a35f      	add	r3, pc, #380	; (adr r3, b85f8 <__ieee754_pow+0x8e0>)
   b847a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b847e:	f7fb fdd3 	bl	b4028 <__aeabi_dsub>
   b8482:	4632      	mov	r2, r6
   b8484:	463b      	mov	r3, r7
   b8486:	f7fb ff87 	bl	b4398 <__aeabi_dmul>
   b848a:	a35d      	add	r3, pc, #372	; (adr r3, b8600 <__ieee754_pow+0x8e8>)
   b848c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8490:	f7fb fdcc 	bl	b402c <__adddf3>
   b8494:	4632      	mov	r2, r6
   b8496:	463b      	mov	r3, r7
   b8498:	f7fb ff7e 	bl	b4398 <__aeabi_dmul>
   b849c:	a35a      	add	r3, pc, #360	; (adr r3, b8608 <__ieee754_pow+0x8f0>)
   b849e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b84a2:	f7fb fdc1 	bl	b4028 <__aeabi_dsub>
   b84a6:	4632      	mov	r2, r6
   b84a8:	463b      	mov	r3, r7
   b84aa:	f7fb ff75 	bl	b4398 <__aeabi_dmul>
   b84ae:	a358      	add	r3, pc, #352	; (adr r3, b8610 <__ieee754_pow+0x8f8>)
   b84b0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b84b4:	f7fb fdba 	bl	b402c <__adddf3>
   b84b8:	4632      	mov	r2, r6
   b84ba:	463b      	mov	r3, r7
   b84bc:	f7fb ff6c 	bl	b4398 <__aeabi_dmul>
   b84c0:	4602      	mov	r2, r0
   b84c2:	460b      	mov	r3, r1
   b84c4:	4620      	mov	r0, r4
   b84c6:	4629      	mov	r1, r5
   b84c8:	f7fb fdae 	bl	b4028 <__aeabi_dsub>
   b84cc:	4606      	mov	r6, r0
   b84ce:	460f      	mov	r7, r1
   b84d0:	4632      	mov	r2, r6
   b84d2:	463b      	mov	r3, r7
   b84d4:	4620      	mov	r0, r4
   b84d6:	4629      	mov	r1, r5
   b84d8:	f7fb ff5e 	bl	b4398 <__aeabi_dmul>
   b84dc:	4602      	mov	r2, r0
   b84de:	460b      	mov	r3, r1
   b84e0:	4630      	mov	r0, r6
   b84e2:	4639      	mov	r1, r7
   b84e4:	4616      	mov	r6, r2
   b84e6:	461f      	mov	r7, r3
   b84e8:	2200      	movs	r2, #0
   b84ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   b84ee:	f7fb fd9b 	bl	b4028 <__aeabi_dsub>
   b84f2:	4602      	mov	r2, r0
   b84f4:	460b      	mov	r3, r1
   b84f6:	4630      	mov	r0, r6
   b84f8:	4639      	mov	r1, r7
   b84fa:	f7fc f877 	bl	b45ec <__aeabi_ddiv>
   b84fe:	4642      	mov	r2, r8
   b8500:	4606      	mov	r6, r0
   b8502:	460f      	mov	r7, r1
   b8504:	464b      	mov	r3, r9
   b8506:	4620      	mov	r0, r4
   b8508:	4629      	mov	r1, r5
   b850a:	f7fb ff45 	bl	b4398 <__aeabi_dmul>
   b850e:	4642      	mov	r2, r8
   b8510:	464b      	mov	r3, r9
   b8512:	f7fb fd8b 	bl	b402c <__adddf3>
   b8516:	4602      	mov	r2, r0
   b8518:	460b      	mov	r3, r1
   b851a:	4630      	mov	r0, r6
   b851c:	4639      	mov	r1, r7
   b851e:	f7fb fd83 	bl	b4028 <__aeabi_dsub>
   b8522:	4622      	mov	r2, r4
   b8524:	462b      	mov	r3, r5
   b8526:	f7fb fd7f 	bl	b4028 <__aeabi_dsub>
   b852a:	4602      	mov	r2, r0
   b852c:	460b      	mov	r3, r1
   b852e:	2000      	movs	r0, #0
   b8530:	4941      	ldr	r1, [pc, #260]	; (b8638 <__ieee754_pow+0x920>)
   b8532:	f7fb fd79 	bl	b4028 <__aeabi_dsub>
   b8536:	9a02      	ldr	r2, [sp, #8]
   b8538:	460b      	mov	r3, r1
   b853a:	4413      	add	r3, r2
   b853c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   b8540:	f2c0 8143 	blt.w	b87ca <__ieee754_pow+0xab2>
   b8544:	4619      	mov	r1, r3
   b8546:	ec53 2b18 	vmov	r2, r3, d8
   b854a:	f7fb ff25 	bl	b4398 <__aeabi_dmul>
   b854e:	ec41 0b10 	vmov	d0, r0, r1
   b8552:	e42d      	b.n	b7db0 <__ieee754_pow+0x98>
   b8554:	f1bb 0f00 	cmp.w	fp, #0
   b8558:	f6ff aca0 	blt.w	b7e9c <__ieee754_pow+0x184>
   b855c:	ed9f 0b2e 	vldr	d0, [pc, #184]	; b8618 <__ieee754_pow+0x900>
   b8560:	e426      	b.n	b7db0 <__ieee754_pow+0x98>
   b8562:	f8df c0dc 	ldr.w	ip, [pc, #220]	; b8640 <__ieee754_pow+0x928>
   b8566:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   b856a:	4563      	cmp	r3, ip
   b856c:	f340 80e7 	ble.w	b873e <__ieee754_pow+0xa26>
   b8570:	4b32      	ldr	r3, [pc, #200]	; (b863c <__ieee754_pow+0x924>)
   b8572:	440b      	add	r3, r1
   b8574:	4303      	orrs	r3, r0
   b8576:	d10a      	bne.n	b858e <__ieee754_pow+0x876>
   b8578:	4622      	mov	r2, r4
   b857a:	462b      	mov	r3, r5
   b857c:	f7fb fd54 	bl	b4028 <__aeabi_dsub>
   b8580:	4632      	mov	r2, r6
   b8582:	463b      	mov	r3, r7
   b8584:	f7fc f98e 	bl	b48a4 <__aeabi_dcmpge>
   b8588:	2800      	cmp	r0, #0
   b858a:	f43f aef3 	beq.w	b8374 <__ieee754_pow+0x65c>
   b858e:	a324      	add	r3, pc, #144	; (adr r3, b8620 <__ieee754_pow+0x908>)
   b8590:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8594:	ec51 0b18 	vmov	r0, r1, d8
   b8598:	f7fb fefe 	bl	b4398 <__aeabi_dmul>
   b859c:	a320      	add	r3, pc, #128	; (adr r3, b8620 <__ieee754_pow+0x908>)
   b859e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b85a2:	f7fb fef9 	bl	b4398 <__aeabi_dmul>
   b85a6:	ec41 0b10 	vmov	d0, r0, r1
   b85aa:	e401      	b.n	b7db0 <__ieee754_pow+0x98>
   b85ac:	ed9f 7b1e 	vldr	d7, [pc, #120]	; b8628 <__ieee754_pow+0x910>
   b85b0:	eeb0 8a47 	vmov.f32	s16, s14
   b85b4:	eef0 8a67 	vmov.f32	s17, s15
   b85b8:	e686      	b.n	b82c8 <__ieee754_pow+0x5b0>
   b85ba:	f1bb 0f00 	cmp.w	fp, #0
   b85be:	dacd      	bge.n	b855c <__ieee754_pow+0x844>
   b85c0:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   b85c4:	ee00 6a10 	vmov	s0, r6
   b85c8:	ee00 3a90 	vmov	s1, r3
   b85cc:	f7ff bbf0 	b.w	b7db0 <__ieee754_pow+0x98>
   b85d0:	652b82fe 	.word	0x652b82fe
   b85d4:	3c971547 	.word	0x3c971547
   b85d8:	00000000 	.word	0x00000000
   b85dc:	3fe62e43 	.word	0x3fe62e43
   b85e0:	fefa39ef 	.word	0xfefa39ef
   b85e4:	3fe62e42 	.word	0x3fe62e42
   b85e8:	0ca86c39 	.word	0x0ca86c39
   b85ec:	be205c61 	.word	0xbe205c61
   b85f0:	72bea4d0 	.word	0x72bea4d0
   b85f4:	3e663769 	.word	0x3e663769
   b85f8:	c5d26bf1 	.word	0xc5d26bf1
   b85fc:	3ebbbd41 	.word	0x3ebbbd41
   b8600:	af25de2c 	.word	0xaf25de2c
   b8604:	3f11566a 	.word	0x3f11566a
   b8608:	16bebd93 	.word	0x16bebd93
   b860c:	3f66c16c 	.word	0x3f66c16c
   b8610:	5555553e 	.word	0x5555553e
   b8614:	3fc55555 	.word	0x3fc55555
	...
   b8620:	c2f8f359 	.word	0xc2f8f359
   b8624:	01a56e1f 	.word	0x01a56e1f
   b8628:	00000000 	.word	0x00000000
   b862c:	3ff00000 	.word	0x3ff00000
   b8630:	408fffff 	.word	0x408fffff
   b8634:	000fffff 	.word	0x000fffff
   b8638:	3ff00000 	.word	0x3ff00000
   b863c:	3f6f3400 	.word	0x3f6f3400
   b8640:	4090cbff 	.word	0x4090cbff
   b8644:	4598      	cmp	r8, r3
   b8646:	db85      	blt.n	b8554 <__ieee754_pow+0x83c>
   b8648:	4b7d      	ldr	r3, [pc, #500]	; (b8840 <__ieee754_pow+0xb28>)
   b864a:	4598      	cmp	r8, r3
   b864c:	f73f ac22 	bgt.w	b7e94 <__ieee754_pow+0x17c>
   b8650:	ec51 0b10 	vmov	r0, r1, d0
   b8654:	4b7a      	ldr	r3, [pc, #488]	; (b8840 <__ieee754_pow+0xb28>)
   b8656:	2200      	movs	r2, #0
   b8658:	f7fb fce6 	bl	b4028 <__aeabi_dsub>
   b865c:	a368      	add	r3, pc, #416	; (adr r3, b8800 <__ieee754_pow+0xae8>)
   b865e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8662:	4604      	mov	r4, r0
   b8664:	460d      	mov	r5, r1
   b8666:	f7fb fe97 	bl	b4398 <__aeabi_dmul>
   b866a:	a367      	add	r3, pc, #412	; (adr r3, b8808 <__ieee754_pow+0xaf0>)
   b866c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8670:	4682      	mov	sl, r0
   b8672:	468b      	mov	fp, r1
   b8674:	4620      	mov	r0, r4
   b8676:	4629      	mov	r1, r5
   b8678:	f7fb fe8e 	bl	b4398 <__aeabi_dmul>
   b867c:	4b71      	ldr	r3, [pc, #452]	; (b8844 <__ieee754_pow+0xb2c>)
   b867e:	ec41 0b18 	vmov	d8, r0, r1
   b8682:	2200      	movs	r2, #0
   b8684:	4620      	mov	r0, r4
   b8686:	4629      	mov	r1, r5
   b8688:	f7fb fe86 	bl	b4398 <__aeabi_dmul>
   b868c:	4602      	mov	r2, r0
   b868e:	460b      	mov	r3, r1
   b8690:	a15f      	add	r1, pc, #380	; (adr r1, b8810 <__ieee754_pow+0xaf8>)
   b8692:	e9d1 0100 	ldrd	r0, r1, [r1]
   b8696:	f7fb fcc7 	bl	b4028 <__aeabi_dsub>
   b869a:	4622      	mov	r2, r4
   b869c:	462b      	mov	r3, r5
   b869e:	f7fb fe7b 	bl	b4398 <__aeabi_dmul>
   b86a2:	4602      	mov	r2, r0
   b86a4:	460b      	mov	r3, r1
   b86a6:	2000      	movs	r0, #0
   b86a8:	4967      	ldr	r1, [pc, #412]	; (b8848 <__ieee754_pow+0xb30>)
   b86aa:	f7fb fcbd 	bl	b4028 <__aeabi_dsub>
   b86ae:	4622      	mov	r2, r4
   b86b0:	4680      	mov	r8, r0
   b86b2:	4689      	mov	r9, r1
   b86b4:	462b      	mov	r3, r5
   b86b6:	4620      	mov	r0, r4
   b86b8:	4629      	mov	r1, r5
   b86ba:	f7fb fe6d 	bl	b4398 <__aeabi_dmul>
   b86be:	4602      	mov	r2, r0
   b86c0:	460b      	mov	r3, r1
   b86c2:	4640      	mov	r0, r8
   b86c4:	4649      	mov	r1, r9
   b86c6:	f7fb fe67 	bl	b4398 <__aeabi_dmul>
   b86ca:	a353      	add	r3, pc, #332	; (adr r3, b8818 <__ieee754_pow+0xb00>)
   b86cc:	e9d3 2300 	ldrd	r2, r3, [r3]
   b86d0:	f7fb fe62 	bl	b4398 <__aeabi_dmul>
   b86d4:	4602      	mov	r2, r0
   b86d6:	460b      	mov	r3, r1
   b86d8:	ec51 0b18 	vmov	r0, r1, d8
   b86dc:	f7fb fca4 	bl	b4028 <__aeabi_dsub>
   b86e0:	4680      	mov	r8, r0
   b86e2:	4689      	mov	r9, r1
   b86e4:	4642      	mov	r2, r8
   b86e6:	464b      	mov	r3, r9
   b86e8:	4650      	mov	r0, sl
   b86ea:	4659      	mov	r1, fp
   b86ec:	f7fb fc9e 	bl	b402c <__adddf3>
   b86f0:	2000      	movs	r0, #0
   b86f2:	4652      	mov	r2, sl
   b86f4:	465b      	mov	r3, fp
   b86f6:	4604      	mov	r4, r0
   b86f8:	460d      	mov	r5, r1
   b86fa:	e591      	b.n	b8220 <__ieee754_pow+0x508>
   b86fc:	4622      	mov	r2, r4
   b86fe:	462b      	mov	r3, r5
   b8700:	4620      	mov	r0, r4
   b8702:	4629      	mov	r1, r5
   b8704:	f7fb fe48 	bl	b4398 <__aeabi_dmul>
   b8708:	ec41 0b10 	vmov	d0, r0, r1
   b870c:	f7ff bb50 	b.w	b7db0 <__ieee754_pow+0x98>
   b8710:	494b      	ldr	r1, [pc, #300]	; (b8840 <__ieee754_pow+0xb28>)
   b8712:	2000      	movs	r0, #0
   b8714:	4622      	mov	r2, r4
   b8716:	462b      	mov	r3, r5
   b8718:	f7fb ff68 	bl	b45ec <__aeabi_ddiv>
   b871c:	ec41 0b10 	vmov	d0, r0, r1
   b8720:	f7ff bb46 	b.w	b7db0 <__ieee754_pow+0x98>
   b8724:	2b00      	cmp	r3, #0
   b8726:	d144      	bne.n	b87b2 <__ieee754_pow+0xa9a>
   b8728:	f1c1 0114 	rsb	r1, r1, #20
   b872c:	fa4a f001 	asr.w	r0, sl, r1
   b8730:	fa00 f101 	lsl.w	r1, r0, r1
   b8734:	4551      	cmp	r1, sl
   b8736:	d05a      	beq.n	b87ee <__ieee754_pow+0xad6>
   b8738:	9300      	str	r3, [sp, #0]
   b873a:	f7ff bb17 	b.w	b7d6c <__ieee754_pow+0x54>
   b873e:	4a42      	ldr	r2, [pc, #264]	; (b8848 <__ieee754_pow+0xb30>)
   b8740:	4293      	cmp	r3, r2
   b8742:	dc5b      	bgt.n	b87fc <__ieee754_pow+0xae4>
   b8744:	e9dd 1200 	ldrd	r1, r2, [sp]
   b8748:	9102      	str	r1, [sp, #8]
   b874a:	9100      	str	r1, [sp, #0]
   b874c:	e646      	b.n	b83dc <__ieee754_pow+0x6c4>
   b874e:	a334      	add	r3, pc, #208	; (adr r3, b8820 <__ieee754_pow+0xb08>)
   b8750:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8754:	ec51 0b18 	vmov	r0, r1, d8
   b8758:	f7fb fe1e 	bl	b4398 <__aeabi_dmul>
   b875c:	a330      	add	r3, pc, #192	; (adr r3, b8820 <__ieee754_pow+0xb08>)
   b875e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8762:	f7fb fe19 	bl	b4398 <__aeabi_dmul>
   b8766:	ec41 0b10 	vmov	d0, r0, r1
   b876a:	f7ff bb21 	b.w	b7db0 <__ieee754_pow+0x98>
   b876e:	9b00      	ldr	r3, [sp, #0]
   b8770:	2b01      	cmp	r3, #1
   b8772:	f47f ab1d 	bne.w	b7db0 <__ieee754_pow+0x98>
   b8776:	ee10 1a90 	vmov	r1, s1
   b877a:	ee10 2a10 	vmov	r2, s0
   b877e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b8782:	ec43 2b10 	vmov	d0, r2, r3
   b8786:	f7ff bb13 	b.w	b7db0 <__ieee754_pow+0x98>
   b878a:	ed9f 7b27 	vldr	d7, [pc, #156]	; b8828 <__ieee754_pow+0xb10>
   b878e:	eeb0 ca47 	vmov.f32	s24, s14
   b8792:	eef0 ca67 	vmov.f32	s25, s15
   b8796:	ed9f 7b26 	vldr	d7, [pc, #152]	; b8830 <__ieee754_pow+0xb18>
   b879a:	eeb0 da47 	vmov.f32	s26, s14
   b879e:	eef0 da67 	vmov.f32	s27, s15
   b87a2:	ed9f 7b25 	vldr	d7, [pc, #148]	; b8838 <__ieee754_pow+0xb20>
   b87a6:	f44f 2580 	mov.w	r5, #262144	; 0x40000
   b87aa:	ec53 2b17 	vmov	r2, r3, d7
   b87ae:	f7ff bbeb 	b.w	b7f88 <__ieee754_pow+0x270>
   b87b2:	ec45 4b10 	vmov	d0, r4, r5
   b87b6:	9200      	str	r2, [sp, #0]
   b87b8:	f000 f914 	bl	b89e4 <fabs>
   b87bc:	9a00      	ldr	r2, [sp, #0]
   b87be:	2a00      	cmp	r2, #0
   b87c0:	f47f ab92 	bne.w	b7ee8 <__ieee754_pow+0x1d0>
   b87c4:	9200      	str	r2, [sp, #0]
   b87c6:	f7ff bb26 	b.w	b7e16 <__ieee754_pow+0xfe>
   b87ca:	ec41 0b10 	vmov	d0, r0, r1
   b87ce:	9800      	ldr	r0, [sp, #0]
   b87d0:	f000 f9c2 	bl	b8b58 <scalbn>
   b87d4:	ec51 0b10 	vmov	r0, r1, d0
   b87d8:	e6b5      	b.n	b8546 <__ieee754_pow+0x82e>
   b87da:	f000 0001 	and.w	r0, r0, #1
   b87de:	f1c0 0102 	rsb	r1, r0, #2
   b87e2:	9100      	str	r1, [sp, #0]
   b87e4:	2b00      	cmp	r3, #0
   b87e6:	f43f aac1 	beq.w	b7d6c <__ieee754_pow+0x54>
   b87ea:	f7ff bb0d 	b.w	b7e08 <__ieee754_pow+0xf0>
   b87ee:	f000 0001 	and.w	r0, r0, #1
   b87f2:	f1c0 0302 	rsb	r3, r0, #2
   b87f6:	9300      	str	r3, [sp, #0]
   b87f8:	f7ff bab8 	b.w	b7d6c <__ieee754_pow+0x54>
   b87fc:	151b      	asrs	r3, r3, #20
   b87fe:	e5bb      	b.n	b8378 <__ieee754_pow+0x660>
   b8800:	60000000 	.word	0x60000000
   b8804:	3ff71547 	.word	0x3ff71547
   b8808:	f85ddf44 	.word	0xf85ddf44
   b880c:	3e54ae0b 	.word	0x3e54ae0b
   b8810:	55555555 	.word	0x55555555
   b8814:	3fd55555 	.word	0x3fd55555
   b8818:	652b82fe 	.word	0x652b82fe
   b881c:	3ff71547 	.word	0x3ff71547
   b8820:	8800759c 	.word	0x8800759c
   b8824:	7e37e43c 	.word	0x7e37e43c
   b8828:	40000000 	.word	0x40000000
   b882c:	3fe2b803 	.word	0x3fe2b803
   b8830:	43cfd006 	.word	0x43cfd006
   b8834:	3e4cfdeb 	.word	0x3e4cfdeb
   b8838:	00000000 	.word	0x00000000
   b883c:	3ff80000 	.word	0x3ff80000
   b8840:	3ff00000 	.word	0x3ff00000
   b8844:	3fd00000 	.word	0x3fd00000
   b8848:	3fe00000 	.word	0x3fe00000

000b884c <__ieee754_sqrt>:
   b884c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8850:	4a63      	ldr	r2, [pc, #396]	; (b89e0 <__ieee754_sqrt+0x194>)
   b8852:	ec55 4b10 	vmov	r4, r5, d0
   b8856:	43aa      	bics	r2, r5
   b8858:	f000 809f 	beq.w	b899a <__ieee754_sqrt+0x14e>
   b885c:	2d00      	cmp	r5, #0
   b885e:	ee10 ca10 	vmov	ip, s0
   b8862:	462b      	mov	r3, r5
   b8864:	dd54      	ble.n	b8910 <__ieee754_sqrt+0xc4>
   b8866:	1529      	asrs	r1, r5, #20
   b8868:	d063      	beq.n	b8932 <__ieee754_sqrt+0xe6>
   b886a:	f3c3 0313 	ubfx	r3, r3, #0, #20
   b886e:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
   b8872:	07c9      	lsls	r1, r1, #31
   b8874:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b8878:	d404      	bmi.n	b8884 <__ieee754_sqrt+0x38>
   b887a:	005b      	lsls	r3, r3, #1
   b887c:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   b8880:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b8884:	ea4f 72dc 	mov.w	r2, ip, lsr #31
   b8888:	2600      	movs	r6, #0
   b888a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   b888e:	107f      	asrs	r7, r7, #1
   b8890:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b8894:	f04f 0e16 	mov.w	lr, #22
   b8898:	4634      	mov	r4, r6
   b889a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   b889e:	18a1      	adds	r1, r4, r2
   b88a0:	4299      	cmp	r1, r3
   b88a2:	dc02      	bgt.n	b88aa <__ieee754_sqrt+0x5e>
   b88a4:	1a5b      	subs	r3, r3, r1
   b88a6:	188c      	adds	r4, r1, r2
   b88a8:	4416      	add	r6, r2
   b88aa:	005b      	lsls	r3, r3, #1
   b88ac:	f1be 0e01 	subs.w	lr, lr, #1
   b88b0:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   b88b4:	ea4f 0252 	mov.w	r2, r2, lsr #1
   b88b8:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b88bc:	d1ef      	bne.n	b889e <__ieee754_sqrt+0x52>
   b88be:	4675      	mov	r5, lr
   b88c0:	2020      	movs	r0, #32
   b88c2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   b88c6:	e00a      	b.n	b88de <__ieee754_sqrt+0x92>
   b88c8:	d044      	beq.n	b8954 <__ieee754_sqrt+0x108>
   b88ca:	ea4f 71dc 	mov.w	r1, ip, lsr #31
   b88ce:	3801      	subs	r0, #1
   b88d0:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   b88d4:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b88d8:	ea4f 0252 	mov.w	r2, r2, lsr #1
   b88dc:	d043      	beq.n	b8966 <__ieee754_sqrt+0x11a>
   b88de:	42a3      	cmp	r3, r4
   b88e0:	eb02 010e 	add.w	r1, r2, lr
   b88e4:	ddf0      	ble.n	b88c8 <__ieee754_sqrt+0x7c>
   b88e6:	2900      	cmp	r1, #0
   b88e8:	eb01 0e02 	add.w	lr, r1, r2
   b88ec:	db0a      	blt.n	b8904 <__ieee754_sqrt+0xb8>
   b88ee:	46a0      	mov	r8, r4
   b88f0:	1b1b      	subs	r3, r3, r4
   b88f2:	4561      	cmp	r1, ip
   b88f4:	bf88      	it	hi
   b88f6:	f103 33ff 	addhi.w	r3, r3, #4294967295
   b88fa:	ebac 0c01 	sub.w	ip, ip, r1
   b88fe:	4415      	add	r5, r2
   b8900:	4644      	mov	r4, r8
   b8902:	e7e2      	b.n	b88ca <__ieee754_sqrt+0x7e>
   b8904:	f1be 0f00 	cmp.w	lr, #0
   b8908:	dbf1      	blt.n	b88ee <__ieee754_sqrt+0xa2>
   b890a:	f104 0801 	add.w	r8, r4, #1
   b890e:	e7ef      	b.n	b88f0 <__ieee754_sqrt+0xa4>
   b8910:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   b8914:	4322      	orrs	r2, r4
   b8916:	d038      	beq.n	b898a <__ieee754_sqrt+0x13e>
   b8918:	2d00      	cmp	r5, #0
   b891a:	d14e      	bne.n	b89ba <__ieee754_sqrt+0x16e>
   b891c:	4629      	mov	r1, r5
   b891e:	ea4f 22dc 	mov.w	r2, ip, lsr #11
   b8922:	3915      	subs	r1, #21
   b8924:	4613      	mov	r3, r2
   b8926:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
   b892a:	2a00      	cmp	r2, #0
   b892c:	d0f7      	beq.n	b891e <__ieee754_sqrt+0xd2>
   b892e:	02d6      	lsls	r6, r2, #11
   b8930:	d450      	bmi.n	b89d4 <__ieee754_sqrt+0x188>
   b8932:	2000      	movs	r0, #0
   b8934:	005b      	lsls	r3, r3, #1
   b8936:	02dd      	lsls	r5, r3, #11
   b8938:	4604      	mov	r4, r0
   b893a:	f100 0001 	add.w	r0, r0, #1
   b893e:	d5f9      	bpl.n	b8934 <__ieee754_sqrt+0xe8>
   b8940:	461a      	mov	r2, r3
   b8942:	4663      	mov	r3, ip
   b8944:	fa0c fc00 	lsl.w	ip, ip, r0
   b8948:	f1c0 0020 	rsb	r0, r0, #32
   b894c:	40c3      	lsrs	r3, r0
   b894e:	1b09      	subs	r1, r1, r4
   b8950:	4313      	orrs	r3, r2
   b8952:	e78a      	b.n	b886a <__ieee754_sqrt+0x1e>
   b8954:	4561      	cmp	r1, ip
   b8956:	d8b8      	bhi.n	b88ca <__ieee754_sqrt+0x7e>
   b8958:	2900      	cmp	r1, #0
   b895a:	eb01 0e02 	add.w	lr, r1, r2
   b895e:	dbd1      	blt.n	b8904 <__ieee754_sqrt+0xb8>
   b8960:	4698      	mov	r8, r3
   b8962:	2300      	movs	r3, #0
   b8964:	e7c9      	b.n	b88fa <__ieee754_sqrt+0xae>
   b8966:	ea53 030c 	orrs.w	r3, r3, ip
   b896a:	d110      	bne.n	b898e <__ieee754_sqrt+0x142>
   b896c:	0868      	lsrs	r0, r5, #1
   b896e:	1071      	asrs	r1, r6, #1
   b8970:	07f3      	lsls	r3, r6, #31
   b8972:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   b8976:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   b897a:	bf48      	it	mi
   b897c:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   b8980:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   b8984:	4602      	mov	r2, r0
   b8986:	ec43 2b10 	vmov	d0, r2, r3
   b898a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b898e:	1c6a      	adds	r2, r5, #1
   b8990:	bf16      	itet	ne
   b8992:	1c68      	addne	r0, r5, #1
   b8994:	3601      	addeq	r6, #1
   b8996:	0840      	lsrne	r0, r0, #1
   b8998:	e7e9      	b.n	b896e <__ieee754_sqrt+0x122>
   b899a:	ee10 2a10 	vmov	r2, s0
   b899e:	ee10 0a10 	vmov	r0, s0
   b89a2:	462b      	mov	r3, r5
   b89a4:	4629      	mov	r1, r5
   b89a6:	f7fb fcf7 	bl	b4398 <__aeabi_dmul>
   b89aa:	4622      	mov	r2, r4
   b89ac:	462b      	mov	r3, r5
   b89ae:	f7fb fb3d 	bl	b402c <__adddf3>
   b89b2:	ec41 0b10 	vmov	d0, r0, r1
   b89b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b89ba:	ee10 2a10 	vmov	r2, s0
   b89be:	4620      	mov	r0, r4
   b89c0:	4629      	mov	r1, r5
   b89c2:	f7fb fb31 	bl	b4028 <__aeabi_dsub>
   b89c6:	4602      	mov	r2, r0
   b89c8:	460b      	mov	r3, r1
   b89ca:	f7fb fe0f 	bl	b45ec <__aeabi_ddiv>
   b89ce:	ec41 0b10 	vmov	d0, r0, r1
   b89d2:	e7da      	b.n	b898a <__ieee754_sqrt+0x13e>
   b89d4:	4663      	mov	r3, ip
   b89d6:	2020      	movs	r0, #32
   b89d8:	f04f 34ff 	mov.w	r4, #4294967295
   b89dc:	e7b6      	b.n	b894c <__ieee754_sqrt+0x100>
   b89de:	bf00      	nop
   b89e0:	7ff00000 	.word	0x7ff00000

000b89e4 <fabs>:
   b89e4:	ec51 0b10 	vmov	r0, r1, d0
   b89e8:	ee10 2a10 	vmov	r2, s0
   b89ec:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   b89f0:	ec43 2b10 	vmov	d0, r2, r3
   b89f4:	4770      	bx	lr
   b89f6:	bf00      	nop

000b89f8 <finite>:
   b89f8:	b082      	sub	sp, #8
   b89fa:	ed8d 0b00 	vstr	d0, [sp]
   b89fe:	9801      	ldr	r0, [sp, #4]
   b8a00:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
   b8a04:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   b8a08:	0fc0      	lsrs	r0, r0, #31
   b8a0a:	b002      	add	sp, #8
   b8a0c:	4770      	bx	lr
   b8a0e:	bf00      	nop

000b8a10 <nan>:
   b8a10:	ed9f 0b01 	vldr	d0, [pc, #4]	; b8a18 <nan+0x8>
   b8a14:	4770      	bx	lr
   b8a16:	bf00      	nop
   b8a18:	00000000 	.word	0x00000000
   b8a1c:	7ff80000 	.word	0x7ff80000

000b8a20 <rint>:
   b8a20:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8a22:	ec53 2b10 	vmov	r2, r3, d0
   b8a26:	f3c3 5c0a 	ubfx	ip, r3, #20, #11
   b8a2a:	f2ac 31ff 	subw	r1, ip, #1023	; 0x3ff
   b8a2e:	2913      	cmp	r1, #19
   b8a30:	ee10 0a10 	vmov	r0, s0
   b8a34:	b083      	sub	sp, #12
   b8a36:	461c      	mov	r4, r3
   b8a38:	ea4f 7ed3 	mov.w	lr, r3, lsr #31
   b8a3c:	dc3a      	bgt.n	b8ab4 <rint+0x94>
   b8a3e:	2900      	cmp	r1, #0
   b8a40:	db30      	blt.n	b8aa4 <rint+0x84>
   b8a42:	4d42      	ldr	r5, [pc, #264]	; (b8b4c <rint+0x12c>)
   b8a44:	fa45 fc01 	asr.w	ip, r5, r1
   b8a48:	ea03 050c 	and.w	r5, r3, ip
   b8a4c:	4315      	orrs	r5, r2
   b8a4e:	d02d      	beq.n	b8aac <rint+0x8c>
   b8a50:	ea03 035c 	and.w	r3, r3, ip, lsr #1
   b8a54:	4318      	orrs	r0, r3
   b8a56:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
   b8a5a:	d00c      	beq.n	b8a76 <rint+0x56>
   b8a5c:	ea24 0c0c 	bic.w	ip, r4, ip
   b8a60:	f44f 2480 	mov.w	r4, #262144	; 0x40000
   b8a64:	2913      	cmp	r1, #19
   b8a66:	fa44 f101 	asr.w	r1, r4, r1
   b8a6a:	bf0c      	ite	eq
   b8a6c:	f04f 4000 	moveq.w	r0, #2147483648	; 0x80000000
   b8a70:	2000      	movne	r0, #0
   b8a72:	ea4c 0401 	orr.w	r4, ip, r1
   b8a76:	4936      	ldr	r1, [pc, #216]	; (b8b50 <rint+0x130>)
   b8a78:	eb01 0ece 	add.w	lr, r1, lr, lsl #3
   b8a7c:	4623      	mov	r3, r4
   b8a7e:	e9de 4500 	ldrd	r4, r5, [lr]
   b8a82:	4602      	mov	r2, r0
   b8a84:	4629      	mov	r1, r5
   b8a86:	4620      	mov	r0, r4
   b8a88:	f7fb fad0 	bl	b402c <__adddf3>
   b8a8c:	e9cd 0100 	strd	r0, r1, [sp]
   b8a90:	e9dd 0100 	ldrd	r0, r1, [sp]
   b8a94:	4622      	mov	r2, r4
   b8a96:	462b      	mov	r3, r5
   b8a98:	f7fb fac6 	bl	b4028 <__aeabi_dsub>
   b8a9c:	ec41 0b10 	vmov	d0, r0, r1
   b8aa0:	b003      	add	sp, #12
   b8aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b8aa4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   b8aa8:	4311      	orrs	r1, r2
   b8aaa:	d124      	bne.n	b8af6 <rint+0xd6>
   b8aac:	ec43 2b10 	vmov	d0, r2, r3
   b8ab0:	b003      	add	sp, #12
   b8ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b8ab4:	2933      	cmp	r1, #51	; 0x33
   b8ab6:	dd08      	ble.n	b8aca <rint+0xaa>
   b8ab8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
   b8abc:	d1f6      	bne.n	b8aac <rint+0x8c>
   b8abe:	4619      	mov	r1, r3
   b8ac0:	f7fb fab4 	bl	b402c <__adddf3>
   b8ac4:	ec41 0b10 	vmov	d0, r0, r1
   b8ac8:	e7f2      	b.n	b8ab0 <rint+0x90>
   b8aca:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
   b8ace:	f04f 31ff 	mov.w	r1, #4294967295
   b8ad2:	fa21 f10c 	lsr.w	r1, r1, ip
   b8ad6:	420a      	tst	r2, r1
   b8ad8:	d0e8      	beq.n	b8aac <rint+0x8c>
   b8ada:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
   b8ade:	ea4f 0351 	mov.w	r3, r1, lsr #1
   b8ae2:	d0c8      	beq.n	b8a76 <rint+0x56>
   b8ae4:	ea20 0303 	bic.w	r3, r0, r3
   b8ae8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   b8aec:	fa40 fc0c 	asr.w	ip, r0, ip
   b8af0:	ea43 000c 	orr.w	r0, r3, ip
   b8af4:	e7bf      	b.n	b8a76 <rint+0x56>
   b8af6:	f3c3 0313 	ubfx	r3, r3, #0, #20
   b8afa:	4318      	orrs	r0, r3
   b8afc:	4a14      	ldr	r2, [pc, #80]	; (b8b50 <rint+0x130>)
   b8afe:	4243      	negs	r3, r0
   b8b00:	4303      	orrs	r3, r0
   b8b02:	eb02 0ece 	add.w	lr, r2, lr, lsl #3
   b8b06:	0b1b      	lsrs	r3, r3, #12
   b8b08:	0c62      	lsrs	r2, r4, #17
   b8b0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
   b8b0e:	0452      	lsls	r2, r2, #17
   b8b10:	ea43 0702 	orr.w	r7, r3, r2
   b8b14:	463b      	mov	r3, r7
   b8b16:	e9de 6700 	ldrd	r6, r7, [lr]
   b8b1a:	ee10 2a10 	vmov	r2, s0
   b8b1e:	4630      	mov	r0, r6
   b8b20:	4639      	mov	r1, r7
   b8b22:	f7fb fa83 	bl	b402c <__adddf3>
   b8b26:	e9cd 0100 	strd	r0, r1, [sp]
   b8b2a:	4632      	mov	r2, r6
   b8b2c:	463b      	mov	r3, r7
   b8b2e:	e9dd 0100 	ldrd	r0, r1, [sp]
   b8b32:	f7fb fa79 	bl	b4028 <__aeabi_dsub>
   b8b36:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
   b8b3a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b8b3e:	4602      	mov	r2, r0
   b8b40:	ea41 0304 	orr.w	r3, r1, r4
   b8b44:	ec43 2b10 	vmov	d0, r2, r3
   b8b48:	b003      	add	sp, #12
   b8b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b8b4c:	000fffff 	.word	0x000fffff
   b8b50:	000b93a8 	.word	0x000b93a8
   b8b54:	00000000 	.word	0x00000000

000b8b58 <scalbn>:
   b8b58:	b538      	push	{r3, r4, r5, lr}
   b8b5a:	ec53 2b10 	vmov	r2, r3, d0
   b8b5e:	f3c3 510a 	ubfx	r1, r3, #20, #11
   b8b62:	4604      	mov	r4, r0
   b8b64:	469c      	mov	ip, r3
   b8b66:	bb89      	cbnz	r1, b8bcc <scalbn+0x74>
   b8b68:	ee10 1a10 	vmov	r1, s0
   b8b6c:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
   b8b70:	ea5c 0101 	orrs.w	r1, ip, r1
   b8b74:	d029      	beq.n	b8bca <scalbn+0x72>
   b8b76:	4619      	mov	r1, r3
   b8b78:	2200      	movs	r2, #0
   b8b7a:	4b3d      	ldr	r3, [pc, #244]	; (b8c70 <scalbn+0x118>)
   b8b7c:	4d3d      	ldr	r5, [pc, #244]	; (b8c74 <scalbn+0x11c>)
   b8b7e:	ee10 0a10 	vmov	r0, s0
   b8b82:	f7fb fc09 	bl	b4398 <__aeabi_dmul>
   b8b86:	42ac      	cmp	r4, r5
   b8b88:	4602      	mov	r2, r0
   b8b8a:	460b      	mov	r3, r1
   b8b8c:	db16      	blt.n	b8bbc <scalbn+0x64>
   b8b8e:	468c      	mov	ip, r1
   b8b90:	f3c1 510a 	ubfx	r1, r1, #20, #11
   b8b94:	3936      	subs	r1, #54	; 0x36
   b8b96:	4421      	add	r1, r4
   b8b98:	f240 70fe 	movw	r0, #2046	; 0x7fe
   b8b9c:	4281      	cmp	r1, r0
   b8b9e:	dc21      	bgt.n	b8be4 <scalbn+0x8c>
   b8ba0:	2900      	cmp	r1, #0
   b8ba2:	dc47      	bgt.n	b8c34 <scalbn+0xdc>
   b8ba4:	f111 0f35 	cmn.w	r1, #53	; 0x35
   b8ba8:	da34      	bge.n	b8c14 <scalbn+0xbc>
   b8baa:	f24c 3150 	movw	r1, #50000	; 0xc350
   b8bae:	428c      	cmp	r4, r1
   b8bb0:	dc18      	bgt.n	b8be4 <scalbn+0x8c>
   b8bb2:	2b00      	cmp	r3, #0
   b8bb4:	a126      	add	r1, pc, #152	; (adr r1, b8c50 <scalbn+0xf8>)
   b8bb6:	e9d1 0100 	ldrd	r0, r1, [r1]
   b8bba:	db44      	blt.n	b8c46 <scalbn+0xee>
   b8bbc:	a324      	add	r3, pc, #144	; (adr r3, b8c50 <scalbn+0xf8>)
   b8bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8bc2:	f7fb fbe9 	bl	b4398 <__aeabi_dmul>
   b8bc6:	ec41 0b10 	vmov	d0, r0, r1
   b8bca:	bd38      	pop	{r3, r4, r5, pc}
   b8bcc:	f240 70ff 	movw	r0, #2047	; 0x7ff
   b8bd0:	4281      	cmp	r1, r0
   b8bd2:	d1e0      	bne.n	b8b96 <scalbn+0x3e>
   b8bd4:	ee10 0a10 	vmov	r0, s0
   b8bd8:	4619      	mov	r1, r3
   b8bda:	f7fb fa27 	bl	b402c <__adddf3>
   b8bde:	ec41 0b10 	vmov	d0, r0, r1
   b8be2:	bd38      	pop	{r3, r4, r5, pc}
   b8be4:	2b00      	cmp	r3, #0
   b8be6:	a11c      	add	r1, pc, #112	; (adr r1, b8c58 <scalbn+0x100>)
   b8be8:	e9d1 0100 	ldrd	r0, r1, [r1]
   b8bec:	db07      	blt.n	b8bfe <scalbn+0xa6>
   b8bee:	a31a      	add	r3, pc, #104	; (adr r3, b8c58 <scalbn+0x100>)
   b8bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8bf4:	f7fb fbd0 	bl	b4398 <__aeabi_dmul>
   b8bf8:	ec41 0b10 	vmov	d0, r0, r1
   b8bfc:	bd38      	pop	{r3, r4, r5, pc}
   b8bfe:	a118      	add	r1, pc, #96	; (adr r1, b8c60 <scalbn+0x108>)
   b8c00:	e9d1 0100 	ldrd	r0, r1, [r1]
   b8c04:	a314      	add	r3, pc, #80	; (adr r3, b8c58 <scalbn+0x100>)
   b8c06:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8c0a:	f7fb fbc5 	bl	b4398 <__aeabi_dmul>
   b8c0e:	ec41 0b10 	vmov	d0, r0, r1
   b8c12:	e7f3      	b.n	b8bfc <scalbn+0xa4>
   b8c14:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   b8c18:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   b8c1c:	3136      	adds	r1, #54	; 0x36
   b8c1e:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   b8c22:	4610      	mov	r0, r2
   b8c24:	4619      	mov	r1, r3
   b8c26:	2200      	movs	r2, #0
   b8c28:	4b13      	ldr	r3, [pc, #76]	; (b8c78 <scalbn+0x120>)
   b8c2a:	f7fb fbb5 	bl	b4398 <__aeabi_dmul>
   b8c2e:	ec41 0b10 	vmov	d0, r0, r1
   b8c32:	bd38      	pop	{r3, r4, r5, pc}
   b8c34:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   b8c38:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   b8c3c:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   b8c40:	ec43 2b10 	vmov	d0, r2, r3
   b8c44:	bd38      	pop	{r3, r4, r5, pc}
   b8c46:	a108      	add	r1, pc, #32	; (adr r1, b8c68 <scalbn+0x110>)
   b8c48:	e9d1 0100 	ldrd	r0, r1, [r1]
   b8c4c:	e7b6      	b.n	b8bbc <scalbn+0x64>
   b8c4e:	bf00      	nop
   b8c50:	c2f8f359 	.word	0xc2f8f359
   b8c54:	01a56e1f 	.word	0x01a56e1f
   b8c58:	8800759c 	.word	0x8800759c
   b8c5c:	7e37e43c 	.word	0x7e37e43c
   b8c60:	8800759c 	.word	0x8800759c
   b8c64:	fe37e43c 	.word	0xfe37e43c
   b8c68:	c2f8f359 	.word	0xc2f8f359
   b8c6c:	81a56e1f 	.word	0x81a56e1f
   b8c70:	43500000 	.word	0x43500000
   b8c74:	ffff3cb0 	.word	0xffff3cb0
   b8c78:	3c900000 	.word	0x3c900000

000b8c7c <atexit>:
   b8c7c:	2300      	movs	r3, #0
   b8c7e:	4601      	mov	r1, r0
   b8c80:	461a      	mov	r2, r3
   b8c82:	4618      	mov	r0, r3
   b8c84:	f000 b8fe 	b.w	b8e84 <__register_exitproc>

000b8c88 <atoi>:
   b8c88:	220a      	movs	r2, #10
   b8c8a:	2100      	movs	r1, #0
   b8c8c:	f000 b8f0 	b.w	b8e70 <strtol>

000b8c90 <atol>:
   b8c90:	220a      	movs	r2, #10
   b8c92:	2100      	movs	r1, #0
   b8c94:	f000 b8ec 	b.w	b8e70 <strtol>

000b8c98 <isprint>:
   b8c98:	4b02      	ldr	r3, [pc, #8]	; (b8ca4 <isprint+0xc>)
   b8c9a:	4418      	add	r0, r3
   b8c9c:	7840      	ldrb	r0, [r0, #1]
   b8c9e:	f000 0097 	and.w	r0, r0, #151	; 0x97
   b8ca2:	4770      	bx	lr
   b8ca4:	000b944c 	.word	0x000b944c

000b8ca8 <memcpy>:
   b8ca8:	440a      	add	r2, r1
   b8caa:	4291      	cmp	r1, r2
   b8cac:	f100 33ff 	add.w	r3, r0, #4294967295
   b8cb0:	d100      	bne.n	b8cb4 <memcpy+0xc>
   b8cb2:	4770      	bx	lr
   b8cb4:	b510      	push	{r4, lr}
   b8cb6:	f811 4b01 	ldrb.w	r4, [r1], #1
   b8cba:	f803 4f01 	strb.w	r4, [r3, #1]!
   b8cbe:	4291      	cmp	r1, r2
   b8cc0:	d1f9      	bne.n	b8cb6 <memcpy+0xe>
   b8cc2:	bd10      	pop	{r4, pc}

000b8cc4 <memset>:
   b8cc4:	4402      	add	r2, r0
   b8cc6:	4603      	mov	r3, r0
   b8cc8:	4293      	cmp	r3, r2
   b8cca:	d100      	bne.n	b8cce <memset+0xa>
   b8ccc:	4770      	bx	lr
   b8cce:	f803 1b01 	strb.w	r1, [r3], #1
   b8cd2:	e7f9      	b.n	b8cc8 <memset+0x4>

000b8cd4 <srand>:
   b8cd4:	b538      	push	{r3, r4, r5, lr}
   b8cd6:	4b10      	ldr	r3, [pc, #64]	; (b8d18 <srand+0x44>)
   b8cd8:	681d      	ldr	r5, [r3, #0]
   b8cda:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8cdc:	4604      	mov	r4, r0
   b8cde:	b9b3      	cbnz	r3, b8d0e <srand+0x3a>
   b8ce0:	2018      	movs	r0, #24
   b8ce2:	f7fc fe39 	bl	b5958 <malloc>
   b8ce6:	4602      	mov	r2, r0
   b8ce8:	63a8      	str	r0, [r5, #56]	; 0x38
   b8cea:	b920      	cbnz	r0, b8cf6 <srand+0x22>
   b8cec:	4b0b      	ldr	r3, [pc, #44]	; (b8d1c <srand+0x48>)
   b8cee:	480c      	ldr	r0, [pc, #48]	; (b8d20 <srand+0x4c>)
   b8cf0:	2142      	movs	r1, #66	; 0x42
   b8cf2:	f7fc fe69 	bl	b59c8 <__assert_func>
   b8cf6:	490b      	ldr	r1, [pc, #44]	; (b8d24 <srand+0x50>)
   b8cf8:	4b0b      	ldr	r3, [pc, #44]	; (b8d28 <srand+0x54>)
   b8cfa:	e9c0 1300 	strd	r1, r3, [r0]
   b8cfe:	4b0b      	ldr	r3, [pc, #44]	; (b8d2c <srand+0x58>)
   b8d00:	6083      	str	r3, [r0, #8]
   b8d02:	230b      	movs	r3, #11
   b8d04:	8183      	strh	r3, [r0, #12]
   b8d06:	2100      	movs	r1, #0
   b8d08:	2001      	movs	r0, #1
   b8d0a:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b8d0e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8d10:	2200      	movs	r2, #0
   b8d12:	611c      	str	r4, [r3, #16]
   b8d14:	615a      	str	r2, [r3, #20]
   b8d16:	bd38      	pop	{r3, r4, r5, pc}
   b8d18:	2003e47c 	.word	0x2003e47c
   b8d1c:	000b93b8 	.word	0x000b93b8
   b8d20:	000b93cf 	.word	0x000b93cf
   b8d24:	abcd330e 	.word	0xabcd330e
   b8d28:	e66d1234 	.word	0xe66d1234
   b8d2c:	0005deec 	.word	0x0005deec

000b8d30 <strdup>:
   b8d30:	4b02      	ldr	r3, [pc, #8]	; (b8d3c <strdup+0xc>)
   b8d32:	4601      	mov	r1, r0
   b8d34:	6818      	ldr	r0, [r3, #0]
   b8d36:	f000 b803 	b.w	b8d40 <_strdup_r>
   b8d3a:	bf00      	nop
   b8d3c:	2003e47c 	.word	0x2003e47c

000b8d40 <_strdup_r>:
   b8d40:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8d42:	4604      	mov	r4, r0
   b8d44:	4608      	mov	r0, r1
   b8d46:	460d      	mov	r5, r1
   b8d48:	f7fb fe30 	bl	b49ac <strlen>
   b8d4c:	1c42      	adds	r2, r0, #1
   b8d4e:	4611      	mov	r1, r2
   b8d50:	4620      	mov	r0, r4
   b8d52:	9201      	str	r2, [sp, #4]
   b8d54:	f7fc fe28 	bl	b59a8 <_malloc_r>
   b8d58:	4604      	mov	r4, r0
   b8d5a:	b118      	cbz	r0, b8d64 <_strdup_r+0x24>
   b8d5c:	9a01      	ldr	r2, [sp, #4]
   b8d5e:	4629      	mov	r1, r5
   b8d60:	f7ff ffa2 	bl	b8ca8 <memcpy>
   b8d64:	4620      	mov	r0, r4
   b8d66:	b003      	add	sp, #12
   b8d68:	bd30      	pop	{r4, r5, pc}
	...

000b8d6c <_strtol_l.constprop.0>:
   b8d6c:	2b01      	cmp	r3, #1
   b8d6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b8d72:	d001      	beq.n	b8d78 <_strtol_l.constprop.0+0xc>
   b8d74:	2b24      	cmp	r3, #36	; 0x24
   b8d76:	d906      	bls.n	b8d86 <_strtol_l.constprop.0+0x1a>
   b8d78:	f7fc fe1e 	bl	b59b8 <__errno>
   b8d7c:	2316      	movs	r3, #22
   b8d7e:	6003      	str	r3, [r0, #0]
   b8d80:	2000      	movs	r0, #0
   b8d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b8d86:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b8e6c <_strtol_l.constprop.0+0x100>
   b8d8a:	460d      	mov	r5, r1
   b8d8c:	462e      	mov	r6, r5
   b8d8e:	f815 4b01 	ldrb.w	r4, [r5], #1
   b8d92:	f814 700c 	ldrb.w	r7, [r4, ip]
   b8d96:	f017 0708 	ands.w	r7, r7, #8
   b8d9a:	d1f7      	bne.n	b8d8c <_strtol_l.constprop.0+0x20>
   b8d9c:	2c2d      	cmp	r4, #45	; 0x2d
   b8d9e:	d132      	bne.n	b8e06 <_strtol_l.constprop.0+0x9a>
   b8da0:	782c      	ldrb	r4, [r5, #0]
   b8da2:	2701      	movs	r7, #1
   b8da4:	1cb5      	adds	r5, r6, #2
   b8da6:	2b00      	cmp	r3, #0
   b8da8:	d05b      	beq.n	b8e62 <_strtol_l.constprop.0+0xf6>
   b8daa:	2b10      	cmp	r3, #16
   b8dac:	d109      	bne.n	b8dc2 <_strtol_l.constprop.0+0x56>
   b8dae:	2c30      	cmp	r4, #48	; 0x30
   b8db0:	d107      	bne.n	b8dc2 <_strtol_l.constprop.0+0x56>
   b8db2:	782c      	ldrb	r4, [r5, #0]
   b8db4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b8db8:	2c58      	cmp	r4, #88	; 0x58
   b8dba:	d14d      	bne.n	b8e58 <_strtol_l.constprop.0+0xec>
   b8dbc:	786c      	ldrb	r4, [r5, #1]
   b8dbe:	2310      	movs	r3, #16
   b8dc0:	3502      	adds	r5, #2
   b8dc2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b8dc6:	f108 38ff 	add.w	r8, r8, #4294967295
   b8dca:	f04f 0c00 	mov.w	ip, #0
   b8dce:	fbb8 f9f3 	udiv	r9, r8, r3
   b8dd2:	4666      	mov	r6, ip
   b8dd4:	fb03 8a19 	mls	sl, r3, r9, r8
   b8dd8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b8ddc:	f1be 0f09 	cmp.w	lr, #9
   b8de0:	d816      	bhi.n	b8e10 <_strtol_l.constprop.0+0xa4>
   b8de2:	4674      	mov	r4, lr
   b8de4:	42a3      	cmp	r3, r4
   b8de6:	dd24      	ble.n	b8e32 <_strtol_l.constprop.0+0xc6>
   b8de8:	f1bc 0f00 	cmp.w	ip, #0
   b8dec:	db1e      	blt.n	b8e2c <_strtol_l.constprop.0+0xc0>
   b8dee:	45b1      	cmp	r9, r6
   b8df0:	d31c      	bcc.n	b8e2c <_strtol_l.constprop.0+0xc0>
   b8df2:	d101      	bne.n	b8df8 <_strtol_l.constprop.0+0x8c>
   b8df4:	45a2      	cmp	sl, r4
   b8df6:	db19      	blt.n	b8e2c <_strtol_l.constprop.0+0xc0>
   b8df8:	fb06 4603 	mla	r6, r6, r3, r4
   b8dfc:	f04f 0c01 	mov.w	ip, #1
   b8e00:	f815 4b01 	ldrb.w	r4, [r5], #1
   b8e04:	e7e8      	b.n	b8dd8 <_strtol_l.constprop.0+0x6c>
   b8e06:	2c2b      	cmp	r4, #43	; 0x2b
   b8e08:	bf04      	itt	eq
   b8e0a:	782c      	ldrbeq	r4, [r5, #0]
   b8e0c:	1cb5      	addeq	r5, r6, #2
   b8e0e:	e7ca      	b.n	b8da6 <_strtol_l.constprop.0+0x3a>
   b8e10:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b8e14:	f1be 0f19 	cmp.w	lr, #25
   b8e18:	d801      	bhi.n	b8e1e <_strtol_l.constprop.0+0xb2>
   b8e1a:	3c37      	subs	r4, #55	; 0x37
   b8e1c:	e7e2      	b.n	b8de4 <_strtol_l.constprop.0+0x78>
   b8e1e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b8e22:	f1be 0f19 	cmp.w	lr, #25
   b8e26:	d804      	bhi.n	b8e32 <_strtol_l.constprop.0+0xc6>
   b8e28:	3c57      	subs	r4, #87	; 0x57
   b8e2a:	e7db      	b.n	b8de4 <_strtol_l.constprop.0+0x78>
   b8e2c:	f04f 3cff 	mov.w	ip, #4294967295
   b8e30:	e7e6      	b.n	b8e00 <_strtol_l.constprop.0+0x94>
   b8e32:	f1bc 0f00 	cmp.w	ip, #0
   b8e36:	da05      	bge.n	b8e44 <_strtol_l.constprop.0+0xd8>
   b8e38:	2322      	movs	r3, #34	; 0x22
   b8e3a:	6003      	str	r3, [r0, #0]
   b8e3c:	4646      	mov	r6, r8
   b8e3e:	b942      	cbnz	r2, b8e52 <_strtol_l.constprop.0+0xe6>
   b8e40:	4630      	mov	r0, r6
   b8e42:	e79e      	b.n	b8d82 <_strtol_l.constprop.0+0x16>
   b8e44:	b107      	cbz	r7, b8e48 <_strtol_l.constprop.0+0xdc>
   b8e46:	4276      	negs	r6, r6
   b8e48:	2a00      	cmp	r2, #0
   b8e4a:	d0f9      	beq.n	b8e40 <_strtol_l.constprop.0+0xd4>
   b8e4c:	f1bc 0f00 	cmp.w	ip, #0
   b8e50:	d000      	beq.n	b8e54 <_strtol_l.constprop.0+0xe8>
   b8e52:	1e69      	subs	r1, r5, #1
   b8e54:	6011      	str	r1, [r2, #0]
   b8e56:	e7f3      	b.n	b8e40 <_strtol_l.constprop.0+0xd4>
   b8e58:	2430      	movs	r4, #48	; 0x30
   b8e5a:	2b00      	cmp	r3, #0
   b8e5c:	d1b1      	bne.n	b8dc2 <_strtol_l.constprop.0+0x56>
   b8e5e:	2308      	movs	r3, #8
   b8e60:	e7af      	b.n	b8dc2 <_strtol_l.constprop.0+0x56>
   b8e62:	2c30      	cmp	r4, #48	; 0x30
   b8e64:	d0a5      	beq.n	b8db2 <_strtol_l.constprop.0+0x46>
   b8e66:	230a      	movs	r3, #10
   b8e68:	e7ab      	b.n	b8dc2 <_strtol_l.constprop.0+0x56>
   b8e6a:	bf00      	nop
   b8e6c:	000b944d 	.word	0x000b944d

000b8e70 <strtol>:
   b8e70:	4613      	mov	r3, r2
   b8e72:	460a      	mov	r2, r1
   b8e74:	4601      	mov	r1, r0
   b8e76:	4802      	ldr	r0, [pc, #8]	; (b8e80 <strtol+0x10>)
   b8e78:	6800      	ldr	r0, [r0, #0]
   b8e7a:	f7ff bf77 	b.w	b8d6c <_strtol_l.constprop.0>
   b8e7e:	bf00      	nop
   b8e80:	2003e47c 	.word	0x2003e47c

000b8e84 <__register_exitproc>:
   b8e84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b8e88:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b8f44 <__register_exitproc+0xc0>
   b8e8c:	4606      	mov	r6, r0
   b8e8e:	f8d8 0000 	ldr.w	r0, [r8]
   b8e92:	461f      	mov	r7, r3
   b8e94:	460d      	mov	r5, r1
   b8e96:	4691      	mov	r9, r2
   b8e98:	f000 f856 	bl	b8f48 <__retarget_lock_acquire_recursive>
   b8e9c:	4b25      	ldr	r3, [pc, #148]	; (b8f34 <__register_exitproc+0xb0>)
   b8e9e:	681c      	ldr	r4, [r3, #0]
   b8ea0:	b934      	cbnz	r4, b8eb0 <__register_exitproc+0x2c>
   b8ea2:	4c25      	ldr	r4, [pc, #148]	; (b8f38 <__register_exitproc+0xb4>)
   b8ea4:	601c      	str	r4, [r3, #0]
   b8ea6:	4b25      	ldr	r3, [pc, #148]	; (b8f3c <__register_exitproc+0xb8>)
   b8ea8:	b113      	cbz	r3, b8eb0 <__register_exitproc+0x2c>
   b8eaa:	681b      	ldr	r3, [r3, #0]
   b8eac:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b8eb0:	6863      	ldr	r3, [r4, #4]
   b8eb2:	2b1f      	cmp	r3, #31
   b8eb4:	dd07      	ble.n	b8ec6 <__register_exitproc+0x42>
   b8eb6:	f8d8 0000 	ldr.w	r0, [r8]
   b8eba:	f000 f847 	bl	b8f4c <__retarget_lock_release_recursive>
   b8ebe:	f04f 30ff 	mov.w	r0, #4294967295
   b8ec2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b8ec6:	b34e      	cbz	r6, b8f1c <__register_exitproc+0x98>
   b8ec8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b8ecc:	b988      	cbnz	r0, b8ef2 <__register_exitproc+0x6e>
   b8ece:	4b1c      	ldr	r3, [pc, #112]	; (b8f40 <__register_exitproc+0xbc>)
   b8ed0:	b923      	cbnz	r3, b8edc <__register_exitproc+0x58>
   b8ed2:	f8d8 0000 	ldr.w	r0, [r8]
   b8ed6:	f000 f838 	bl	b8f4a <__retarget_lock_release>
   b8eda:	e7f0      	b.n	b8ebe <__register_exitproc+0x3a>
   b8edc:	f44f 7084 	mov.w	r0, #264	; 0x108
   b8ee0:	f7fc fd3a 	bl	b5958 <malloc>
   b8ee4:	2800      	cmp	r0, #0
   b8ee6:	d0f4      	beq.n	b8ed2 <__register_exitproc+0x4e>
   b8ee8:	2300      	movs	r3, #0
   b8eea:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b8eee:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b8ef2:	6863      	ldr	r3, [r4, #4]
   b8ef4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b8ef8:	2201      	movs	r2, #1
   b8efa:	409a      	lsls	r2, r3
   b8efc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b8f00:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b8f04:	4313      	orrs	r3, r2
   b8f06:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b8f0a:	2e02      	cmp	r6, #2
   b8f0c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b8f10:	bf02      	ittt	eq
   b8f12:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b8f16:	4313      	orreq	r3, r2
   b8f18:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b8f1c:	6863      	ldr	r3, [r4, #4]
   b8f1e:	f8d8 0000 	ldr.w	r0, [r8]
   b8f22:	1c5a      	adds	r2, r3, #1
   b8f24:	3302      	adds	r3, #2
   b8f26:	6062      	str	r2, [r4, #4]
   b8f28:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b8f2c:	f000 f80e 	bl	b8f4c <__retarget_lock_release_recursive>
   b8f30:	2000      	movs	r0, #0
   b8f32:	e7c6      	b.n	b8ec2 <__register_exitproc+0x3e>
   b8f34:	2003e7e8 	.word	0x2003e7e8
   b8f38:	2003e75c 	.word	0x2003e75c
   b8f3c:	00000000 	.word	0x00000000
   b8f40:	000b5959 	.word	0x000b5959
   b8f44:	2003e4e0 	.word	0x2003e4e0

000b8f48 <__retarget_lock_acquire_recursive>:
   b8f48:	4770      	bx	lr

000b8f4a <__retarget_lock_release>:
   b8f4a:	4770      	bx	lr

000b8f4c <__retarget_lock_release_recursive>:
   b8f4c:	4770      	bx	lr

000b8f4e <link_code_end>:
	...

000b8f50 <dynalib_user>:
   b8f50:	49bd 000b 49f9 000b 4a21 000b 4a25 000b     .I...I..!J..%J..
   b8f60:	0000 0000 7075 6f6c 6461 645f 7461 0061     ....upload_data.
   b8f70:	6544 6976 6563 6400 7665 6369 0065 5953     Device.device.SY
   b8f80:	3053 5f31 0031 6574 706d 305f 0031 6574     S01_1.temp_01.te
   b8f90:	706d 305f 0032 7568 5f6d 3130 6800 6d75     mp_02.hum_01.hum
   b8fa0:	305f 0032 7968 7267 5f6f 3130 6c00 7875     _02.hygro_01.lux
   b8fb0:	305f 0031 7269 6972 6167 6974 6e6f 732d     _01.irrigation-s
   b8fc0:	7379 6574 006d 6c61 7669 0065 7075 6164     ystem.alive.upda
   b8fd0:	6574 775f 6954 656d 4100 7373 7265 6974     te_wTime.Asserti
   b8fe0:	6e6f 6146 6c69 7275 2065 702a 705f 6e69     onFailure *p_pin
   b8ff0:	3c20 2820 3233 2b20 3120 2936 0000 0000      < (32 + 16)....

000b9000 <_ZTVN5spark13EthernetClassE>:
	...
   b9008:	5a47 000b 5a3d 000b 5a33 000b 5a29 000b     GZ..=Z..3Z..)Z..
   b9018:	5a1d 000b 5a11 000b 73e1 000b 73e9 000b     .Z...Z...s...s..
   b9028:	5a05 000b 59fd 000b 59f3 000b 59e9 000b     .Z...Y...Y...Y..
   b9038:	7419 000b                                   .t..

000b903c <_ZTV3UDP>:
	...
   b9044:	60d5 000b 60f9 000b 5b95 000b 5cbd 000b     .`...`...[...\..
   b9054:	5b4d 000b 5bad 000b 5bcb 000b 5be5 000b     M[...[...[...[..
   b9064:	5c09 000b 5ca1 000b 5f7b 000b 5d41 000b     .\...\..{_..A]..
   b9074:	5e99 000b 5b35 000b 6065 000b 5e21 000b     .^..5[..e`..!^..
   b9084:	5b55 000b 6093 000b 5ce7 000b 5b43 000b     U[...`...\..C[..
   b9094:	5d79 000b 5b49 000b 5be7 000b fff0 ffff     y]..I[...[......
   b90a4:	0000 0000 5c01 000b                         .....\..

000b90ac <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   b90b4:	7061 0070 5925 252d 2d6d 6425 2554 3a48     app.%Y-%m-%dT%H:
   b90c4:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000b90d4 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b90dc:	648d 000b 6493 000b 64d1 000b 64a1 000b     .d...d...d...d..
   b90ec:	648f 000b                                   .d..

000b90f0 <_ZTV9IPAddress>:
	...
   b90f8:	6a19 000b 6a09 000b 6a0b 000b               .j...j...j..

000b9104 <_ZTV9USBSerial>:
	...
   b910c:	6b2b 000b 6b93 000b 6b69 000b 6289 000b     +k...k..ik...b..
   b911c:	6b5b 000b 6b2d 000b 6b3d 000b 6b8d 000b     [k..-k..=k...k..
   b912c:	6b4d 000b 6b25 000b                         Mk..%k..

000b9134 <_ZTV11USARTSerial>:
	...
   b913c:	6c2d 000b 6c99 000b 6c71 000b 6289 000b     -l...l..ql...b..
   b914c:	6c41 000b 6c5d 000b 6c4f 000b 6c6b 000b     Al..]l..Ol..kl..
   b915c:	6c2f 000b 6c33 000b                         /l..3l..

000b9164 <_ZTV7TwoWire>:
	...
   b916c:	6cf9 000b 6d43 000b 6d1b 000b 6cfb 000b     .l..Cm...m...l..
   b917c:	6d23 000b 6d2b 000b 6d33 000b 6d3b 000b     #m..+m..3m..;m..
   b918c:	6977 6972 676e 7200 6365 2076 7265 6f72     wiring.recv erro
   b919c:	2072 203d 6425 0000                         r = %d..

000b91a4 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b91ac:	6e11 000b 6e35 000b 731f 000b 6e43 000b     .n..5n...s..Cn..
   b91bc:	6e15 000b                                   .n..

000b91c0 <_ZTV9TCPClient>:
	...
   b91c8:	53a9 000b 53dd 000b 6d8d 000b 6da7 000b     .S...S...m...m..
   b91d8:	71b5 000b 6dd1 000b 702b 000b 6e05 000b     .q...m..+p...n..
   b91e8:	70bd 000b 6efd 000b 7059 000b 7269 000b     .p...n..Yp..ir..
   b91f8:	6ff9 000b 6e07 000b 6db9 000b 6e49 000b     .o...n...m..In..
   b9208:	6edd 000b                                   .n..

000b920c <_ZTVN5spark9WiFiClassE>:
	...
   b9214:	7383 000b 7379 000b 736f 000b 7325 000b     .s..ys..os..%s..
   b9224:	7363 000b 7357 000b 73e1 000b 73e9 000b     cs..Ws...s...s..
   b9234:	734b 000b 7343 000b 7339 000b 732f 000b     Ks..Cs..9s../s..
   b9244:	7419 000b                                   .t..

000b9248 <_ZTVN5spark12NetworkClassE>:
	...
   b9250:	73a1 000b 73ab 000b 73b5 000b 73bf 000b     .s...s...s...s..
   b9260:	73c9 000b 73d5 000b 73e1 000b 73e9 000b     .s...s...s...s..
   b9270:	73f1 000b 73fd 000b 7405 000b 740f 000b     .s...s...t...t..
   b9280:	7419 000b 6725 7500 3025 7834 0000 0000     .t..%g.u%04x....

000b9290 <_ZTVN5spark16JSONBufferWriterE>:
	...
   b9298:	7505 000b 7507 000b 7515 000b 753b 000b     .u...u...u..;u..

000b92a8 <_ZSt7nothrow>:
	...

000b92a9 <_ZTSSt19_Sp_make_shared_tag>:
   b92a9:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   b92b9:	6572 5f64 6174 0067 0000                     red_tag....

000b92c4 <_ZTISt19_Sp_make_shared_tag>:
   b92c4:	9304 000b 92a9 000b                         ........

000b92cc <_ZTIN10__cxxabiv117__class_type_infoE>:
   b92cc:	9364 000b 92d8 000b 9388 000b               d...........

000b92d8 <_ZTSN10__cxxabiv117__class_type_infoE>:
   b92d8:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   b92e8:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   b92f8:	0045 0000                                   E...

000b92fc <_ZTVN10__cxxabiv117__class_type_infoE>:
   b92fc:	0000 0000 92cc 000b 7995 000b 79a9 000b     .........y...y..
   b930c:	7b3d 000b 7b3d 000b 7a13 000b 7955 000b     ={..={...z..Uy..
   b931c:	79fb 000b 79bd 000b 7987 000b               .y...y...y..

000b9328 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b9328:	9364 000b 9334 000b 92cc 000b               d...4.......

000b9334 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b9334:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   b9344:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   b9354:	666e 456f 0000 0000                         nfoE....

000b935c <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b935c:	0000 0000 9328 000b 7a3d 000b 7a51 000b     ....(...=z..Qz..
   b936c:	7b3d 000b 7b3d 000b 7a13 000b 7955 000b     ={..={...z..Uy..
   b937c:	7b11 000b 7a9d 000b 7a65 000b               .{...z..ez..

000b9388 <_ZTISt9type_info>:
   b9388:	9304 000b 9390 000b                         ........

000b9390 <_ZTSSt9type_info>:
   b9390:	7453 7439 7079 5f65 6e69 6f66 0000 0000     St9type_info....
	...

000b93a8 <TWO52>:
   b93a8:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.
   b93b8:	4552 4e45 2054 616d 6c6c 636f 7320 6375     REENT malloc suc
   b93c8:	6563 6465 6465 2f00 6e6d 2f74 6f77 6b72     ceeded./mnt/work
   b93d8:	7073 6361 2f65 6f77 6b72 7073 6361 2f65     space/workspace/
   b93e8:	4347 2d43 3031 702d 7069 6c65 6e69 2f65     GCC-10-pipeline/
   b93f8:	656a 6b6e 6e69 2d73 4347 2d43 3031 702d     jenkins-GCC-10-p
   b9408:	7069 6c65 6e69 2d65 3834 325f 3230 3130     ipeline-48_20201
   b9418:	3231 5f34 3631 3630 3831 3630 3134 732f     124_1606180641/s
   b9428:	6372 6e2f 7765 696c 2f62 656e 6c77 6269     rc/newlib/newlib
   b9438:	6c2f 6269 2f63 7473 6c64 6269 722f 6e61     /libc/stdlib/ran
   b9448:	2e64 0063                                   d.c.

000b944c <_ctype_>:
   b944c:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   b945c:	2020 2020 2020 2020 2020 2020 2020 2020                     
   b946c:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   b947c:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   b948c:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   b949c:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   b94ac:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   b94bc:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   b94cc:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000b954d <link_const_data_end>:
   b954d:	00          	.byte	0x00
	...

000b9550 <link_constructors_location>:
   b9550:	000b4dd5 	.word	0x000b4dd5
   b9554:	000b539d 	.word	0x000b539d
   b9558:	000b53f1 	.word	0x000b53f1
   b955c:	000b5421 	.word	0x000b5421
   b9560:	000b5441 	.word	0x000b5441
   b9564:	000b5465 	.word	0x000b5465
   b9568:	000b5a51 	.word	0x000b5a51
   b956c:	000b5a79 	.word	0x000b5a79
   b9570:	000b6279 	.word	0x000b6279
   b9574:	000b631d 	.word	0x000b631d
   b9578:	000b632d 	.word	0x000b632d
   b957c:	000b6349 	.word	0x000b6349
   b9580:	000b738d 	.word	0x000b738d
   b9584:	000b74f1 	.word	0x000b74f1
